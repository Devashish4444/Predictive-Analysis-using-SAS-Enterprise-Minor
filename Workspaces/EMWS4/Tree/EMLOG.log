*------------------------------------------------------------*
User:                skokse_uncc
Date:                April 25, 2020
Time:                11:02:17
Site:                70117250
Platform:            X64_DSRV16
Maintenance Release: 9.04.01M5P091317
EM Version:          14.3
* 
*------------------------------------------------------------*
* Training Log
Date:                April 25, 2020
Time:                11:02:01
*------------------------------------------------------------*
15208  proc freq data=EMWS4.Tree_VariableSet noprint;
15209  table ROLE*LEVEL/out=WORK.TreeMETA;
15210  run;
 
NOTE: There were 14 observations read from the data set EMWS4.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15211  proc print data=WORK.TreeMETA label noobs;
15212  var ROLE LEVEL COUNT;
15213  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15214  title9 ' ';
15215  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15216  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15217  title10;
 
15218  %let EMNORLEN = %DMNORLEN;
EMWS4.Part_TRAIN EMWS4.Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15247  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15248  length ORDER $20;
15249  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15250     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15251  set EMWS4.IDS_TARGETBUY_DM( where=(_TYPE_="TARGET"));
15252  NumLevels=2;
15253  select(upcase(ORDER));
15254  when('DESC') ORDER = 'Descending';
15255  when('ASC') ORDER = 'Ascending';
15256  when('FMTDESC') ORDER = 'Formatted Descending';
15257  when('FMTASC') ORDER = 'Formatted Ascending';
15258  otherwise ORDER = 'Descending';
15259  end;
15260  output;
15261  run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
15262  title9 ' ';
15263  proc print data=WORK.Tree_EVENT noobs label;
15264  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15265  title9 ' ';
15266  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15267  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15268  title10;
 
"No decisions defined for target "TargetBuy"."
15269  proc print data = EMWS4.Ids_TargetBuy_DM noobs label;
15270  var _type_ variable label;
15271  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15272  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15273  title9 ' ';
15274  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15275  run;
 
NOTE: There were 7 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15276  title10;
 
15277  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15785  *------------------------------------------------------------*;
15786  * Tree: Generation of macros and macro variables;
15787  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15788  *------------------------------------------------------------*;
 
15789  %let EMEXCEPTIONSTRING=;
15790  *------------------------------------------------------------*;
15791  * TRAIN: Tree;
15792  *------------------------------------------------------------*;
15793  %let EM_ACTION = TRAIN;
15794  %let syscc = 0;
15795  %macro main;
15796
15797    %if %upcase(&EM_ACTION) = CREATE %then %do;
15798      filename temp catalog 'sashelp.emmodl.tree_create.source';
15799      %include temp;
15800      filename temp;
15801
15802      %em_tree_create;
15803    %end;
15804
15805     %else
15806     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15807
15808         filename temp catalog 'sashelp.emmodl.tree_train.source';
15809         %include temp;
15810         filename temp;
15811         %em_tree_train;
15812     %end;
15813
15814    %else
15815    %if %upcase(&EM_ACTION) = SCORE %then %do;
15816      filename temp catalog 'sashelp.emmodl.tree_score.source';
15817      %include temp;
15818      filename temp;
15819
15820      %em_tree_score;
15821
15822    %end;
15823
15824    %else
15825    %if %upcase(&EM_ACTION) = REPORT %then %do;
15826
15827         filename temp catalog 'sashelp.emmodl.tree_report.source';
15828         %include temp;
15829         filename temp;
15830
15831         %em_tree_report;
15832     %end;
15833
15834    %else
15835    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15836
15837         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15838         %include temp;
15839         filename temp;
15840         %EM_TREE_OPENTREEVIEWER;
15841
15842     %end;
15843
15844    %else
15845    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15846
15847         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15848         %include temp;
15849         filename temp;
15850         %EM_TREE_CLOSETREEVIEWER;
15851
15852     %end;
15853
15854
15855     %doendm:
15856  %mend main;
15857
15858  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15860 +%macro em_tree_train;
15862 +   %if &EM_IMPORT_DATA eq %then %do;
15863 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15864 +       %put &em_codebar;
15865 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15866 +       %put &errormsg;
15867 +       %put &em_codebar;
15868 +       %goto doendm;
15869 +   %end;
15870 +   %else
15871 +       %let EMEXCEPTIONSTRING =;
15873 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15874 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15875 +        %put &em_codebar;
15876 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15877 +        %put &errormsg;
15878 +        %put &em_codebar;
15879 +        %goto doendm;
15880 +   %end;
15882 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15883 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15884 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15885 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15886 +        %put &em_codebar;
15887 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15888 +        %put &errormsg;
15889 +        %put &em_codebar;
15890 +        %goto doendm;
15891 +   %end;
15893 +   /* Initialize property macro variables */
15894 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15895 +   %include temp;
15896 +   filename temp;
15898 +   %EM_SetProperties;
15900 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15901 +   %EM_GETNAME(key=EMTREE, type=DATA);
15902 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15903 +     /* if import eq Y and no importtable defined, throw an exception */
15904 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15905 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15906 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15907 +         %put &em_codebar;
15908 +         %put &errmsg;
15909 +         %put &em_codebar;
15910 +         %goto doendm;
15911 +      %end;
15912 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15913 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15914 +         %put &em_codebar;
15915 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15916 +         %put &errormsg;
15917 +         %put &em_codebar;
15918 +         %goto doendm;
15919 +      %end;
15920 +      %else %do;
15921 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15922 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15923 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15924 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15925 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15926 +         %let dsid = %sysfunc(close(&dsid));
15927 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15928 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15929 +            %put &em_codebar;
15930 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15931 +            %put &errormsg;
15932 +            %put &em_codebar;
15933 +            %goto doendm;
15934 +         %end;
15935 +      %end;
15936 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15937 +         proc delete data=&EM_USER_EMTREE;
15938 +         run;
15939 +      %end;
15940 +   %end;
15941 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15942 +      proc delete data=&EM_USER_EMTREE;
15943 +      run;
15944 +   %end;
15946 +   /* load tree macros */
15947 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15948 +   %include temp;
15949 +   filename temp;
15951 +   /* data sets */
15952 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15953 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15954 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15956 +   /* files */
15957 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15959 +   /* check actual num of target levels */
15960 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15961 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15962 +                              nLevel=_nTargetLevel );
15963 +      %if &_nTargetLevel  > 2 %then %do;
15964 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15965 +        %put &em_codebar;
15966 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15967 +        %put &errormsg;
15968 +        %put &em_codebar;
15969 +        %goto doendm;
15970 +      %end;
15971 +   %end;
15973 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15974 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15975 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15976 +        %let costflag=0;
15977 +        data _null_;
15978 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15979 +          if eof then call symput("costflag", _N_);
15980 +        run;
15981 +        %if &costflag gt 0 %then %do;
15982 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15983 +          %put &em_codebar;
15984 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15985 +          %put &errormsg;
15986 +          %put &em_codebar;
15987 +          %goto doendm;
15988 +       %end;
15989 +     %end;
15990 +   %end;
15992 +   /* determine if multiple targets will be processed */
15993 +   %let em_tree_multipleTargets=N;
15994 +   %let em_tree_numTarget = 1;
15995 +   %let em_tree_targetVars=;
15997 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15998 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15999 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16000 +         %let em_tree_multipleTargets=N;
16001 +      %end;
16002 +      %else %do;
16003 +         /* create macro array of targets  */
16004 +         data _null_;
16005 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16006 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16007 +           if eof then
16008 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16009 +        run;
16011 +        %if &em_tree_numTarget gt 1 %then %do;
16012 +           %let em_tree_multipleTargets=Y;
16013 +        %end;
16014 +      %end;
16015 +   %end;
16017 +   /* create view of only necessary variable for performance reasons */
16018 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16019 +   data &tempData / view=&tempData;
16020 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16021 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16022 +       %EM_TARGET
16023 +     %end;
16024 +     %else %do;
16025 +       %if &em_tree_numTarget ne 0 %then %do;
16026 +         %do i=1 %to &em_tree_numTarget;
16027 +            &&em_tree_targetVars&i
16028 +         %end;
16029 +       %end;
16030 +     %end;
16031 +     );
16032 +   run;
16034 +   /* run Tree procedure */
16035 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16037 +   /* Check return code and throw exception if error is detected */
16038 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16039 +   %if &syserr %then %do;
16040 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16041 +     %goto doendm;
16042 +   %end;
16044 +   /* add decision score code if multiple targets are processed */
16045 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16046 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16047 +   %end;
16049 +   /* create outfit dataset if multiple score statements have been executed */
16050 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16052 +   /* create English Rules */
16053 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16054 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16055 +       %em_tree_makeEnglishRules;
16057 +       /* English Rules */
16058 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16060 +     %end;
16061 +   filename x;
16063 +   %doendm:
16064 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16065 +%macro EM_SetProperties;
16067 +   /* train properties */
16068 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16069 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16070 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16071 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16072 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16073 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16074 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16075 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16076 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16077 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16078 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16079 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16080 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16081 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16082 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16083 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16084 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16085 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16086 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16087 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16088 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16089 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16090 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16091 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16092 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16093 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16094 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16095 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16096 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16097 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16098 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16099 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16100 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16101 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16102 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16103 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16104 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16105 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16106 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16107 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16108 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16110 +   /* properties for interactive sample */
16111 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16112 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16113 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16114 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16116 +   /* report properties */
16117 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16118 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16119 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16120 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16131 +   /* score properties */
16132 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16135 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16137 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16138 +  %global &nLevel;
16139 +  proc dmdb batch data=&indata
16140 +    classout=_tmp_dmdbout;
16141 +    class &target;
16142 +  run;
16143 +  data _tmp_dmdbout;
16144 +    set _tmp_dmdbout;
16145 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16146 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16147 +  run;
16148 +  data _null_;
16149 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16150 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16151 +    %let dsid = %sysfunc(close(&dsid));
16152 +     call symput("&nLevel", put(&_obs, Best12.));
16153 +  run;
16155 +  proc datasets lib=work nolist;
16156 +     delete _tmp_dmdbout;
16157 +  run;
16158 +  quit;
16159 +%Mend EM_CheckBinaryTargetLevel;
16162 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16164 +  /* determine the number of obs in training data */
16165 +  proc sql;
16166 +    reset noprint;
16167 +    select count(*) into :em_nobs from &indata;
16168 +  quit;
16170 +  /* determine the number of input variables */
16171 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16172 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16174 +  /* retrieve targetEvent from decmeta */
16175 +  %let targetEvent=;
16176 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16177 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16178 +      data _null_;
16179 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16180 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16181 +      run;
16182 +    %end;
16183 +  %end;
16185 +  /* create targetTable if multipleTar eq Y */
16186 +  data temptarget;
16187 +    set &EM_DATA_VARIABLESET;
16188 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16189 +  run;
16191 + /* data sets */
16192 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16193 + %EM_GETNAME(key=EMTREE,        type=DATA);
16194 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16195 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16196 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16197 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16198 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16199 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16200 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16201 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16203 + /* files */
16204 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16205 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16207 + /* turn on pmml if requested */
16208 + %let nnpmml=0;
16209 + %if %symexist(EM_PMML) %then %do;
16210 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16211 +       %let nnpmml=1;
16213 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16214 +   %end;
16215 +%end;
16217 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16219 +%if &nnpmml or &numClassTarget %then %do;
16221 +    /* create dmdb needed for pmml generation */
16222 +    %let tree_maxlevel = 512;
16223 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16224 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16225 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16226 +      %end;
16227 +    %end;
16228 +    %if &tree_maxlevel gt 0 %then %do;
16229 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16230 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16231 +    %end;
16233 +    %let targetOrderString =;
16234 +    %let targetString = ;
16235 +    data _null_;
16236 +       length orderString nameString $10000;
16237 +       retain orderString nameString;
16238 +       set &em_data_variableset end=eof;
16239 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16240 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16241 +       %end;
16242 +       %else %do;
16243 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16244 +       %end;          select(order);
16245 +         when('')        order ='DESC';
16246 +         when('FMTASC')  order='ASCFMT';
16247 +         when('FMTDESC') order='DESFMT';
16248 +         otherwise;
16249 +       end;
16250 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16251 +       nameString = trim(nameString)!!' '!!trim(NAME);
16253 +       if eof then do;
16254 +          call symput('targetOrderString', trim(orderString));
16255 +          call symput('targetString', trim(nameString));
16256 +       end;
16257 +    run;
16259 +    %let arborkluge= "work._treeDMDB";
16261 +    proc dmdb batch data=&indata
16262 +    %if &nnpmml %then %do;
16263 +        PMML
16264 +    %end;
16265 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16267 +      %if &nnpmml %then %do;
16268 +           %if "%EM_ID" ne "" %then %do;
16269 +             id %EM_ID;
16270 +           %end;
16271 +           %if &EM_NUM_CLASS gt 0 %then %do;
16272 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16273 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16274 +                  &targetOrderString;
16275 +           %end;
16276 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16277 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16278 +           %end;
16279 +           target &targetString %EM_INTERVAL_TARGET;
16280 +           %if "%EM_FREQ" ne "" %then %do;
16281 +             freq %EM_FREQ;
16282 +           %end;
16283 +      %end;
16284 +      %else %do;
16285 +         class  &targetOrderString;
16286 +         target &targetString %EM_INTERVAL_TARGET;
16287 +      %end;
16288 +    run;
16289 +    quit;
16291 +    proc datasets lib=work nolist;
16292 +       delete classout varout;
16293 +    run;
16294 +    quit;
16296 + %end;
16299 + /* run Arbor procedure */
16300 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16301 +  proc arbor data=&INDATA
16303 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16304 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16305 +  %end;
16307 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16308 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16309 +  %end;
16311 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16312 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16313 +  %end;
16315 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16316 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16317 +  %end;
16319 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16320 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16321 +  %end;
16323 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16324 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16325 +  %end;
16326 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16327 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16328 +  %end;
16329 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16330 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16331 +  %end;
16333 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16334 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16335 +      alpha = &EM_PROPERTY_SIGLEVEL
16336 +    %end;
16337 +  %end;
16339 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16340 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16341 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16342 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16343 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16345 +        padjust =
16346 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16347 +          &chaid
16348 +        %end;
16349 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16350 +          DEPTH
16351 +        %end;
16352 +      %end;
16353 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16354 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16355 +         pvars = &num_inputs
16356 +      %end;
16357 +    %end;
16358 +  %end;
16359 +  %else %do;
16360 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16361 +         padjust = NONE
16362 +      %end;
16363 +  %end;
16365 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16366 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16367 +    Maxrules = &num_nrules
16368 +  %end;
16370 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16371 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16372 +    Maxsurrs = &num_nsurrs
16373 +  %end;
16375 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16376 +     Missing=&EM_PROPERTY_MISSINGVALUE
16377 +  %end;
16379 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16380 +     USEVARONCE
16381 +  %end;
16383 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16384 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16385 +  %end;
16388 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16389 +    event = "&targetEvent"
16390 +  %end;
16392 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16393 +     DECSEARCH
16394 +  %end;
16396 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16397 +     PRIORSSEARCH
16398 +  %end;
16400 +  %if &arbor_1 ne %then %do;
16401 +    &arbor_1
16402 +  %end;
16404 +  %if &em_arbor ne %then %do;
16405 +     &em_arbor
16406 +  %end;
16407 +  ;
16408 + %end;
16409 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16410 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16411 +       Performance &EM_PROPERTY_PERFORMANCE
16412 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16413 +         nodesize=&EM_PROPERTY_NODESAMPLE
16414 +       %end;
16415 +       ;
16416 +       interact;
16417 + %end;
16418 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16419 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16420 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16421 +    %put &em_codebar;
16422 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16423 +    %put &errormsg;
16424 +    %put &em_codebar;
16425 +    %goto doendm;
16426 +   %end;
16427 +   %else %do;
16428 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16429 +       Performance &EM_PROPERTY_PERFORMANCE
16430 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16431 +         nodesize=&EM_PROPERTY_NODESAMPLE
16432 +       %end;
16433 +       ;
16434 +       interact;
16435 +   %end;
16436 + %end;
16438 + %else %do;
16439 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16440 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16441 +    %put &em_codebar;
16442 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16443 +    %put &errormsg;
16444 +    %put &em_codebar;
16445 +    %goto doendm;
16446 +   %end;
16447 +   %else %do;
16448 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16449 +       Performance &EM_PROPERTY_PERFORMANCE
16450 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16451 +         nodesize=&EM_PROPERTY_NODESAMPLE
16452 +       %end;
16453 +       ;
16454 +        interact;
16455 +   %end;
16456 + %end;
16458 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16459 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16460 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16461 +    %end;
16463 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16464 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16465 +    %end;
16467 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16468 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16469 +    %end;
16471 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16472 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16473 +    %end;
16475 +    %if "%EM_FREQ" ne "" %then %do;
16476 +       freq %EM_FREQ;
16477 +    %end;
16479 +    %if "&multipleTar" eq "Y" %then %do;
16480 +       /* cycle through all target vars in variableset */
16481 +       %let tdsid = %sysfunc(open(temptarget));
16482 +       %if &tdsid %then %do;
16483 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16484 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16485 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16486 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16487 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16488 +             target &var / level = &lvl
16489 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16490 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16491 +             %end;
16492 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16493 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16494 +             %end;
16495 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16496 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16497 +             %end;
16498 +          %end;
16499 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16500 +       %end;
16501 +       useTarget variable = %EM_TARGET;
16502 +    %end;
16503 +    %else %do;
16504 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16505 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16506 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16507 +      %end;
16508 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16509 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16510 +      %end;
16511 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16512 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16513 +      %end;
16514 +    %end;
16516 +    %if "&multipleTar" eq "N" %then %do;
16517 +      &EM_DEC_STATEMENT;
16518 +    %end;
16520 +    Performance &EM_PROPERTY_PERFORMANCE
16521 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16522 +      nodesize=&EM_PROPERTY_NODESAMPLE
16523 +    %end;
16524 +    ;
16526 +    %if "&intFlag" eq "Y" %then %do;
16527 +       INTERACT Largest;
16528 +       Train maxnewdepth=0;
16529 +    %end;
16531 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16532 +         Assess
16533 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16534 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16535 +              %put &em_codebar;
16536 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16537 +              %put &errormsg;
16538 +              %put &em_codebar;
16539 +            %end;
16540 +            %else %do;
16541 +               Validata=&EM_IMPORT_VALIDATE
16542 +            %end;
16543 +         %end;
16544 +         %else %do;
16545 +           NoValidata
16546 +         %end;
16547 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16548 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16549 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16550 +               %if &dsid %then %do;
16551 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16552 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16553 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16554 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16555 +                   %else %do;
16556 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16557 +                      %else %let measure= MISC;
16558 +                   %end;
16559 +                 %end;
16560 +               %end;
16561 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16562 +            %end;
16563 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16564 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16565 +                 %let measure=ASE;
16566 +              %end;
16567 +              %else %do;
16568 +                 %let measure=MISC;
16569 +              %end;
16570 +            %end;
16571 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16572 +              %let measure=ASE;
16573 +            %end;
16574 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16575 +               %let measure = LIFT;
16576 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16577 +               %if &dsid %then %do;
16578 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16579 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16580 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16581 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16582 +                 %end;
16583 +               %end;
16584 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16585 +            %end;
16586 +            measure=&measure
16587 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16588 +               event = "&targetEvent"
16589 +            %end;
16590 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16591 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16592 +            %end;
16593 +         %end;
16594 +         %if "&multipleTar" eq "N" %then %do;
16595 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16596 +               CV
16597 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16598 +                 CVNITer = &EM_PROPERTY_CVNITER
16599 +               %end;
16600 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16601 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16602 +               %end;
16603 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16604 +                 CVSeed = &EM_PROPERTY_CVSEED
16605 +               %end;
16606 +            %end;
16607 +         %end;
16608 +       %end;
16609 +      ;
16611 +      %if "&intFlag" ne "Y" %then %do;
16612 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16613 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16614 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16615 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16617 +          SUBTREE &subtree
16618 +          %if "&subtree" eq "NLEAVES" %then %do;
16619 +            =&EM_PROPERTY_NSUBTREE
16620 +          %end;
16621 +          ;
16622 +        %end;
16624 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16625 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16626 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16627 +          %end;
16628 +       %end;
16629 +      %end;
16630 + %end;
16633 + MakeMacro nleaves = nleaves;
16634 + save
16635 + %if "&EM_USER_EMTREE" ne "" %then %do;
16636 +   MODEL=&EM_USER_EMTREE
16637 + %end;
16638 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16639 +   SEQUENCE=&EM_USER_OUTSEQ
16640 + %end;
16641 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16642 +   IMPORTANCE=&EM_USER_OUTIMPORT
16643 + %end;
16644 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16645 +   NODESTAT=&EM_USER_OUTNODES
16646 + %end;
16647 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16648 +   SUMMARY=&EM_USER_OUTSUMMARY
16649 + %end;
16650 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16651 +   STATSBYNODE=&EM_USER_OUTSTATS
16652 + %end;
16653 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16654 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16655 + %end;
16656 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16657 +   Pathlistnonmissing=&EM_USER_OUTPATH
16658 + %end;
16659 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16660 +   RULES = &EM_USER_OUTRULES
16661 + %end;
16662 + ;
16664 + %if "&intFlag" ne "Y" %then %do;
16666 +   %let lookupString = ;
16667 +   %if ^%symexist(EM_OPTION) %then
16668 +      %let EM_OPTION=;
16670 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16671 +      %let lookupString = LOOKUP=SELECT;
16672 +   %end;
16674 +   %let codetext=;
16675 +   %let norescodetxt=;
16677 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16678 +     %let codetext=&codetext DUMMY;
16679 +     %let norescodetxt=&norescodetxt DUMMY;
16680 +   %end;
16681 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16682 +     %let codetext=&codetext NOLEAFID;
16683 +     %let norescodetxt=&norescodetxt NOLEAFID;
16684 +   %end;
16685 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16686 +     %let norescodetxt=&norescodetxt NOPRED;
16687 +   %end;
16689 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16690 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16692 +   %if &nnpmml %then %do;
16693 +     code pmml;
16694 +   %end;
16696 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16697 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16698 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16699 +   %end;
16700 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16701 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16702 +   %end;
16703 + %end;
16705 + run;
16706 + quit;
16708 + /*%em_checkerror(); */
16709 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16710 +   /* Delete DMDB catalog */
16711 +   proc datasets lib=work nolist;
16712 +       delete _treeDMDB / mt=cat;
16713 +  run;
16714 +  %end;
16716 + %if &nnpmml %then %do;
16717 +    ods pmml close;
16718 + %end;
16720 +  %doendm:
16722 +%mend em_tree_runTreeProcedure;
16724 +%macro em_tree_createFitStats( multipleTar= );
16727 +  /* create targetTable is multipleTar eq Y */
16728 +  data temptarget;
16729 +    set &EM_DATA_VARIABLESET;
16730 +    where ROLE="TARGET";
16731 +  run;
16733 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16734 +   data &EM_USER_EMOUTFIT;
16735 +     length target $32;
16736 +     merge work.fit_train
16737 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16738 +       work.fit_valid
16739 +     %end;
16740 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16741 +       work.fit_test
16742 +     %end;
16743 +     ;
16744 +     %if "&multipleTar" eq "N" %then %do;
16745 +       target="%EM_TARGET";
16746 +     %end;
16747 +     %else %do;
16748 +       target = _TARGET_;
16749 +     %end;
16750 +     drop _NW_ _SUMW_
16751 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16752 +        _VSUMW_
16753 +     %end;
16754 +     ;
16755 +   run;
16757 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16758 +     proc datasets library=work nolist;
16759 +       delete fit_valid;
16760 +     run;
16761 +   %end;
16762 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16763 +     proc datasets library=work nolist;
16764 +       delete fit_test;
16765 +     run;
16766 +   %end;
16768 +%mend em_tree_createFitStats;
16771 +%macro em_tree_makeEnglishRules;
16773 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16774 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16776 +  /* verify that necessary tables exist and if not, skip processing */
16777 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16778 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16779 +    %goto doendm;
16780 +  %end;
16781 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16782 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16783 +    %goto doendm;
16784 +  %end;
16786 +  /* determine length of variable in outpath dataset */
16787 +  %let vlength= ;
16788 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16789 +  %if &dsid ne %then %do;
16790 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16791 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16792 +  %end;
16793 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16795 +  data tempoutpath;
16796 +    length varname $&vlength;
16797 +    retain varname;
16798 +    set &EM_USER_OUTPATH;
16800 +    if ^missing(variable) then varname=variable;
16801 +    else if ^missing(var_name) then varname=var_name;
16802 +    output;
16803 +  run;
16805 +  /* create an array of generated predicted variable names */
16806 +  %let tree_pred_vars = ;
16807 +  %let tree_pred_label = ;
16808 +  %let numpred= 0;
16809 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16811 +    data _null_;
16812 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16813 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16814 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16815 +     if eof then
16816 +       call symput('numpred', strip(put(_N_, BEST.)));
16817 +    run;
16818 +  %end;
16820 +  /* determine if NPRIORS exists in outnodes  */
16821 +  %local nprior_flag;
16822 +  data _null_;
16823 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16824 +    if eof then do;
16825 +      call symput('nprior_flag', strip(put(npriors, best.)));
16826 +    end;
16827 +  run;
16829 +  proc sort data=tempoutpath; by node; run;
16830 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16832 +  data tempoutpath;
16833 +    merge tempoutpath(in=_a) outnodes(keep= node
16834 +    %if "&nprior_flag" ne "." %then %do;
16835 +      NPRIORS
16836 +    %end;
16837 +    %else %do;
16838 +      N
16839 +    %end;
16840 +    %if &numpred gt 0 %then %do;
16841 +      %do i=1 %to &numpred;
16842 +        &&tree_pred_vars&i
16843 +      %end;
16844 +    %end;
16845 +    );
16846 +    by node;
16847 +    if _a;
16848 +  run;
16850 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16852 +  data _null_;
16853 +    file x;
16854 +    set tempoutpath;
16855 +    by node descending varname;
16856 +    retain origvar oldnode string;
16857 +    length origvar $32 oldnode 8 string $200;
16859 +    if _N_ = 1 then do;
16860 +      origvar = varname;
16861 +      oldnode = node;
16862 +    end;
16864 +    if first.node then do;
16865 +       put "&EM_CODEBAR";
16866 +       put " Node = " node;
16867 +       put "&EM_CODEBAR";
16868 +    end;
16870 +      if first.varname then do;
16871 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16872 +            if MISSING(CHARACTER_VALUE) then do;
16873 +             if NUMERIC_VALUE ne .  then do;
16874 +              if ^first.node then do;
16875 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16876 +              end;
16877 +              else do;
16878 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16879 +              end;
16880 +             end;
16881 +            end;
16882 +            else do;
16883 +              if ^first.node then do;
16884 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16885 +              end;
16886 +              else do;
16887 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16888 +              end;
16889 +             end;
16890 +         end;
16891 +         else if RELATION in ("=") then do;
16892 +            if ^first.node then do;
16893 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16894 +            end;
16895 +            else do;
16896 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16897 +            end;
16898 +         end;
16899 +         else if RELATION in ("ISMISSING") then do;
16900 +            if ^first.node then do;
16901 +              string = " AND "|| strip(varname) || " equals Missing";
16902 +            end;
16903 +            else do;
16904 +              string = "if "|| strip(varname) ||" equals Missing";
16905 +            end;
16906 +         end;
16907 +         else if RELATION in ("ISNOTMISSING") then do;
16908 +            if ^first.node then do;
16909 +              string = " AND "|| strip(varname) || " equals All Values";
16910 +            end;
16911 +            else do;
16912 +              string = "if "|| strip(varname) ||" equals All Values";
16913 +            end;
16914 +         end;
16915 +         if ^missing(varname) then origvar = varname;
16916 +         oldnode=node;
16918 +      end;
16919 +      else do;
16920 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16921 +          if MISSING(CHARACTER_VALUE) then do;
16922 +           if  NUMERIC_VALUE ne .  then do;
16923 +            if ^MISSING(string) then
16924 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16925 +            else
16926 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16927 +           end;
16928 +          end;
16929 +          else do;
16930 +            if ^MISSING(string) then
16931 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16932 +            else
16933 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16934 +          end;
16936 +         end;
16937 +         else if RELATION in ("=") then do;
16938 +           string = strip(string)||", "||strip(character_value);
16939 +         end;
16940 +         else if RELATION in ("ISMISSING") then do;
16942 +         end;
16943 +         if ^missing(varname) then origvar = varname;
16944 +         oldnode=node;
16945 +      end;
16946 +      if last.varname then do;
16947 +         if RELATION in ("ISMISSING") then do;
16948 +           if ^first.varname then do;
16949 +             string = strip(string) || " or MISSING";
16950 +           end;
16951 +         end;
16952 +         put string;
16953 +         if ^missing(varname) then origvar = varname;
16954 +         oldnode=node;
16955 +      end;
16957 +      if last.node then do;
16958 +         put "then ";
16959 +         put " Tree Node Identifier   = " node;
16961 +         %if "&nprior_flag" ne "." %then %do;
16962 +           put " Number of Observations = " NPRIORS;
16963 +         %end;
16964 +         %else %do;
16965 +           put " Number of Observations = " N;
16966 +         %end;
16968 +         %if &numpred gt 0 %then %do;
16969 +           %do i=1 %to &numpred;
16970 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16971 +           %end;
16972 +         %end;
16974 +         put " ";
16975 +         if ^missing(varname) then origvar = varname;
16976 +         oldnode=node;
16977 +      end;
16979 +  run;
16981 +  proc datasets lib=work nolist;
16982 +    delete tempoutpath outnodes;
16983 +  run;
16985 +  %doendm:
16986 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS4.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS4.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596463 kilobytes of physical memory.
NOTE: Will use 11112 out of 11112 training cases.
NOTE: Using memory pool with 176443392 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 2853968 bytes of work memory.
NOTE: The subtree sequence contains 29 subtrees. The largest has 57 nodes and 29 leaves.
NOTE: Using subtree with 23 nodes and 12 leaves.
NOTE: Using subtree with 23 nodes and 12 leaves.
NOTE: Created macro variable NLEAVES equal to 12.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS4.TREE_EMTREE has 1416 observations and 4 variables.
NOTE: The data set EMWS4.TREE_OUTNODES has 23 observations and 24 variables.
NOTE: The data set EMWS4.TREE_OUTPATH has 78 observations and 7 variables.
NOTE: The data set EMWS4.TREE_OUTRULES has 293 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTSEQ has 29 observations and 20 variables.
NOTE: The data set EMWS4.TREE_OUTSTATS has 161 observations and 5 variables.
NOTE: The data set EMWS4.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTTOPOLOGY has 23 observations and 5 variables.
NOTE: External file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\TREEFLOW.sas opened.
NOTE: External file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
 
 
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           1.84 seconds
      cpu time            0.46 seconds
 
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS4.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.84 seconds
      cpu time            0.46 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS4.TREE_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 78 observations read from the data set EMWS4.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 78 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 78 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 23 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 78 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 78 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=25Apr2020:11:02:06,
      Create Time=25Apr2020:11:02:06
 
NOTE: 141 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 78 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16988
16989  *------------------------------------------------------------*;
16990  * End TRAIN: Tree;
16991  *------------------------------------------------------------*;
 
16992  *------------------------------------------------------------*;
16993  * Close any missing semi colons;
16994  *------------------------------------------------------------*;
16995  ;
16996  ;
16997  ;
16998  ;
16999  quit;
17000  *------------------------------------------------------------*;
17001  * Close any unbalanced quotes;
17002  *------------------------------------------------------------*;
17003  /*; *"; *'; */
17004  ;
17005  run;
17006  quit;
17007  /* Reset EM Options */
17008  options formchar="|----|+|---+=|-/\<>*";
17009  options nocenter ls=256 ps=10000;
17010  goptions reset=all device=GIF NODISPLAY;
 
17011  proc sort data=WORK.EM_USER_REPORT;
17012  by ID VIEW;
17013  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 25, 2020
Time:                11:02:07
*------------------------------------------------------------*
17115  %let EMEXCEPTIONSTRING=;
17116  *------------------------------------------------------------*;
17117  * SCORE: Tree;
17118  *------------------------------------------------------------*;
17119  %let EM_ACTION = SCORE;
17120  %let syscc = 0;
17121  %macro main;
17122
17123    %if %upcase(&EM_ACTION) = CREATE %then %do;
17124      filename temp catalog 'sashelp.emmodl.tree_create.source';
17125      %include temp;
17126      filename temp;
17127
17128      %em_tree_create;
17129    %end;
17130
17131     %else
17132     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17133
17134         filename temp catalog 'sashelp.emmodl.tree_train.source';
17135         %include temp;
17136         filename temp;
17137         %em_tree_train;
17138     %end;
17139
17140    %else
17141    %if %upcase(&EM_ACTION) = SCORE %then %do;
17142      filename temp catalog 'sashelp.emmodl.tree_score.source';
17143      %include temp;
17144      filename temp;
17145
17146      %em_tree_score;
17147
17148    %end;
17149
17150    %else
17151    %if %upcase(&EM_ACTION) = REPORT %then %do;
17152
17153         filename temp catalog 'sashelp.emmodl.tree_report.source';
17154         %include temp;
17155         filename temp;
17156
17157         %em_tree_report;
17158     %end;
17159
17160    %else
17161    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17162
17163         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17164         %include temp;
17165         filename temp;
17166         %EM_TREE_OPENTREEVIEWER;
17167
17168     %end;
17169
17170    %else
17171    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17172
17173         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17174         %include temp;
17175         filename temp;
17176         %EM_TREE_CLOSETREEVIEWER;
17177
17178     %end;
17179
17180
17181     %doendm:
17182  %mend main;
17183
17184  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17186 +%macro em_tree_score;
17188 +   /* determine if multiple targets will be processed */
17189 +   %let em_tree_multipleTargets=N;
17190 +   %let em_tree_numTarget=1;
17191 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17192 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17193 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17194 +         %let em_tree_multipleTargets=N;
17195 +      %end;
17196 +      %else %do;
17197 +         /* create macro array of targets  */
17198 +         data _null_;
17199 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17200 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17201 +           if eof then
17202 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17203 +        run;
17205 +        %if &em_tree_numTarget gt 1 %then %do;
17206 +           %let em_tree_multipleTargets=Y;
17207 +        %end;
17208 +      %end;
17209 +   %end;
17211 +   /* build flow and publish scoring code */
17212 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17213 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17215 +   filename treeflow "&EM_USER_TREEFLOW";
17216 +   filename treepub "&EM_USER_TREEPUBLISH";
17218 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17219 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17221 +   %em_copyfile(infref=treeflow, outfref=flowref);
17222 +   %em_copyfile(infref=treepub, outfref=pubref);
17224 +   filename treeflow;
17225 +   filename treepub;
17227 +   /* if priors are used, add code to generate unadjusted residuals in export */
17228 +   %let useAdjPriors = N;
17229 +   data _null_;
17230 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17231 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17232 +   run;
17233 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17234 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17235 +      %include temp;
17236 +      filename temp;
17238 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17239 +      filename adjref "&EM_USER_adjResidualCode";
17240 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17242 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17244 +      filename adjref;
17245 +   %end;
17247 +   /* LEAF */
17248 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17249 +      data _null_;
17250 +        file flowref mod;
17251 +        put 'drop _LEAF_;';
17252 +      run;
17254 +      data _null_;
17255 +        file pubref mod;
17256 +        put 'drop _LEAF_;';
17257 +      run;
17259 +   %end;
17261 +   filename flowref;
17262 +   filename pubref;
17264 +   /* em_metachange code */
17265 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17266 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17267 +   %end;
17269 +   /* variable selection based on importance stat    */
17270 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17271 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17272 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17273 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17274 +     %let obs = %sysfunc(fetch(&dsid));
17275 +     %do %while(&obs=0);
17276 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17277 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17278 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17279 +       %let obs = %sysfunc(fetch(&dsid));
17280 +     %end;
17281 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17282 +   %end;
17284 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17285 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17286 +    %let tree_pred_vars = ;
17287 +    %let tree_pred_lvl =;
17288 +    %let numpred= 0;
17290 +    data _null_;
17291 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17292 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17293 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17294 +     if eof then
17295 +       call symput('numpred', strip(put(_N_, BEST.)));
17296 +    run;
17297 +   %end;
17299 +   %if &numpred ne 0 %then %do;
17300 +    %do i=1 %to &numpred;
17301 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17302 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17303 +    %end;
17304 +   %end;
17306 +   /* determine if multiple targets will be processed */
17307 +   %let em_tree_multipleTargets=N;
17308 +   %let em_tree_numTarget=1;
17309 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17310 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17311 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17312 +         %let em_tree_multipleTargets=N;
17313 +      %end;
17314 +      %else %do;
17315 +        data _null_;
17316 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17317 +          if eof then
17318 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17319 +        run;
17321 +        %if &em_tree_numTarget gt 1 %then %do;
17322 +           %let em_tree_multipleTargets=Y;
17323 +        %end;
17324 +     %end;
17325 +   %end;
17327 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17328 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17330 +      /* variable importance */
17331 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17332 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17334 +         %let validexist=0;
17335 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17336 +           %let validexist=1;
17337 +         %end;
17339 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17340 +         /* and the columns may not be generated                                                                                 */
17341 +         %let em_tree_cvexists=;
17342 +         %let em_tree_surrexists=.;
17343 +         data _null_;
17344 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17345 +            if eof then do ;
17346 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17347 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17348 +            end;
17349 +         run;
17351 +         data &EM_USER_OUTIMPORT;
17352 +            set &EM_USER_OUTIMPORT;
17354 +            /* format columns based on Precison value specified */
17355 +            format importance 15.&EM_PROPERTY_PRECISION
17356 +                 %if &validexist %then %do;
17357 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17358 +                 %end;
17359 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17360 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17361 +                 %end;
17362 +            ;
17363 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17364 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17365 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17366 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17367 +                 %if "&em_tree_surrexists" ne "" %then %do;
17368 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17369 +                 %end;
17370 +                 %if &validexist %then %do;
17371 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17372 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17373 +                 %end;
17374 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17375 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17376 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17377 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17378 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17379 +                 %end;
17380 +            ;
17381 +         run;
17383 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17384 +      %end;
17385 +   %end;
17387 +   %doendm:
17388 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=25Apr2020:11:02:07,
      Create Time=25Apr2020:11:02:07
 
NOTE: 235 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=25Apr2020:11:02:07,
      Create Time=25Apr2020:11:02:07
 
NOTE: 213 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=8791,
      Last Modified=25Apr2020:11:02:07,
      Create Time=25Apr2020:11:02:07
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=8118,
      Last Modified=25Apr2020:11:02:07,
      Create Time=25Apr2020:11:02:07
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17389
17390  *------------------------------------------------------------*;
17391  * End SCORE: Tree;
17392  *------------------------------------------------------------*;
 
17393  proc sort data=WORK.EM_METACHANGE;
17394  by key uname;
17395  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17396  filename x "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\CDELTA_TRAIN.sas";
17397  data _null_;
17398  file x;
17399  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
17400  put 'ROLE = "REJECTED";';
17401  put 'end;';
17402  put 'else ';
17403  put 'if upcase(NAME) = "DEMREG" then do;';
17404  put 'ROLE = "REJECTED";';
17405  put 'end;';
17406  put 'else ';
17407  put 'if upcase(NAME) = "DEMTVREG" then do;';
17408  put 'ROLE = "REJECTED";';
17409  put 'end;';
17410  put 'else ';
17411  put 'if upcase(NAME) = "PROMCLASS" then do;';
17412  put 'ROLE = "REJECTED";';
17413  put 'end;';
17414  put 'else ';
17415  put 'if upcase(NAME) = "PROMSPEND" then do;';
17416  put 'ROLE = "REJECTED";';
17417  put 'end;';
17418  put 'else ';
17419  put 'if upcase(NAME) = "PROMTIME" then do;';
17420  put 'ROLE = "REJECTED";';
17421  put 'end;';
17422  put 'else ';
17423  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
17424  put 'ROLE = "ASSESS";';
17425  put 'end;';
17426  put 'else ';
17427  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
17428  put 'ROLE = "ASSESS";';
17429  put 'end;';
17430  put 'else ';
17431  put 'if upcase(NAME) = "_NODE_" then do;';
17432  put 'ROLE = "SEGMENT";';
17433  put 'LEVEL = "NOMINAL";';
17434  put 'end;';
17435  run;
 
NOTE: The file X is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=25Apr2020:11:02:07,
      Create Time=25Apr2020:10:49:17
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17436  filename x;
NOTE: Fileref X has been deassigned.
 
17437  filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
17438  *------------------------------------------------------------*;
17439  * Tree: Scoring DATA data;
17440  *------------------------------------------------------------*;
17441  data EMWS4.Tree_TRAIN
17442  / view=EMWS4.Tree_TRAIN
17443  ;
17444  set EMWS4.Part_TRAIN
17445  ;
17446  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas.
17447 +****************************************************************;
17448 +******             DECISION TREE SCORING CODE             ******;
17449 +****************************************************************;
17450 +
17451 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17452 +LENGTH F_TargetBuy  $   12;
17453 +LENGTH I_TargetBuy  $   12;
17454 +LENGTH _WARN_  $    4;
17455 +
17456 +******              LABELS FOR NEW VARIABLES              ******;
17457 +label _NODE_ = 'Node' ;
17458 +label _LEAF_ = 'Leaf' ;
17459 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17460 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17461 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17462 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17463 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17464 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17465 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17466 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17467 +label F_TargetBuy = 'From: TargetBuy' ;
17468 +label I_TargetBuy = 'Into: TargetBuy' ;
17469 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17470 +label _WARN_ = 'Warnings' ;
17471 +
17472 +
17473 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17474 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17475 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17476 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17477 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17478 +
17479 +
17480 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17481 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17482 +
17483 +******             ASSIGN OBSERVATION TO NODE             ******;
17484 +IF  NOT MISSING(DemAge ) AND
17485 +  DemAge  <                 44.5 THEN DO;
17486 +  IF  NOT MISSING(DemAffl ) AND
17487 +    DemAffl  <                  9.5 THEN DO;
17488 +    _ARBFMT_1 = PUT( DemGender , $1.);
17489 +     %DMNORMIP( _ARBFMT_1);
17490 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17491 +      IF  NOT MISSING(DemAffl ) AND
17492 +        DemAffl  <                  6.5 THEN DO;
17493 +        _NODE_  =                   16;
17494 +        _LEAF_  =                    1;
17495 +        P_TargetBuy0  =     0.65573770491803;
17496 +        P_TargetBuy1  =     0.34426229508196;
17497 +        Q_TargetBuy0  =     0.65573770491803;
17498 +        Q_TargetBuy1  =     0.34426229508196;
17499 +        V_TargetBuy0  =     0.59259259259259;
17500 +        V_TargetBuy1  =      0.4074074074074;
17501 +        I_TargetBuy  = '0' ;
17502 +        U_TargetBuy  =                    0;
17503 +        END;
17504 +      ELSE DO;
17505 +        IF  NOT MISSING(DemAge ) AND
17506 +                          39.5 <= DemAge  THEN DO;
17507 +          _NODE_  =                   33;
17508 +          _LEAF_  =                    3;
17509 +          P_TargetBuy0  =     0.56852791878172;
17510 +          P_TargetBuy1  =     0.43147208121827;
17511 +          Q_TargetBuy0  =     0.56852791878172;
17512 +          Q_TargetBuy1  =     0.43147208121827;
17513 +          V_TargetBuy0  =     0.62765957446808;
17514 +          V_TargetBuy1  =     0.37234042553191;
17515 +          I_TargetBuy  = '0' ;
17516 +          U_TargetBuy  =                    0;
17517 +          END;
17518 +        ELSE DO;
17519 +          _NODE_  =                   32;
17520 +          _LEAF_  =                    2;
17521 +          P_TargetBuy0  =     0.38622754491017;
17522 +          P_TargetBuy1  =     0.61377245508982;
17523 +          Q_TargetBuy0  =     0.38622754491017;
17524 +          Q_TargetBuy1  =     0.61377245508982;
17525 +          V_TargetBuy0  =     0.39423076923076;
17526 +          V_TargetBuy1  =     0.60576923076923;
17527 +          I_TargetBuy  = '1' ;
17528 +          U_TargetBuy  =                    1;
17529 +          END;
17530 +        END;
17531 +      END;
17532 +    ELSE DO;
17533 +      _NODE_  =                    9;
17534 +      _LEAF_  =                    4;
17535 +      P_TargetBuy0  =     0.76833333333333;
17536 +      P_TargetBuy1  =     0.23166666666666;
17537 +      Q_TargetBuy0  =     0.76833333333333;
17538 +      Q_TargetBuy1  =     0.23166666666666;
17539 +      V_TargetBuy0  =      0.7815699658703;
17540 +      V_TargetBuy1  =     0.21843003412969;
17541 +      I_TargetBuy  = '0' ;
17542 +      U_TargetBuy  =                    0;
17543 +      END;
17544 +    END;
17545 +  ELSE DO;
17546 +    _ARBFMT_1 = PUT( DemGender , $1.);
17547 +     %DMNORMIP( _ARBFMT_1);
17548 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17549 +      _NODE_  =                   10;
17550 +      _LEAF_  =                    5;
17551 +      P_TargetBuy0  =     0.22297297297297;
17552 +      P_TargetBuy1  =     0.77702702702702;
17553 +      Q_TargetBuy0  =     0.22297297297297;
17554 +      Q_TargetBuy1  =     0.77702702702702;
17555 +      V_TargetBuy0  =     0.21638655462184;
17556 +      V_TargetBuy1  =     0.78361344537815;
17557 +      I_TargetBuy  = '1' ;
17558 +      U_TargetBuy  =                    1;
17559 +      END;
17560 +    ELSE DO;
17561 +      IF  NOT MISSING(DemAffl ) AND
17562 +                        14.5 <= DemAffl  THEN DO;
17563 +        _NODE_  =                   23;
17564 +        _LEAF_  =                    7;
17565 +        P_TargetBuy0  =     0.11111111111111;
17566 +        P_TargetBuy1  =     0.88888888888888;
17567 +        Q_TargetBuy0  =     0.11111111111111;
17568 +        Q_TargetBuy1  =     0.88888888888888;
17569 +        V_TargetBuy0  =     0.21951219512195;
17570 +        V_TargetBuy1  =     0.78048780487804;
17571 +        I_TargetBuy  = '1' ;
17572 +        U_TargetBuy  =                    1;
17573 +        END;
17574 +      ELSE DO;
17575 +        _NODE_  =                   22;
17576 +        _LEAF_  =                    6;
17577 +        P_TargetBuy0  =     0.54202898550724;
17578 +        P_TargetBuy1  =     0.45797101449275;
17579 +        Q_TargetBuy0  =     0.54202898550724;
17580 +        Q_TargetBuy1  =     0.45797101449275;
17581 +        V_TargetBuy0  =     0.64795918367346;
17582 +        V_TargetBuy1  =     0.35204081632653;
17583 +        I_TargetBuy  = '0' ;
17584 +        U_TargetBuy  =                    0;
17585 +        END;
17586 +      END;
17587 +    END;
17588 +  END;
17589 +ELSE DO;
17590 +  IF  NOT MISSING(DemAffl ) AND
17591 +                    12.5 <= DemAffl  THEN DO;
17592 +    IF  NOT MISSING(DemAffl ) AND
17593 +                      16.5 <= DemAffl  THEN DO;
17594 +      IF  NOT MISSING(DemAffl ) AND
17595 +                        19.5 <= DemAffl  THEN DO;
17596 +        _NODE_  =                   31;
17597 +        _LEAF_  =                   12;
17598 +        P_TargetBuy0  =                    0;
17599 +        P_TargetBuy1  =                    1;
17600 +        Q_TargetBuy0  =                    0;
17601 +        Q_TargetBuy1  =                    1;
17602 +        V_TargetBuy0  =     0.07142857142857;
17603 +        V_TargetBuy1  =     0.92857142857142;
17604 +        I_TargetBuy  = '1' ;
17605 +        U_TargetBuy  =                    1;
17606 +        END;
17607 +      ELSE DO;
17608 +        _ARBFMT_1 = PUT( DemGender , $1.);
17609 +         %DMNORMIP( _ARBFMT_1);
17610 +        IF _ARBFMT_1 IN ('M' ,'F' ) THEN DO;
17611 +          _NODE_  =                   50;
17612 +          _LEAF_  =                   10;
17613 +          P_TargetBuy0  =               0.2625;
17614 +          P_TargetBuy1  =               0.7375;
17615 +          Q_TargetBuy0  =               0.2625;
17616 +          Q_TargetBuy1  =               0.7375;
17617 +          V_TargetBuy0  =     0.24390243902439;
17618 +          V_TargetBuy1  =      0.7560975609756;
17619 +          I_TargetBuy  = '1' ;
17620 +          U_TargetBuy  =                    1;
17621 +          END;
17622 +        ELSE DO;
17623 +          _NODE_  =                   51;
17624 +          _LEAF_  =                   11;
17625 +          P_TargetBuy0  =     0.72727272727272;
17626 +          P_TargetBuy1  =     0.27272727272727;
17627 +          Q_TargetBuy0  =     0.72727272727272;
17628 +          Q_TargetBuy1  =     0.27272727272727;
17629 +          V_TargetBuy0  =                    1;
17630 +          V_TargetBuy1  =                    0;
17631 +          I_TargetBuy  = '0' ;
17632 +          U_TargetBuy  =                    0;
17633 +          END;
17634 +        END;
17635 +      END;
17636 +    ELSE DO;
17637 +      _NODE_  =                   14;
17638 +      _LEAF_  =                    9;
17639 +      P_TargetBuy0  =     0.62099125364431;
17640 +      P_TargetBuy1  =     0.37900874635568;
17641 +      Q_TargetBuy0  =     0.62099125364431;
17642 +      Q_TargetBuy1  =     0.37900874635568;
17643 +      V_TargetBuy0  =      0.6141304347826;
17644 +      V_TargetBuy1  =     0.38586956521739;
17645 +      I_TargetBuy  = '0' ;
17646 +      U_TargetBuy  =                    0;
17647 +      END;
17648 +    END;
17649 +  ELSE DO;
17650 +    _NODE_  =                    6;
17651 +    _LEAF_  =                    8;
17652 +    P_TargetBuy0  =     0.87204854240865;
17653 +    P_TargetBuy1  =     0.12795145759134;
17654 +    Q_TargetBuy0  =     0.87204854240865;
17655 +    Q_TargetBuy1  =     0.12795145759134;
17656 +    V_TargetBuy0  =     0.87185805815672;
17657 +    V_TargetBuy1  =     0.12814194184327;
17658 +    I_TargetBuy  = '0' ;
17659 +    U_TargetBuy  =                    0;
17660 +    END;
17661 +  END;
17662 +
17663 +*****  RESIDUALS R_ *************;
17664 +IF  F_TargetBuy  NE '0'
17665 +AND F_TargetBuy  NE '1'  THEN DO;
17666 +        R_TargetBuy0  = .;
17667 +        R_TargetBuy1  = .;
17668 + END;
17669 + ELSE DO;
17670 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17671 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17672 +       SELECT( F_TargetBuy  );
17673 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17674 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17675 +       END;
17676 + END;
17677 +
17678 +****************************************************************;
17679 +******          END OF DECISION TREE SCORING CODE         ******;
17680 +****************************************************************;
17681 +
17682 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17683  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.01 seconds
 
 
17684  quit;
17685  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17686  filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
17687  *------------------------------------------------------------*;
17688  * Tree: Scoring VALIDATE data;
17689  *------------------------------------------------------------*;
17690  data EMWS4.Tree_VALIDATE
17691  / view=EMWS4.Tree_VALIDATE
17692  ;
17693  set EMWS4.Part_VALIDATE
17694  ;
17695  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas.
17696 +****************************************************************;
17697 +******             DECISION TREE SCORING CODE             ******;
17698 +****************************************************************;
17699 +
17700 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17701 +LENGTH F_TargetBuy  $   12;
17702 +LENGTH I_TargetBuy  $   12;
17703 +LENGTH _WARN_  $    4;
17704 +
17705 +******              LABELS FOR NEW VARIABLES              ******;
17706 +label _NODE_ = 'Node' ;
17707 +label _LEAF_ = 'Leaf' ;
17708 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17709 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17710 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17711 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17712 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17713 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17714 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17715 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17716 +label F_TargetBuy = 'From: TargetBuy' ;
17717 +label I_TargetBuy = 'Into: TargetBuy' ;
17718 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17719 +label _WARN_ = 'Warnings' ;
17720 +
17721 +
17722 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17723 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17724 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17725 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17726 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17727 +
17728 +
17729 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17730 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17731 +
17732 +******             ASSIGN OBSERVATION TO NODE             ******;
17733 +IF  NOT MISSING(DemAge ) AND
17734 +  DemAge  <                 44.5 THEN DO;
17735 +  IF  NOT MISSING(DemAffl ) AND
17736 +    DemAffl  <                  9.5 THEN DO;
17737 +    _ARBFMT_1 = PUT( DemGender , $1.);
17738 +     %DMNORMIP( _ARBFMT_1);
17739 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17740 +      IF  NOT MISSING(DemAffl ) AND
17741 +        DemAffl  <                  6.5 THEN DO;
17742 +        _NODE_  =                   16;
17743 +        _LEAF_  =                    1;
17744 +        P_TargetBuy0  =     0.65573770491803;
17745 +        P_TargetBuy1  =     0.34426229508196;
17746 +        Q_TargetBuy0  =     0.65573770491803;
17747 +        Q_TargetBuy1  =     0.34426229508196;
17748 +        V_TargetBuy0  =     0.59259259259259;
17749 +        V_TargetBuy1  =      0.4074074074074;
17750 +        I_TargetBuy  = '0' ;
17751 +        U_TargetBuy  =                    0;
17752 +        END;
17753 +      ELSE DO;
17754 +        IF  NOT MISSING(DemAge ) AND
17755 +                          39.5 <= DemAge  THEN DO;
17756 +          _NODE_  =                   33;
17757 +          _LEAF_  =                    3;
17758 +          P_TargetBuy0  =     0.56852791878172;
17759 +          P_TargetBuy1  =     0.43147208121827;
17760 +          Q_TargetBuy0  =     0.56852791878172;
17761 +          Q_TargetBuy1  =     0.43147208121827;
17762 +          V_TargetBuy0  =     0.62765957446808;
17763 +          V_TargetBuy1  =     0.37234042553191;
17764 +          I_TargetBuy  = '0' ;
17765 +          U_TargetBuy  =                    0;
17766 +          END;
17767 +        ELSE DO;
17768 +          _NODE_  =                   32;
17769 +          _LEAF_  =                    2;
17770 +          P_TargetBuy0  =     0.38622754491017;
17771 +          P_TargetBuy1  =     0.61377245508982;
17772 +          Q_TargetBuy0  =     0.38622754491017;
17773 +          Q_TargetBuy1  =     0.61377245508982;
17774 +          V_TargetBuy0  =     0.39423076923076;
17775 +          V_TargetBuy1  =     0.60576923076923;
17776 +          I_TargetBuy  = '1' ;
17777 +          U_TargetBuy  =                    1;
17778 +          END;
17779 +        END;
17780 +      END;
17781 +    ELSE DO;
17782 +      _NODE_  =                    9;
17783 +      _LEAF_  =                    4;
17784 +      P_TargetBuy0  =     0.76833333333333;
17785 +      P_TargetBuy1  =     0.23166666666666;
17786 +      Q_TargetBuy0  =     0.76833333333333;
17787 +      Q_TargetBuy1  =     0.23166666666666;
17788 +      V_TargetBuy0  =      0.7815699658703;
17789 +      V_TargetBuy1  =     0.21843003412969;
17790 +      I_TargetBuy  = '0' ;
17791 +      U_TargetBuy  =                    0;
17792 +      END;
17793 +    END;
17794 +  ELSE DO;
17795 +    _ARBFMT_1 = PUT( DemGender , $1.);
17796 +     %DMNORMIP( _ARBFMT_1);
17797 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17798 +      _NODE_  =                   10;
17799 +      _LEAF_  =                    5;
17800 +      P_TargetBuy0  =     0.22297297297297;
17801 +      P_TargetBuy1  =     0.77702702702702;
17802 +      Q_TargetBuy0  =     0.22297297297297;
17803 +      Q_TargetBuy1  =     0.77702702702702;
17804 +      V_TargetBuy0  =     0.21638655462184;
17805 +      V_TargetBuy1  =     0.78361344537815;
17806 +      I_TargetBuy  = '1' ;
17807 +      U_TargetBuy  =                    1;
17808 +      END;
17809 +    ELSE DO;
17810 +      IF  NOT MISSING(DemAffl ) AND
17811 +                        14.5 <= DemAffl  THEN DO;
17812 +        _NODE_  =                   23;
17813 +        _LEAF_  =                    7;
17814 +        P_TargetBuy0  =     0.11111111111111;
17815 +        P_TargetBuy1  =     0.88888888888888;
17816 +        Q_TargetBuy0  =     0.11111111111111;
17817 +        Q_TargetBuy1  =     0.88888888888888;
17818 +        V_TargetBuy0  =     0.21951219512195;
17819 +        V_TargetBuy1  =     0.78048780487804;
17820 +        I_TargetBuy  = '1' ;
17821 +        U_TargetBuy  =                    1;
17822 +        END;
17823 +      ELSE DO;
17824 +        _NODE_  =                   22;
17825 +        _LEAF_  =                    6;
17826 +        P_TargetBuy0  =     0.54202898550724;
17827 +        P_TargetBuy1  =     0.45797101449275;
17828 +        Q_TargetBuy0  =     0.54202898550724;
17829 +        Q_TargetBuy1  =     0.45797101449275;
17830 +        V_TargetBuy0  =     0.64795918367346;
17831 +        V_TargetBuy1  =     0.35204081632653;
17832 +        I_TargetBuy  = '0' ;
17833 +        U_TargetBuy  =                    0;
17834 +        END;
17835 +      END;
17836 +    END;
17837 +  END;
17838 +ELSE DO;
17839 +  IF  NOT MISSING(DemAffl ) AND
17840 +                    12.5 <= DemAffl  THEN DO;
17841 +    IF  NOT MISSING(DemAffl ) AND
17842 +                      16.5 <= DemAffl  THEN DO;
17843 +      IF  NOT MISSING(DemAffl ) AND
17844 +                        19.5 <= DemAffl  THEN DO;
17845 +        _NODE_  =                   31;
17846 +        _LEAF_  =                   12;
17847 +        P_TargetBuy0  =                    0;
17848 +        P_TargetBuy1  =                    1;
17849 +        Q_TargetBuy0  =                    0;
17850 +        Q_TargetBuy1  =                    1;
17851 +        V_TargetBuy0  =     0.07142857142857;
17852 +        V_TargetBuy1  =     0.92857142857142;
17853 +        I_TargetBuy  = '1' ;
17854 +        U_TargetBuy  =                    1;
17855 +        END;
17856 +      ELSE DO;
17857 +        _ARBFMT_1 = PUT( DemGender , $1.);
17858 +         %DMNORMIP( _ARBFMT_1);
17859 +        IF _ARBFMT_1 IN ('M' ,'F' ) THEN DO;
17860 +          _NODE_  =                   50;
17861 +          _LEAF_  =                   10;
17862 +          P_TargetBuy0  =               0.2625;
17863 +          P_TargetBuy1  =               0.7375;
17864 +          Q_TargetBuy0  =               0.2625;
17865 +          Q_TargetBuy1  =               0.7375;
17866 +          V_TargetBuy0  =     0.24390243902439;
17867 +          V_TargetBuy1  =      0.7560975609756;
17868 +          I_TargetBuy  = '1' ;
17869 +          U_TargetBuy  =                    1;
17870 +          END;
17871 +        ELSE DO;
17872 +          _NODE_  =                   51;
17873 +          _LEAF_  =                   11;
17874 +          P_TargetBuy0  =     0.72727272727272;
17875 +          P_TargetBuy1  =     0.27272727272727;
17876 +          Q_TargetBuy0  =     0.72727272727272;
17877 +          Q_TargetBuy1  =     0.27272727272727;
17878 +          V_TargetBuy0  =                    1;
17879 +          V_TargetBuy1  =                    0;
17880 +          I_TargetBuy  = '0' ;
17881 +          U_TargetBuy  =                    0;
17882 +          END;
17883 +        END;
17884 +      END;
17885 +    ELSE DO;
17886 +      _NODE_  =                   14;
17887 +      _LEAF_  =                    9;
17888 +      P_TargetBuy0  =     0.62099125364431;
17889 +      P_TargetBuy1  =     0.37900874635568;
17890 +      Q_TargetBuy0  =     0.62099125364431;
17891 +      Q_TargetBuy1  =     0.37900874635568;
17892 +      V_TargetBuy0  =      0.6141304347826;
17893 +      V_TargetBuy1  =     0.38586956521739;
17894 +      I_TargetBuy  = '0' ;
17895 +      U_TargetBuy  =                    0;
17896 +      END;
17897 +    END;
17898 +  ELSE DO;
17899 +    _NODE_  =                    6;
17900 +    _LEAF_  =                    8;
17901 +    P_TargetBuy0  =     0.87204854240865;
17902 +    P_TargetBuy1  =     0.12795145759134;
17903 +    Q_TargetBuy0  =     0.87204854240865;
17904 +    Q_TargetBuy1  =     0.12795145759134;
17905 +    V_TargetBuy0  =     0.87185805815672;
17906 +    V_TargetBuy1  =     0.12814194184327;
17907 +    I_TargetBuy  = '0' ;
17908 +    U_TargetBuy  =                    0;
17909 +    END;
17910 +  END;
17911 +
17912 +*****  RESIDUALS R_ *************;
17913 +IF  F_TargetBuy  NE '0'
17914 +AND F_TargetBuy  NE '1'  THEN DO;
17915 +        R_TargetBuy0  = .;
17916 +        R_TargetBuy1  = .;
17917 + END;
17918 + ELSE DO;
17919 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17920 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17921 +       SELECT( F_TargetBuy  );
17922 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17923 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17924 +       END;
17925 + END;
17926 +
17927 +****************************************************************;
17928 +******          END OF DECISION TREE SCORING CODE         ******;
17929 +****************************************************************;
17930 +
17931 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17932  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
 
 
17933  quit;
17934  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17935  filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
17936  *------------------------------------------------------------*;
17937  * Tree: Scoring TEST data;
17938  *------------------------------------------------------------*;
17939  data EMWS4.Tree_TEST
17940  / view=EMWS4.Tree_TEST
17941  ;
17942  set EMWS4.Part_TEST
17943  ;
17944  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas.
17945 +****************************************************************;
17946 +******             DECISION TREE SCORING CODE             ******;
17947 +****************************************************************;
17948 +
17949 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17950 +LENGTH F_TargetBuy  $   12;
17951 +LENGTH I_TargetBuy  $   12;
17952 +LENGTH _WARN_  $    4;
17953 +
17954 +******              LABELS FOR NEW VARIABLES              ******;
17955 +label _NODE_ = 'Node' ;
17956 +label _LEAF_ = 'Leaf' ;
17957 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17958 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17959 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17960 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17961 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17962 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17963 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17964 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17965 +label F_TargetBuy = 'From: TargetBuy' ;
17966 +label I_TargetBuy = 'Into: TargetBuy' ;
17967 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17968 +label _WARN_ = 'Warnings' ;
17969 +
17970 +
17971 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17972 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17973 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17974 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17975 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17976 +
17977 +
17978 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17979 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17980 +
17981 +******             ASSIGN OBSERVATION TO NODE             ******;
17982 +IF  NOT MISSING(DemAge ) AND
17983 +  DemAge  <                 44.5 THEN DO;
17984 +  IF  NOT MISSING(DemAffl ) AND
17985 +    DemAffl  <                  9.5 THEN DO;
17986 +    _ARBFMT_1 = PUT( DemGender , $1.);
17987 +     %DMNORMIP( _ARBFMT_1);
17988 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17989 +      IF  NOT MISSING(DemAffl ) AND
17990 +        DemAffl  <                  6.5 THEN DO;
17991 +        _NODE_  =                   16;
17992 +        _LEAF_  =                    1;
17993 +        P_TargetBuy0  =     0.65573770491803;
17994 +        P_TargetBuy1  =     0.34426229508196;
17995 +        Q_TargetBuy0  =     0.65573770491803;
17996 +        Q_TargetBuy1  =     0.34426229508196;
17997 +        V_TargetBuy0  =     0.59259259259259;
17998 +        V_TargetBuy1  =      0.4074074074074;
17999 +        I_TargetBuy  = '0' ;
18000 +        U_TargetBuy  =                    0;
18001 +        END;
18002 +      ELSE DO;
18003 +        IF  NOT MISSING(DemAge ) AND
18004 +                          39.5 <= DemAge  THEN DO;
18005 +          _NODE_  =                   33;
18006 +          _LEAF_  =                    3;
18007 +          P_TargetBuy0  =     0.56852791878172;
18008 +          P_TargetBuy1  =     0.43147208121827;
18009 +          Q_TargetBuy0  =     0.56852791878172;
18010 +          Q_TargetBuy1  =     0.43147208121827;
18011 +          V_TargetBuy0  =     0.62765957446808;
18012 +          V_TargetBuy1  =     0.37234042553191;
18013 +          I_TargetBuy  = '0' ;
18014 +          U_TargetBuy  =                    0;
18015 +          END;
18016 +        ELSE DO;
18017 +          _NODE_  =                   32;
18018 +          _LEAF_  =                    2;
18019 +          P_TargetBuy0  =     0.38622754491017;
18020 +          P_TargetBuy1  =     0.61377245508982;
18021 +          Q_TargetBuy0  =     0.38622754491017;
18022 +          Q_TargetBuy1  =     0.61377245508982;
18023 +          V_TargetBuy0  =     0.39423076923076;
18024 +          V_TargetBuy1  =     0.60576923076923;
18025 +          I_TargetBuy  = '1' ;
18026 +          U_TargetBuy  =                    1;
18027 +          END;
18028 +        END;
18029 +      END;
18030 +    ELSE DO;
18031 +      _NODE_  =                    9;
18032 +      _LEAF_  =                    4;
18033 +      P_TargetBuy0  =     0.76833333333333;
18034 +      P_TargetBuy1  =     0.23166666666666;
18035 +      Q_TargetBuy0  =     0.76833333333333;
18036 +      Q_TargetBuy1  =     0.23166666666666;
18037 +      V_TargetBuy0  =      0.7815699658703;
18038 +      V_TargetBuy1  =     0.21843003412969;
18039 +      I_TargetBuy  = '0' ;
18040 +      U_TargetBuy  =                    0;
18041 +      END;
18042 +    END;
18043 +  ELSE DO;
18044 +    _ARBFMT_1 = PUT( DemGender , $1.);
18045 +     %DMNORMIP( _ARBFMT_1);
18046 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
18047 +      _NODE_  =                   10;
18048 +      _LEAF_  =                    5;
18049 +      P_TargetBuy0  =     0.22297297297297;
18050 +      P_TargetBuy1  =     0.77702702702702;
18051 +      Q_TargetBuy0  =     0.22297297297297;
18052 +      Q_TargetBuy1  =     0.77702702702702;
18053 +      V_TargetBuy0  =     0.21638655462184;
18054 +      V_TargetBuy1  =     0.78361344537815;
18055 +      I_TargetBuy  = '1' ;
18056 +      U_TargetBuy  =                    1;
18057 +      END;
18058 +    ELSE DO;
18059 +      IF  NOT MISSING(DemAffl ) AND
18060 +                        14.5 <= DemAffl  THEN DO;
18061 +        _NODE_  =                   23;
18062 +        _LEAF_  =                    7;
18063 +        P_TargetBuy0  =     0.11111111111111;
18064 +        P_TargetBuy1  =     0.88888888888888;
18065 +        Q_TargetBuy0  =     0.11111111111111;
18066 +        Q_TargetBuy1  =     0.88888888888888;
18067 +        V_TargetBuy0  =     0.21951219512195;
18068 +        V_TargetBuy1  =     0.78048780487804;
18069 +        I_TargetBuy  = '1' ;
18070 +        U_TargetBuy  =                    1;
18071 +        END;
18072 +      ELSE DO;
18073 +        _NODE_  =                   22;
18074 +        _LEAF_  =                    6;
18075 +        P_TargetBuy0  =     0.54202898550724;
18076 +        P_TargetBuy1  =     0.45797101449275;
18077 +        Q_TargetBuy0  =     0.54202898550724;
18078 +        Q_TargetBuy1  =     0.45797101449275;
18079 +        V_TargetBuy0  =     0.64795918367346;
18080 +        V_TargetBuy1  =     0.35204081632653;
18081 +        I_TargetBuy  = '0' ;
18082 +        U_TargetBuy  =                    0;
18083 +        END;
18084 +      END;
18085 +    END;
18086 +  END;
18087 +ELSE DO;
18088 +  IF  NOT MISSING(DemAffl ) AND
18089 +                    12.5 <= DemAffl  THEN DO;
18090 +    IF  NOT MISSING(DemAffl ) AND
18091 +                      16.5 <= DemAffl  THEN DO;
18092 +      IF  NOT MISSING(DemAffl ) AND
18093 +                        19.5 <= DemAffl  THEN DO;
18094 +        _NODE_  =                   31;
18095 +        _LEAF_  =                   12;
18096 +        P_TargetBuy0  =                    0;
18097 +        P_TargetBuy1  =                    1;
18098 +        Q_TargetBuy0  =                    0;
18099 +        Q_TargetBuy1  =                    1;
18100 +        V_TargetBuy0  =     0.07142857142857;
18101 +        V_TargetBuy1  =     0.92857142857142;
18102 +        I_TargetBuy  = '1' ;
18103 +        U_TargetBuy  =                    1;
18104 +        END;
18105 +      ELSE DO;
18106 +        _ARBFMT_1 = PUT( DemGender , $1.);
18107 +         %DMNORMIP( _ARBFMT_1);
18108 +        IF _ARBFMT_1 IN ('M' ,'F' ) THEN DO;
18109 +          _NODE_  =                   50;
18110 +          _LEAF_  =                   10;
18111 +          P_TargetBuy0  =               0.2625;
18112 +          P_TargetBuy1  =               0.7375;
18113 +          Q_TargetBuy0  =               0.2625;
18114 +          Q_TargetBuy1  =               0.7375;
18115 +          V_TargetBuy0  =     0.24390243902439;
18116 +          V_TargetBuy1  =      0.7560975609756;
18117 +          I_TargetBuy  = '1' ;
18118 +          U_TargetBuy  =                    1;
18119 +          END;
18120 +        ELSE DO;
18121 +          _NODE_  =                   51;
18122 +          _LEAF_  =                   11;
18123 +          P_TargetBuy0  =     0.72727272727272;
18124 +          P_TargetBuy1  =     0.27272727272727;
18125 +          Q_TargetBuy0  =     0.72727272727272;
18126 +          Q_TargetBuy1  =     0.27272727272727;
18127 +          V_TargetBuy0  =                    1;
18128 +          V_TargetBuy1  =                    0;
18129 +          I_TargetBuy  = '0' ;
18130 +          U_TargetBuy  =                    0;
18131 +          END;
18132 +        END;
18133 +      END;
18134 +    ELSE DO;
18135 +      _NODE_  =                   14;
18136 +      _LEAF_  =                    9;
18137 +      P_TargetBuy0  =     0.62099125364431;
18138 +      P_TargetBuy1  =     0.37900874635568;
18139 +      Q_TargetBuy0  =     0.62099125364431;
18140 +      Q_TargetBuy1  =     0.37900874635568;
18141 +      V_TargetBuy0  =      0.6141304347826;
18142 +      V_TargetBuy1  =     0.38586956521739;
18143 +      I_TargetBuy  = '0' ;
18144 +      U_TargetBuy  =                    0;
18145 +      END;
18146 +    END;
18147 +  ELSE DO;
18148 +    _NODE_  =                    6;
18149 +    _LEAF_  =                    8;
18150 +    P_TargetBuy0  =     0.87204854240865;
18151 +    P_TargetBuy1  =     0.12795145759134;
18152 +    Q_TargetBuy0  =     0.87204854240865;
18153 +    Q_TargetBuy1  =     0.12795145759134;
18154 +    V_TargetBuy0  =     0.87185805815672;
18155 +    V_TargetBuy1  =     0.12814194184327;
18156 +    I_TargetBuy  = '0' ;
18157 +    U_TargetBuy  =                    0;
18158 +    END;
18159 +  END;
18160 +
18161 +*****  RESIDUALS R_ *************;
18162 +IF  F_TargetBuy  NE '0'
18163 +AND F_TargetBuy  NE '1'  THEN DO;
18164 +        R_TargetBuy0  = .;
18165 +        R_TargetBuy1  = .;
18166 + END;
18167 + ELSE DO;
18168 +       R_TargetBuy0  =  -P_TargetBuy0 ;
18169 +       R_TargetBuy1  =  -P_TargetBuy1 ;
18170 +       SELECT( F_TargetBuy  );
18171 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
18172 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
18173 +       END;
18174 + END;
18175 +
18176 +****************************************************************;
18177 +******          END OF DECISION TREE SCORING CODE         ******;
18178 +****************************************************************;
18179 +
18180 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18181  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
18182  quit;
18183  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
18185  proc sort data=WORK.EM_USER_REPORT;
18186  by ID VIEW;
18187  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18188  *------------------------------------------------------------*;
18189  * Tree: Computing metadata for TRAIN data;
18190  *------------------------------------------------------------*;
 
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
18571  data EMWS4.Tree_EMINFO;
18572  length TARGET KEY $32 DATA $43;
18573  input TARGET KEY DATA $;
18574  cards;
 
NOTE: The data set EMWS4.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
18578  run;
18579  proc sort data = EMWS4.Tree_EMINFO NOTHREADS;
18580  by TARGET KEY;
18581  run;
 
NOTE: There were 3 observations read from the data set EMWS4.TREE_EMINFO.
NOTE: The data set EMWS4.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.21 seconds
      cpu time            0.01 seconds
 
 
18582  proc sort data = EMWS4.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18583  by TARGET KEY;
18584  run;
 
NOTE: There were 4 observations read from the data set EMWS4.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18585  proc sort data = EMWS4.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18586  by TARGET KEY;
18587  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS4.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18588  data EMWS4.Tree_EMINFO;
18589  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18590  by TARGET KEY;
18591  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS4.TREE_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.03 seconds
 
 
18592  proc datasets lib=work nolist;
18593  delete TEMP_INFO SORTEDEMINFO;
18594  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18595  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS4.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS4.TREE_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 25, 2020
Time:                11:02:10
*------------------------------------------------------------*
18619  data EMWS4.Tree_EMOUTFIT;
18620  set EMWS4.Tree_EMOUTFIT;
18621  length TargetLabel $200;
18622  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18623  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18624  run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_EMOUTFIT.
NOTE: The data set EMWS4.TREE_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.00 seconds
 
 
18625  proc sort data=EMWS4.Tree_EMREPORTFIT nothreads;
18626  by TARGET;
18627  run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE_EMREPORTFIT.
NOTE: The data set EMWS4.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.21 seconds
      cpu time            0.00 seconds
 
 
18628  %let _EMwarndup = 0;
18629  %let _EMtargetdup =;
18630  %let _EMASEtargetdup =;
18631  data _null_;
18632  set EMWS4.Tree_EMOUTFIT;
18633  if .<_ASE_<0.000001 then do;
18634  call symput('_EMwarndup', '1');
18635  call symput('_EMtargetdup', target);
18636  call symput('_EMASEtargetdup', put(_ASE_, best.));
18637  end;
18638  run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18639  %let EMEXCEPTIONSTRING=;
18640  *------------------------------------------------------------*;
18641  * REPORT: Tree;
18642  *------------------------------------------------------------*;
18643  %let EM_ACTION = REPORT;
18644  %let syscc = 0;
18645  %macro main;
18646
18647    %if %upcase(&EM_ACTION) = CREATE %then %do;
18648      filename temp catalog 'sashelp.emmodl.tree_create.source';
18649      %include temp;
18650      filename temp;
18651
18652      %em_tree_create;
18653    %end;
18654
18655     %else
18656     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18657
18658         filename temp catalog 'sashelp.emmodl.tree_train.source';
18659         %include temp;
18660         filename temp;
18661         %em_tree_train;
18662     %end;
18663
18664    %else
18665    %if %upcase(&EM_ACTION) = SCORE %then %do;
18666      filename temp catalog 'sashelp.emmodl.tree_score.source';
18667      %include temp;
18668      filename temp;
18669
18670      %em_tree_score;
18671
18672    %end;
18673
18674    %else
18675    %if %upcase(&EM_ACTION) = REPORT %then %do;
18676
18677         filename temp catalog 'sashelp.emmodl.tree_report.source';
18678         %include temp;
18679         filename temp;
18680
18681         %em_tree_report;
18682     %end;
18683
18684    %else
18685    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18686
18687         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18688         %include temp;
18689         filename temp;
18690         %EM_TREE_OPENTREEVIEWER;
18691
18692     %end;
18693
18694    %else
18695    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18696
18697         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18698         %include temp;
18699         filename temp;
18700         %EM_TREE_CLOSETREEVIEWER;
18701
18702     %end;
18703
18704
18705     %doendm:
18706  %mend main;
18707
18708  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18710 +%macro em_tree_makePlotDs( multipleTar= );
18712 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18713 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18714 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18715 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18717 +  /* determine if validation statistics will be displayed */
18718 +  %let validflag=N;
18719 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18720 +    /* determine if validation data exists */
18721 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18722 +      %let validflag=Y;
18723 +    %end;
18724 +  %end;
18726 +   /* retrieve name of decmeta even in presence of multiple targets */
18727 +   %let decmeta = ;
18728 +   %if &EM_DEC_DECMETA eq %then %do;
18729 +     data _Target;
18730 +       set &em_data_variableset;
18731 +       where ROLE='TARGET' and USE in('D', 'Y');
18732 +       keep NAME;
18733 +     run;
18734 +     proc sort data=_Target;
18735 +       by NAME;
18736 +     run;
18737 +     proc sort data=EM_TARGETDECINFO;
18738 +       by TARGET;
18739 +     run;
18740 +     data _Target;
18741 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18742 +       by NAME;
18743 +       if _a then do;
18744 +         call symput('decmeta', trim(DECMETA));
18745 +       end;
18746 +     run;
18747 +     proc delete data=_Target;run;
18748 +   %end;
18749 +   %else %let decmeta = &EM_DEC_DECMETA;
18752 +  /* retrieve targetEvent from decmeta */
18753 +  %let targetEvent=;
18754 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18755 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18756 +      data _null_;
18757 +       set &DECMETA(where=(_TYPE_="TARGET"));
18758 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18759 +      run;
18760 +    %end;
18761 +  %end;
18763 +  /* retrieve predicted var for targetEvent from decmeta */
18764 +  %let predTarget=;
18765 +  %let predLvl=;
18766 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18767 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18768 +      data _null_;
18769 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18770 +       call symput('predTarget', strip(VARIABLE));
18771 +       call symput('predLvl', strip(LEVEL));
18772 +      run;
18773 +    %end;
18774 +  %end;
18775 +  %else %do;
18776 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18777 +      data _null_;
18778 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18779 +       call symput('predTarget', strip(VARIABLE));
18780 +      run;
18781 +    %end;
18782 +  %end;
18784 +  /* create BelowText value */
18785 +  data belowtext;
18786 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18787 +    keep node belowtext;
18788 +  run;
18790 +  /* replace belowtext with variable label if it exists */
18791 +  data belowtext2;
18792 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18793 +    keep node belowtextlbl;
18794 +  run;
18796 +  proc sort data=belowtext; by node; run;
18797 +  proc sort data=belowtext2; by node; run;
18799 +  data belowtext;
18800 +    merge belowtext belowtext2(in=_a);
18801 +    by node;
18802 +    if _a then belowtext=belowtextlbl;
18803 +    keep node belowtext;
18804 +  run;
18806 +  /* create AboveText value */
18807 +  data abovetext;
18808 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18809 +  run;
18810 +  proc sort data=abovetext; by node numeric_value; run;
18812 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18813 +  data abovetext;
18814 +    set abovetext(rename=(node=parent));
18815 +    by parent numeric_value;
18816 +    retain abovetext tempstring flag branch origval origchar ;
18817 +    length abovetext $256;
18818 +    length tempstring origchar $64;
18820 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18821 +      if first.parent then do;
18822 +        if missing(character_value) then do;
18823 +          numeric_value = round(numeric_value, &sp_precision);
18824 +          abovetext = "< "||strip(NUMERIC_VALUE);
18825 +          branch = 1;
18826 +          origval = numeric_value;
18827 +          output;
18828 +        end;
18829 +        else do;
18830 +          abovetext = "< "||strip(CHARACTER_VALUE);
18831 +          branch = 1;
18832 +          origchar = character_value;
18833 +          output;
18834 +        end;
18836 +        if first.parent AND last.parent then do;
18837 +          if missing(character_value) then do;
18838 +            numeric_value = round(numeric_value, &sp_precision);
18839 +            branch = branch + 1;
18840 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18841 +            output;
18842 +          end;
18843 +          else do;
18844 +            branch = branch + 1;
18845 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18846 +            output;
18847 +          end;
18848 +        end;
18849 +      end;
18850 +      else if last.parent then do;
18851 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18852 +          if missing(character_value) then do;
18853 +            numeric_value = round(numeric_value, &sp_precision);
18854 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18855 +          end;
18856 +          else do;
18857 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18858 +          end;
18859 +          branch = branch + 1;
18860 +          output;
18862 +          if missing(character_value) then do;
18863 +            numeric_value = round(numeric_value, &sp_precision);
18864 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18865 +          end;
18866 +          else do;
18867 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18868 +          end;
18869 +          branch = branch + 1;
18870 +          output;
18871 +        end;
18872 +        else do;
18873 +          if missing(character_value) then do;
18874 +            numeric_value = round(numeric_value, &sp_precision);
18875 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18876 +          end;
18877 +          else do;
18878 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18879 +          end;
18880 +          branch = branch + 1;
18881 +          output;
18882 +        end;
18883 +      end;
18884 +      else do;
18885 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18886 +          if missing(character_value) then do;
18887 +            numeric_value = round(numeric_value,&sp_precision);
18888 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18889 +            origval = numeric_value;
18890 +          end;
18891 +          else do;
18892 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18893 +            origchar = character_value;
18894 +          end;
18895 +          branch = branch + 1;
18896 +          output;
18898 +        end;
18899 +        else do;
18900 +          if missing(character_value) then do;
18901 +            numeric_value = round(numeric_value, &sp_precision);
18902 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18903 +            origval = numeric_value;
18904 +          end;
18905 +          else do;
18906 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18907 +            origval = character_value;
18908 +          end;
18909 +          branch = branch + 1;
18910 +          output;
18911 +        end;
18912 +      end;
18913 +    end;
18914 +    else do;
18915 +       if first.numeric_value then do;
18916 +         flag = 0;
18917 +         abovetext = strip(CHARACTER_VALUE);
18918 +         branch = numeric_value;
18919 +         if first.numeric_value AND last.numeric_value then do;
18920 +           output;
18921 +         end;
18922 +       end;
18923 +       else if last.numeric_value then do;
18924 +         if flag=0 then do;
18925 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18926 +           length = length(strip(tempstring));
18927 +           if length < 32 then do;
18928 +             abovetext = strip(tempstring);
18929 +           end;
18930 +           else do;
18931 +             abovetext = strip(abovetext)||", ...";
18932 +             flag = 1;
18933 +           end;
18934 +         end;
18935 +         branch = numeric_value;
18936 +         output;
18937 +       end;
18938 +       else do;
18939 +         if flag=0 then do;
18940 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18941 +           length = length(strip(tempstring));
18942 +           if length < 32 then do;
18943 +             abovetext = strip(tempstring);
18944 +           end;
18945 +           else do;
18946 +             abovetext = strip(abovetext)||", ...";
18947 +             flag=1;
18948 +           end;
18949 +         end;
18950 +         branch = numeric_value;
18951 +       end;
18952 +    end;
18953 +    keep parent branch abovetext;
18954 +  run;
18956 +  /* Missing value to abovetext */
18957 +  data tempmissing;
18958 +    set &EM_USER_OUTRULES;
18959 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18960 +    rename node=parent numeric_value=branch character_value=misschar;
18961 +  run;
18964 +  proc sort data=abovetext; by parent branch; run;
18965 +  proc sort data=tempmissing; by parent branch; run;
18966 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18968 +  data tempoutnodes;
18969 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18970 +    by parent branch;
18971 +    length traintotal validtotal 8;
18972 +    retain traintotal validtotal;
18974 +    if _a then do;
18975 +      if ^MISSING(abovetext) then do;
18976 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18977 +      end;
18978 +      else do;
18979 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18980 +      end;
18981 +    end;
18982 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18984 +    if node=1 then do;
18985 +      traintotal = N;
18986 +      validtotal=VN;
18987 +    end;
18989 +    drop role rank stat misschar belowtext;
18990 +  run;
18991 +  proc sort data=tempoutnodes; by node; run;
18992 +  proc sort data=belowtext; by node; run;
18994 +  data tempoutnodes;
18995 +    merge tempoutnodes belowtext;
18996 +    by node;
18998 +  run;
19000 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19001 +  %let adjusted = N;
19002 +  %let npriors = 0;
19003 +  data _null_ ;
19004 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19005 +    if eof then do ;
19006 +      call symput("npriors" , strip(put(_N_,best.))) ;
19007 +    end;
19008 +  run;
19009 +  %if &npriors gt 0 %then %let adjusted=Y;
19012 +  /* create a table with targetUsed and targetLevel columns for each node */
19013 +  data temptarmeta;
19014 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19015 +    %if &multipleTar eq N %then %do;
19016 +      AND USE in ('D', 'Y')
19017 +    %end;
19018 +    ));
19019 +    length TARGET $32;
19020 +    Target=name;
19021 +    keep target level;
19022 +  run;
19024 +  %if &multipleTar eq Y %then %do;
19025 +    data temptargetused;
19026 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19027 +      keep node target;
19028 +    run;
19029 +    proc sort data=temptargetused; by target; run;
19030 +    proc sort data=temptarmeta; by target; run;
19031 +    data temptargetused;
19032 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19033 +      by target;
19034 +      if _a and _b;
19035 +    run;
19036 +  %end;
19037 +  %else %do;
19038 +    data temptargetused;
19039 +      set &EM_USER_OUTSTATS;
19040 +      length target $32 tarlevel $10;
19041 +      target="%EM_TARGET";
19042 +      tarlevel="%EM_TARGET_LEVEL";
19043 +      keep node target tarlevel;
19044 +    run;
19045 +    proc sort data=temptargetused nodupkey; by node; run;
19046 +  %end;
19048 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19049 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19050 +  proc sort data=temptargetused; by node; run;
19053 +  /* create tables for all interval targets as well as all class targets */
19054 +  data tempinterval tempclass;
19055 +    merge tempoutstats temptargetused( rename=(target=targetused));
19056 +    by node;
19057 +    %if "&multipleTar" eq "Y" %then %do;
19058 +      if ((missing(Target)) OR (target=targetused ));
19059 +    %end;
19061 +    if tarlevel="INTERVAL" then output tempinterval;
19062 +    else output tempclass;
19063 +  run;
19065 +  /* initialize intTarget and classTarget flags */
19066 +  %let em_intNobs =0;
19067 +  %let em_classNobs = 0;
19068 +  %let em_intTarget= N;
19069 +  %let em_classTarget= N;
19071 +  proc sql;
19072 +    reset noprint;
19073 +    select count(*) into :em_intNobs from tempinterval;
19074 +  quit;
19075 +  proc sql;
19076 +    reset noprint;
19077 +    select count(*) into :em_classNobs from tempclass;
19078 +  quit;
19080 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19081 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19083 +  /* retrieve all information for interval targets */
19084 +  %if &em_intTarget eq Y %then %do;
19086 +    /* determine if leaf variable exists */
19087 +    %let dsid=%sysfunc(open(tempinterval,i));
19088 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19089 +    %let rc=%sysfunc(close(&dsid));
19091 +    proc transpose data=tempinterval
19092 +      %if &leafexists %then %do;
19093 +        (drop=leaf)
19094 +      %end;
19095 +      %if &validexist %then %do;
19096 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19097 +      %end;
19098 +      %else %do;
19099 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19100 +      %end;
19101 +      by node;
19102 +      id statname;
19103 +    run;
19104 +    data tempinterval;
19105 +      set tempinterval;
19106 +      if missing(N) then delete;
19107 +    run;
19108 +  %end;
19110 +  /* retrieve all information for class targets */
19111 +  %if &em_classTarget eq Y %then %do;
19112 +    proc sort data=tempclass; by node category; run;
19113 +    %if &validflag eq N %then %do;
19114 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19115 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19116 +    %end;
19117 +    %else %do;
19118 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19119 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19120 +    %end;
19121 +      set tempclass;
19123 +      %if &validflag eq N %then %do;
19124 +        %if "&adjusted" eq "N" %then %do;
19125 +          if statname="N" then output tempn;
19126 +        %end;
19127 +        %else %do;
19128 +          if statname="NPRIORS" then output tempn;
19129 +        %end;
19130 +        else if statname="PREDICTION" then output temppredict;
19131 +        else if statname="PROBABILITY" then output tempprob;
19132 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19133 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19134 +      %end;
19135 +      %else %do;
19136 +        %if "&adjusted" eq "N" %then %do;
19137 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19138 +        %end;
19139 +        %else %do;
19140 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19141 +        %end;
19142 +        else if statname="PREDICTION" then output temppredict;
19143 +        else if statname="PROBABILITY" then output tempprob;
19144 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19145 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19146 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19147 +      %end;
19148 +    run;
19151 +    /* determine if profit/loss exists in tempprofit */
19152 +    %let em_profitflag=0;
19153 +    %let em_lossflag=0;
19154 +    proc sql;
19155 +      reset noprint;
19156 +      select count(*) into :em_profitflag from tempprofit;
19157 +    quit;
19158 +    proc sql;
19159 +      reset noprint;
19160 +      select count(*) into :em_lossflag from temploss;
19161 +    quit;
19163 +    %if &validFlag eq Y %then %do;
19164 +      proc transpose data=tempn
19165 +        %if "&adjusted" eq "N" %then %do;
19166 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19167 +        %end;
19168 +        %else %do;
19169 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19170 +        %end;
19171 +        by node;
19172 +        id statname;
19173 +      run;
19174 +      %if &em_profitflag ne 0 %then %do;
19175 +        proc transpose data=tempprofit out=tempprofit;
19176 +          by node category;
19177 +          id statname ;
19178 +        run;
19179 +      %end;
19180 +      %if &em_lossflag ne 0 %then %do;
19181 +        proc transpose data=temploss out=temploss;
19182 +          by node category;
19183 +          id statname ;
19184 +        run;
19185 +      %end;
19186 +      data tempprob;
19187 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19188 +        by node
19189 +        %if &multipleTar eq Y %then %do;
19190 +          target
19191 +        %end;
19192 +        category;
19193 +      run;
19194 +    %end;
19196 +    /* store percentcorrect value */
19197 +    data temppredict;
19198 +      merge tempprob temppredict(in=_a);
19199 +      by node category;
19200 +      if _a then do;
19201 +        percentCorrect = statvalue;
19202 +        %if &validFlag eq Y %then %do;
19203 +          vpercentCorrect= vstatvalue;
19204 +        %end;
19205 +      end;
19206 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19207 +      %if &validFlag eq Y %then %do;
19208 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19209 +      %end;
19210 +      ;
19211 +      if missing(percentCorrect) then delete;
19212 +      drop target;
19213 +    run;
19215 +    /* build profittext */
19216 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19217 +      data tempprofittext(keep= node profittext profitloss);
19218 +        length profittext $800 profitloss 8.;
19219 +        retain profittext profitloss;
19221 +        merge tempprob
19222 +        %if &em_profitflag ne 0 %then %do;
19223 +          tempprofit
19224 +        %end;
19225 +        %else %if &em_lossflag ne 0 %then %do;
19226 +          temploss
19227 +        %end;
19228 +        ;
19229 +        by node category;
19231 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19232 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19233 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19234 +          %let profittype = ALL;
19235 +        %end;
19237 +        /* create the profitloss variable for nodecolor if selected */
19238 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19240 +        %if "&profittype" eq "ALL" %then %do;
19241 +          if strip(CATEGORY)="&targetEvent" then do;
19242 +            profitloss=statvalue;
19243 +          end;
19244 +          if first.node then do;
19245 +            %if &validFlag eq N %then %do;
19246 +             %if &em_profitflag ne 0 %then %do;
19247 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19248 +             %end;
19249 +             %if &em_lossflag ne 0 %then %do;
19250 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19251 +             %end;
19252 +            %end;
19253 +            %else %do;
19254 +             %if &em_profitflag ne 0 %then %do;
19255 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19255!+;
19256 +             %end;
19257 +             %if &em_lossflag ne 0 %then %do;
19258 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19259 +             %end;
19260 +            %end;
19261 +          end;
19262 +          else if last.node then do;
19263 +            %if &validFlag eq N %then %do;
19264 +             %if &em_profitflag ne 0 %then %do;
19265 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19266 +             %end;
19267 +             %if &em_lossflag ne 0 %then %do;
19268 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19269 +             %end;
19270 +             /*if CATEGORY="&targetEvent" then do;
19271 +               profitloss=statvalue;
19272 +             end;*/
19273 +            %end;
19274 +            %else %do;
19275 +             %if &em_profitflag ne 0 %then %do;
19276 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19276!+14.&EM_PROPERTY_SPLITPRECISION);
19277 +                if CATEGORY="&targetEvent" then do;
19278 +                 profitloss=ALTERNATIVE_PROFIT;
19279 +                end;
19280 +             %end;
19281 +             %if &em_lossflag ne 0 %then %do;
19282 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19282!+14.&EM_PROPERTY_SPLITPRECISION);
19283 +                if CATEGORY="&targetEvent" then do;
19284 +                  profitloss=ALTERNATIVE_LOSS;
19285 +                end;
19286 +             %end;
19287 +            %end;
19288 +            output;
19289 +          end;
19290 +          else do;
19291 +            %if &validFlag eq N %then %do;
19292 +             %if &em_profitflag ne 0 %then %do;
19293 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19294 +             %end;
19295 +             %if &em_lossflag ne 0 %then %do;
19296 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19297 +             %end;
19298 +            %end;
19299 +            %else %do;
19300 +             %if &em_profitflag ne 0 %then %do;
19301 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19301!+14.&EM_PROPERTY_SPLITPRECISION);
19302 +             %end;
19303 +             %if &em_lossflag ne 0 %then %do;
19304 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19304!+14.&EM_PROPERTY_SPLITPRECISION);
19305 +             %end;
19306 +            %end;
19307 +          end;
19308 +        %end;
19309 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19310 +          if strip(CATEGORY) = "&targetevent" then do;
19311 +            %if &validFlag eq N %then %do;
19312 +             %if &em_profitflag ne 0 %then %do;
19313 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19314 +             %end;
19315 +             %if &em_lossflag ne 0 %then %do;
19316 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19317 +             %end;
19318 +             profitloss=statvalue;
19319 +            %end;
19320 +            %else %do;
19321 +             %if &em_profitflag ne 0 %then %do;
19322 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19322!+;
19323 +                profitloss=ALTERNATIVE_PROFIT;
19324 +             %end;
19325 +             %if &em_lossflag ne 0 %then %do;
19326 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19327 +                profitloss=ALTERNATIVE_LOSS;
19328 +             %end;
19329 +            %end;
19330 +            output;
19331 +          end;
19332 +        %end;
19333 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19334 +          if strip(CATEGORY) = "&targetevent" then do;
19335 +            %if &validFlag eq N %then %do;
19336 +             profitloss=statvalue;
19337 +            %end;
19338 +            %else %do;
19339 +             %if &em_profitflag ne 0 %then %do;
19340 +                profitloss=ALTERNATIVE_PROFIT;
19341 +             %end;
19342 +             %if &em_lossflag ne 0 %then %do;
19343 +                profitloss=ALTERNATIVE_LOSS;
19344 +             %end;
19345 +            %end;
19346 +            output;
19347 +          end;
19348 +        %end;
19349 +      run;
19350 +    %end;
19352 +    data tempprob(keep= node probtext);
19353 +      length probtext $800;
19354 +      retain probtext;
19355 +      set tempprob ;
19356 +      by node;
19358 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19359 +      %let probtype = &EM_PROPERTY_TARGET;
19360 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19361 +        %let probtype = ALL;
19362 +      %end;
19364 +      %if "&probtype" eq "ALL" %then %do;
19365 +        if first.node then do;
19366 +          %if &validFlag eq N %then %do;
19367 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19368 +          %end;
19369 +          %else %do;
19370 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19371 +          %end;
19372 +        end;
19373 +        else if last.node then do;
19374 +          %if &validFlag eq N %then %do;
19375 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19376 +          %end;
19377 +          %else %do;
19378 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19379 +          %end;
19380 +          output;
19381 +        end;
19382 +        else do;
19383 +          %if &validFlag eq N %then %do;
19384 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19385 +          %end;
19386 +          %else %do;
19387 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19388 +          %end;
19389 +        end;
19390 +      %end;
19391 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19392 +        if strip(CATEGORY) = "&targetevent" then do;
19393 +          %if &validFlag eq N %then %do;
19394 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19395 +          %end;
19396 +          %else %do;
19397 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19398 +          %end;
19399 +          output;
19400 +        end;
19401 +      %end;
19402 +      %else %if "&probtype" eq "NONE" %then %do;
19403 +        if last.node then do;
19404 +          output;
19405 +        end;
19406 +      %end;
19407 +    run;
19408 +  %end;
19410 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19412 +  %let oldexists=0;
19413 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19414 +     data old_tree_plot;
19415 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19416 +        rename nodecolor=oldnodecolor;
19417 +     run;
19419 +     proc sort data=old_tree_plot;
19420 +        by node;
19421 +     run;
19423 +     %let oldexists=1;
19424 +  %end;
19426 +  data &EM_USER_TREE_PLOT;
19427 +    length textall $800;
19428 +    merge tempoutnodes temptargetused
19430 +    %if &em_intTarget eq Y %then %do;
19431 +      tempinterval
19432 +    %end;
19434 +    %if &em_classTarget eq Y %then %do;
19436 +      %if &validFlag eq N %then %do;
19437 +        tempn(rename=(statvalue=N))
19438 +      %end;
19439 +      %else %do;
19440 +        tempn
19441 +      %end;
19443 +      temppredict tempprob
19445 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19446 +        tempprofittext
19447 +      %end;
19448 +    %end;
19449 +    ;
19450 +    by node;
19452 +    /* build nodetext based on user selection */
19453 +    textall="";
19455 +    %if &em_intTarget eq Y %then %do;
19456 +    if tarlevel="INTERVAL" then do;
19457 +      /* Nodeid */
19458 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19459 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19460 +      %end;
19462 +      /* Target identifier if multiple targets are used */
19463 +      %if "&multipleTar" eq "Y" %then %do;
19464 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19465 +      %end;
19467 +      %if &validFlag eq Y %then %do;
19468 +         /* Column labels displayed in validflag eq Y only */
19469 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19470 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19470!+noquote ))";
19471 +         %end;
19473 +         /* Average values */
19474 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19475 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19476 +         %end;
19478 +         /* RASE */
19479 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19480 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19481 +         %end;
19483 +         /* Count */
19484 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19485 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19486 +         %end;
19487 +      %end;
19488 +      %else %do;
19489 +         /* Average values */
19490 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19491 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19492 +         %end;
19494 +         /* RASE */
19495 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19496 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19497 +         %end;
19499 +         /* Count */
19500 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19501 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19502 +         %end;
19503 +      %end;
19505 +      /* nodecolor */
19506 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19507 +        nodecolor=PREDICTION;
19508 +      %end;
19509 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19510 +        nodecolor=RASE;
19511 +      %end;
19512 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19513 +        nodecolor=1;
19514 +      %end;
19516 +    end;
19517 +    %end;
19518 +    %if &em_classTarget eq Y %then %do;
19519 +    if tarlevel^="INTERVAL" then  do;
19521 +      /* Nodeid */
19522 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19523 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19524 +      %end;
19525 +      /* Target identifier if multiple targets are used */
19526 +      %if "&multipleTar" eq "Y" %then %do;
19527 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19528 +      %end;
19530 +      /* Predicted values */
19531 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19532 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19533 +      %end;
19535 +      /* Column labels displayed in validflag eq Y only */
19536 +      %if "&ValidFlag" eq "Y" %then %do;
19537 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19538 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19538!+noquote ))";
19539 +        %end;
19540 +      %end;
19542 +      /* Target Values */
19543 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19544 +        textall=strip(textall)||"0A"x||strip(probtext);
19545 +      %end;
19547 +      /* include profit or loss for all target levels */
19548 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19549 +        textall=strip(textall)||"0A"x||strip(profittext);
19550 +      %end;
19552 +      %if &validFlag eq N %then %do;
19553 +        /* Percent Correct */
19554 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19555 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19556 +        %end;
19558 +         /* Count */
19559 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19560 +          %if "&adjusted" eq "N" %then %do;
19561 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19562 +          %end;
19563 +          %else %do;
19564 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19565 +          %end;
19566 +         %end;
19567 +      %end;
19568 +      %else %do;
19569 +        /* Percent Correct */
19570 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19571 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19572 +        %end;
19574 +         /* Count */
19575 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19576 +          %if "&adjusted" eq "N" %then %do;
19577 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19578 +          %end;
19579 +          %else %do;
19580 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19581 +          %end;
19582 +         %end;
19583 +      %end;
19585 +      /* nodecolor */
19586 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19587 +       %if &multipleTar ne Y %then %do;
19588 +        nodecolor=&predTarget;
19589 +       %end;
19590 +       %else %do;
19591 +         nodecolor=percentcorrect;
19592 +       %end;
19593 +      %end;
19594 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19595 +        nodecolor=percentcorrect;
19596 +      %end;
19597 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19598 +        nodecolor=1;
19599 +      %end;
19600 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19601 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19602 +          nodecolor=percentcorrect;
19603 +        %end;
19604 +        %else %do;
19605 +          nodecolor=profitloss;
19606 +        %end;
19607 +      %end;
19609 +    end;
19610 +    %end;
19611 +    %if &em_intTarget eq Y %then %do;
19612 +     drop  PREDICTION  TARGET TARLEVEL
19613 +     %if &ValidFlag eq Y %then %do;
19614 +         VPREDICTION
19615 +     %end;
19616 +     ;
19617 +    %end;
19618 +    %if &em_classTarget eq Y %then %do;
19619 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19620 +     %if &ValidFlag eq Y %then %do;
19621 +         VSTATVALUE
19622 +     %end;
19623 +     ;
19624 +    %end;
19626 +  run;
19628 +  /* add leaf index information to plotds - based on primary target only*/
19629 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19630 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19631 +      set &EM_USER_OUTSTATS;
19632 +      if ((statname="PROBABILITY"
19633 +      %if &validexist %then %do;
19634 +       or statname="VALID: PROBABILITY"
19635 +      %end;
19636 +      ) AND (CATEGORY="&TARGETEVENT")
19637 +      %if "&multipleTar" eq "Y" %then %do;
19638 +        AND (Target="%EM_TARGET")
19639 +      %end;
19640 +      );
19641 +    run;
19643 +    %if &validexist %then %do;
19644 +      proc sort data=tempprob; by node; run;
19645 +      %let vpredTarget = V%substr(&predTarget, 2);
19646 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19647 +         by node;
19648 +         id statname;
19649 +      run;
19650 +    %end;
19651 +  %end;
19652 +  %else %do;
19653 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19654 +      set &EM_USER_OUTSTATS;
19655 +      if ((statname="PREDICTION"
19656 +      %if &validexist %then %do;
19657 +       or statname="VALID: PREDICTION"
19658 +      %end;
19659 +      )
19660 +      %if "&multipleTar" eq "Y" %then %do;
19661 +        AND (Target="%EM_TARGET")
19662 +      %end;
19663 +      );
19664 +    run;
19665 +    %if &validexist %then %do;
19666 +      proc sort data=tempprob; by node; run;
19667 +      %let vpredTarget = V%substr(&predTarget, 2);
19668 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19669 +         by node;
19670 +         id statname;
19671 +      run;
19672 +    %end;
19673 +  %end;
19675 +  proc sort data=tempprob; by node; run;
19676 +  data tempoutnodes;
19677 +    merge tempoutnodes tempprob;
19678 +    by node;
19679 +  run;
19681 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19682 +  data tempnodes;
19683 +    retain traintotal validtotal;
19684 +    set tempnodes(where=(leaf ne . ));
19685 +    tprob=round(&predTarget, .01);
19686 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19687 +      percevent_train=round(tprob*100, .01);
19688 +    %end;
19689 +    %else %do;
19690 +      percevent_train=tprob;
19691 +    %end;
19693 +    perc_train=round((n/traintotal)*100, 0.01);
19694 +    /* leafwidth already has a *10 multiplier */
19695 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19697 +    %if &validexist %then %do;
19698 +      %let vpredTarget = V%substr(&predTarget,2);
19699 +      vprob=round(&vpredTarget, .01);
19700 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19701 +        percevent_valid=round(vprob*100, .01);
19702 +      %end;
19703 +      %else %do;
19704 +        percevent_valid=vprob;
19705 +      %end;
19706 +      perc_valid=round((vn/validtotal)*100, .01);
19707 +    %end;
19709 +    index=_N_;
19710 +    keep node index tprob perc_train percevent_train
19711 +    %if &validexist %then %do;
19712 +        vprob percevent_valid perc_valid
19713 +    %end;
19714 +    ;
19715 +  run;
19716 +  proc sort data=tempnodes; by node; run;
19717 +  data &EM_USER_TREE_PLOT;
19718 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19719 +    by node;
19720 +    if missing(node) then delete;
19721 +    %if &oldexists %then %do;
19722 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19723 +      drop oldnodecolor;
19724 +    %end;
19725 +    abovetext = compbl(abovetext);
19727 +    /* add variable labels */
19728 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19729 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19730 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19731 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19732 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19733 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19735 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19736 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19737 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19738 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19739 +          %end;
19740 +          %else %do;
19741 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19742 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19743 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19744 +          %end;
19745 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19747 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19748 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19749 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19750 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19751 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19752 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19753 +          %end;
19754 +          %else %do;
19755 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19756 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19757 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19758 +          %end;
19759 +    ;
19760 +  run;
19762 +  /* delete temporary tables */
19763 +  proc datasets lib=work nolist;
19764 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19765 +  run;
19767 +%mend em_tree_makePlotDs;
19771 +%macro em_tree_report;
19773 +   /* report properties */
19774 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19775 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19776 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19777 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19778 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19779 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19780 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19781 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19782 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19783 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19784 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19785 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19786 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19788 +   %let validexist=0;
19789 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19790 +     %let validexist=1;
19791 +   %end;
19793 +   /* determine if multiple targets will be processed */
19794 +   %let em_tree_multipleTargets=N;
19795 +   %let em_tree_numTarget=1;
19796 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19797 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19798 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19799 +         %let em_tree_multipleTargets=N;
19800 +      %end;
19801 +      %else %do;
19802 +        data _null_;
19803 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19804 +          if eof then
19805 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19806 +        run;
19808 +        %if &em_tree_numTarget gt 1 %then %do;
19809 +           %let em_tree_multipleTargets=Y;
19810 +        %end;
19811 +     %end;
19812 +   %end;
19814 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19816 +   /* variable importance */
19817 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19818 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19820 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19821 +     /* and the columns may not be generated                                                                                 */
19822 +     %let em_tree_cvexists=;
19823 +     %let em_tree_surrexists=.;
19824 +     data _null_;
19825 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19826 +       if eof then do ;
19827 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19828 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19829 +       end;
19830 +     run;
19832 +     data &EM_USER_OUTIMPORT;
19833 +         set &EM_USER_OUTIMPORT;
19834 +         /* format columns based on Precison value specified */
19835 +         format importance 15.&EM_PROPERTY_PRECISION
19836 +              %if &validexist %then %do;
19837 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19838 +              %end;
19839 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19840 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19841 +              %end;
19842 +         ;
19843 +     run;
19845 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19846 +     proc print data=&EM_USER_OUTIMPORT
19847 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19848 +          (where=((nrules>0) OR (nsurrogates>0)))
19849 +        %end;
19850 +        %else %do;
19851 +           (where=(nrules>0))
19852 +        %end;
19853 +        label noobs
19854 +        ;
19855 +     run;
19856 +     title10;
19858 +   %end;
19860 +   /* Sequence */
19861 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19862 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19863 +   data _null_ ;
19864 +      set &EM_USER_outseq (obs=2) end=eof ;
19865 +      if eof then do ;
19866 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19867 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19868 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19869 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19870 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19871 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19872 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19873 +      end;
19874 +    run;
19876 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19877 +      data &EM_USER_OUTSEQ;
19878 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19879 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19880 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19881 +           _XMISC_=_VMISC_
19882 +        %end;
19883 +        %if "&em_tree_aprof" ne "."  %then %do;
19884 +           _XAPROF_=_VAPROF_
19885 +           _XPROF_ = _VPROF_
19886 +        %end;
19887 +        %if "&em_tree_aloss" ne "."  %then %do;
19888 +           _XALOSS_=_VALOSS_
19889 +        %end;
19890 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19891 +           _XPASE_ = _VPASE_
19892 +           _XPMISC_ = _VPMISC_
19893 +        %end;
19895 +        ));
19896 +     %end;
19897 +     %else %do;
19898 +        set &EM_USER_OUTSEQ;
19899 +     %end;
19901 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19902 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19903 +            _MISC_   15.&EM_PROPERTY_PRECISION
19904 +         %end;
19905 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19906 +            _PASE_  15.&EM_PROPERTY_PRECISION
19907 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19908 +         %end;
19909 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19910 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19911 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19912 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19913 +            %end;
19914 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19915 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19916 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19917 +            %end;
19918 +         %end;
19919 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19920 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19921 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19922 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19923 +            %end;
19924 +         %end;
19925 +         %if "&em_tree_seq" ne "." %then %do;
19926 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19927 +         %end;
19928 +         %if "&em_tree_vseq" ne "." %then %do;
19929 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19930 +         %end;
19931 +         %if "&em_tree_aprof" ne "." %then %do;
19932 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19933 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19934 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19935 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19936 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19937 +           %end;
19938 +         %end;
19939 +         %else %if "&em_tree_aloss" ne "." %then %do;
19940 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19941 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19942 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19943 +           %end;
19944 +         %end;
19945 +      ;
19946 +    run;
19947 +   %end;
19949 +   /* Observation Based Importance */
19950 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19952 +      /* need to check for 0 obs */
19953 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19954 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19955 +      %let rc=%sysfunc(close(&dsid));
19957 +      %if &onobs %then %do;
19958 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19959 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19961 +         data &EM_USER_OUTOBSIMP;
19962 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19963 +           if _a;
19964 +           by _INPUT1_;
19965 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19966 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19967 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19968 +                   %end;
19969 +                   ;
19970 +         run;
19971 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19972 +      %end;
19973 +   %end;
19975 +  %end;
19977 +  /* create dataset to support tree diagram and icicle plot */
19978 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19979 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19981 +  /* display tree diagram */
19982 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19983 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19985 +  /* display icicle diagram */
19986 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19987 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19989 +  /* Leaf Statistics Plot */
19990 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19992 +  /* print leaf information to output window */
19993 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19995 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19996 +       by descending N;
19997 +     run;
19999 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20000 +     %local vn;
20001 +     data _null_;
20002 +       set t (obs=2) end=eof;
20003 +       if eof then do;
20004 +         call symput("vn", strip(put(vn, best.)));
20005 +       end;
20006 +     run;
20008 +     data t;
20009 +       set t;
20010 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20011 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20012 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20013 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20014 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20015 +       %end;
20016 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20017 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20018 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20019 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20020 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20021 +          %end;
20022 +       %end;
20023 +       ;
20024 +     run;
20026 +     /* determine if rase is found in t */
20027 +    %let dsid=%sysfunc(open(t,i));
20028 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20029 +    %let rc=%sysfunc(close(&dsid));
20031 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20032 +     proc print data=t noobs label;
20033 +       where tprob ne .;
20034 +       var node depth N tprob
20035 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20036 +         %if "&vn" ne "." %then %do;
20037 +           VN
20038 +         %end;
20039 +         vprob
20040 +       %end;
20041 +       %if &raseexists %then %do;
20042 +            RASE
20043 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20044 +              VRASE
20045 +            %end;
20046 +       %end;
20047 +       ;
20048 +     run;
20049 +     title10;
20050 +  %end;
20052 +  /* create plots that are done during training of node */
20053 +  /* display iterative plot, including reference line */
20054 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20055 +   /* %if &nleaves eq  %then %do; */
20056 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20057 +      data _null_;
20058 +        set &EM_USER_OUTTOPOLOGY end=eof;
20059 +        if eof then do;
20060 +          call symput('nleaves', LEAF);
20061 +        end;
20062 +      run;
20063 +   /* %end; */
20065 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20066 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20067 +  %end;
20069 +  /* display leaf statistics */
20070 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20072 +  /* stats by node if multiple targets = Y */
20073 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20074 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20075 +    data &EM_USER_OUTSTATS;
20076 +      set &EM_USER_OUTSTATS;
20078 +     * if STATNAME="TARGET" then delete;
20079 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20080 +      drop leaf;
20081 +    run;
20082 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20084 +  %end;
20085 +  %else %do;
20086 +    /* add outstats and outdescribe to spk but not results */
20087 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20088 +  %end;
20090 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS4.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set EMWS4.TREE_OUTSEQ.
NOTE: The data set EMWS4.TREE_OUTSEQ has 29 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 16 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 16 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 16 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 21 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 293 observations read from the data set EMWS4.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS4.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 161 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 138 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 161 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 161 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 161 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 161 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 23 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 46 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 46 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 23 observations read from the data set WORK.TEMPN.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS4.TREE_TREE_PLOT has 23 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 161 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 23 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS4.TREE_TREE_PLOT.
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS4.TREE_TREE_PLOT has 23 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS4.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 23 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 23 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 23 observations read from the data set EMWS4.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
20091
20092  *------------------------------------------------------------*;
20093  * End REPORT: Tree;
20094  *------------------------------------------------------------*;
 
20095  /* Reset EM Options */
20096  options formchar="|----|+|---+=|-/\<>*";
20097  options nocenter ls=256 ps=10000;
20098  goptions reset=all device=GIF NODISPLAY;
 
20099  proc sort data=WORK.EM_USER_REPORT;
20100  by ID VIEW;
20101  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20102  proc sort data=EMWS4.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20103  by NAME;
20104  run;
 
NOTE: There were 14 observations read from the data set EMWS4.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20105  proc sort data=EMWS4.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20106  by NAME;
20107  run;
 
NOTE: There were 14 observations read from the data set EMWS4.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20108  data WORK.ASSESS_META;
20109  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20110  by NAME;
20111  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20112  data EM_temp_assessMeta;
20113  set EMWS4.Tree_CMeta_TRAIN;
20114  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20115  run;
 
NOTE: There were 12 observations read from the data set EMWS4.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
20116  data EM_temp_assessdata;
20117  set EMWS4.Tree_TRAIN(keep=
20118  F_TargetBuy
20119  I_TargetBuy
20120  P_TargetBuy0
20121  P_TargetBuy1
20122  Q_TargetBuy0
20123  Q_TargetBuy1
20124  R_TargetBuy0
20125  R_TargetBuy1
20126  U_TargetBuy
20127  V_TargetBuy0
20128  V_TargetBuy1
20129  _WARN_
20130  TargetBuy
20131  );
20132  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS4.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 11112 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24414   data EM_temp_assessMeta;
24415   set EMWS4.Tree_CMeta_TRAIN;
24416   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24417   run;
 
NOTE: There were 12 observations read from the data set EMWS4.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24418   data EM_temp_assessdata;
24419   set EMWS4.Tree_VALIDATE(keep=
24420   F_TargetBuy
24421   I_TargetBuy
24422   P_TargetBuy0
24423   P_TargetBuy1
24424   Q_TargetBuy0
24425   Q_TargetBuy1
24426   R_TargetBuy0
24427   R_TargetBuy1
24428   U_TargetBuy
24429   V_TargetBuy0
24430   V_TargetBuy1
24431   _WARN_
24432   TargetBuy
24433   );
24434   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 5983 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 5983 observations read from the data set EMWS4.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 5983 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28725   %let _cn = %sysfunc(getoption(CENTER));
28726   options nocenter;
28727   proc print data=EMWS4.Tree_EMREPORTFIT noobs label;
28728   var STAT LABEL TRAIN
28729   VALIDATE
28730   TEST
28731   ;
28732   by TARGET TARGETLABEL;
28733   title9 ' ';
28734   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28735   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28736   title10;
28737   options &_cn;
 
28738   proc sort data=EMWS4.Tree_EMCLASSIFICATION nothreads;
28739   by DATAROLE TARGET TARGETLABEL;
28740   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS4.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.18 seconds
      cpu time            0.00 seconds
 
 
28741   %let _cn = %sysfunc(getoption(CENTER));
28742   options nocenter;
28743   proc print data=EMWS4.Tree_EMCLASSIFICATION noobs label;
28744   var from into pct_row pct_col count percent
28745   ;
28746   by DATAROLE TARGET TARGETLABEL;
28747   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28748   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28749   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28750   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28751   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28752   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28753   where _TYPE_='PREDICTION';
28754   title9 ' ';
28755   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28756   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28757   title9;
28758   title10;
28759   options &_cn;
 
28760   %let _cn = %sysfunc(getoption(CENTER));
28761   options nocenter;
28762   data EMWS4.Tree_EMEVENTREPORT;
28763   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
28764   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28764 ! FALSEEVENT
28765   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28766      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28767   FALSEEVENT=0;
28768   FALSENEVENT=0;
28769   TRUEEVENT=0;
28770   TRUENEVENT=0;
28771   set EMWS4.Tree_EMEVENTREPORT;
28772   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE_EMEVENTREPORT.
NOTE: The data set EMWS4.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.01 seconds
 
 
28773   proc print data=EMWS4.Tree_EMEVENTREPORT noobs label;
28774   title9 ' ';
28775   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28776   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28777   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28778   title10;
28779   options &_cn;
 
28780   proc datasets library=EMWS4 nolist;
28781   modify Tree_EMRANK;
28782   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28783   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28784   run;
 
NOTE: MODIFY was successful for EMWS4.TREE_EMRANK.DATA.
28785   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
28786   %let _cn = %sysfunc(getoption(CENTER));
28787   options nocenter;
28788   proc print data=EMWS4.Tree_EMRANK label noobs;
28789   var
28790   decile gain lift liftc resp respc N _meanP_;
28791   by
28792   notsorted DATAROLE
28793   notsorted TARGET
28794   notsorted TARGETLABEL
28795   ;
28796   title9 ' ';
28797   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28798   run;
 
NOTE: There were 40 observations read from the data set EMWS4.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28799   title10;
28800   options &_cn;
 
28801   proc datasets library=EMWS4 nolist;
28802   modify Tree_EMSCOREDIST;
28803   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28804   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28805   run;
 
NOTE: MODIFY was successful for EMWS4.TREE_EMSCOREDIST.DATA.
28806   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
