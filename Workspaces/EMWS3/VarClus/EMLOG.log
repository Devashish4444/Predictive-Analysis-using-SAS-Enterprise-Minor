*------------------------------------------------------------*
User:                skokse_uncc
Date:                April 25, 2020
Time:                11:48:31
Site:                70117250
Platform:            X64_DSRV16
Maintenance Release: 9.04.01M5P091317
EM Version:          14.3
* 
*------------------------------------------------------------*
* Training Log
Date:                April 25, 2020
Time:                11:48:13
*------------------------------------------------------------*
15207  proc freq data=EMWS3.VarClus_VariableSet noprint;
15208  table ROLE*LEVEL/out=WORK.VarClusMETA;
15209  run;
 
NOTE: There were 99 observations read from the data set EMWS3.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15210  proc print data=WORK.VarClusMETA label noobs;
15211  var ROLE LEVEL COUNT;
15212  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15213  title9 ' ';
15214  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15215  run;
 
NOTE: There were 7 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
15216  title10;
 
15217  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15611  *------------------------------------------------------------*;
15612  * VarClus: Generation of macros and macro variables;
15613  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15614  *------------------------------------------------------------*;
 
15615  %let EMEXCEPTIONSTRING=;
15616  *------------------------------------------------------------*;
15617  * TRAIN: VarClus;
15618  *------------------------------------------------------------*;
15619  %let EM_ACTION = TRAIN;
15620  %let syscc = 0;
15621
15622  %macro main;
15623
15624     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15625     %include temp;
15626     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15627     %include temp;
15628     filename temp;
15629
15630    %SetProperties;
15631
15632     %if %upcase(&EM_ACTION) = CREATE %then %do;
15633         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15634         %include temp;
15635         filename temp;
15636         %create;
15637     %end;
15638     %else
15639     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15640          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15641             %include temp;
15642             filename temp;
15643             %train;
15644     %end;
15645     %else
15646     %if %upcase(&EM_ACTION) = SCORE %then %do;
15647             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15648             %include temp;
15649             filename temp;
15650             %score;
15651     %end;
15652     %else
15653     %if %upcase(&EM_ACTION) = REPORT %then %do;
15654             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15655             %include temp;
15656             filename temp;
15657             %report;
15658     %end;
15659     /*
15660     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15661         %put 'OPENING TABLE';
15662     %end;
15663     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15664         %put 'CLOSE TABLE';
15665     %end;
15666     */
15667  %mend main;
15668  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15669 +
15670 +/* Initialize property macro variables */
15671 +%macro SetProperties;
15672 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15673 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15675 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15676 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15677 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15679 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15680 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15681 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15682 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15683 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15684 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15685 +
15686 +%mend SetProperties;
15687 +
15688 +%Macro MakeDummyVariables(indata=,
15689 +                          outvar=,
15690 +                          outdata=,
15691 +                          fileref=,
15692 +                          recreatecmeta=N, /* optional */
15693 +                          incmeta=,     /* optional */
15694 +                          outcmeta=,    /* optional */
15695 +                          ndummyvars=_ndummyvars
15696 +                          );
15697 +    %global &ndummyvars;
15698 +
15699 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15700 +       class
15701 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15702 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15703 +    ;
15704 +    run;
15705 +    %let &ndummyvars = 0;
15706 +    data _null_;
15707 +    %let dsid = %sysfunc(open(work._classout));
15708 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15709 +    %let dsid = %sysfunc(close(&dsid));
15710 +    run;
15711 +
15712 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15713 +       input
15714 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15715 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15716 +        / level=nominal stdize=no;
15717 +       make outvar = &outvar;
15718 +       score data = &indata out =&outdata;
15719 +       code  file=  "&fileref";
15720 +    run;
15721 +    %if &recreatecmeta eq Y %then %do;
15722 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15723 +    data _tmpds;
15724 +        set _tmpds;
15725 +           ROLE = 'INPUT';
15726 +           LEVEL = 'INTERVAL';
15727 +           CREATOR='DMZIP';
15728 +           if NAME = '_TYPE_' then delete;
15729 +    run;
15730 +    data &outcmeta;
15731 +         set &incmeta _tmpds;
15732 +    run;
15733 +    %end;
15734 +    proc datasets lib=work nolist;
15735 +      delete  _dmdbdat _dmdbcat _classout
15736 +    %if &recreatecmeta eq Y %then %do;
15737 +    _tmpds
15738 +    %end;
15739 +    ;
15740 +    quit;
15741 +%Mend MakeDummyVariables;
15742 +
15743 +/*--- Determine Optimal Number of Cluster ----
15744 +%macro FindClusNum(statds=, groupds=, minvariation=);
15745 +   %global optnclus;
15746 +   data varclus_tmp(drop=_NAME_);
15747 +      set &statDs;
15748 +      where _type_ ='PROPOR';
15749 +   run;
15750 +   proc sort data=varclus_tmp;
15751 +      by _NCL_;
15752 +   run;
15753 +   proc transpose data=varclus_tmp out=varclus_tmp;
15754 +      by _NCL_;
15755 +      var %EM_INTERVAL_INPUT
15756 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15757 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15758 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15759 +          %do i = 2 %to &nvar;
15760 +          %let varname = %sysfunc(varname(&dsid, &i));
15761 +          &varname
15762 +          %end;
15763 +      %end;
15764 +   ;
15765 +   run;
15766 +
15767 +   %if &minVariation eq %then %do;
15768 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15769 +   %end;
15770 +   %if ^(0<&minVariation<100) %then %do;
15771 +       %let minVariation = 90;
15772 +   %end;
15773 +
15774 +   data _null_;
15775 +      set varclus_tmp end=eof;
15776 +      by _NCL_;
15777 +      retain flag 0;
15778 +      if first._ncl_ then flag=0;
15779 +      if .<col1 < &minVariation then flag=1;
15780 +      if last._ncl_ and ^flag then do;
15781 +         call symput('OPTNCL', _ncl_);
15782 +         stop;
15783 +      end;
15784 +     if eof then call symput('OPTNCL', _ncl_);
15785 +   run;
15786 +
15787 +   %let optnclus = &OPTNCL;
15788 +
15789 +   data varclus_tmp(drop=_NCL_ _NAME_);
15790 +      set &statDs;
15791 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15792 +   run;
15793 +   proc sort data=varclus_tmp;
15794 +      by _TYPE_;
15795 +   run;
15796 +   proc transpose data=varclus_tmp out=varclus_tmp;
15797 +      by _TYPE_;
15798 +   run;
15799 +   proc sort data=varclus_tmp;
15800 +      by _name_ _type_;
15801 +   run;
15802 +
15803 +  proc transpose data=varclus_tmp out=&groupds;
15804 +      by _NAME_;
15805 +   run;
15806 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15807 +      by Cluster descending Rsquare;
15808 +      where Cluster ne 0;
15809 +   run;
15810 +   proc datasets lib=work nolist mt=(DATA VIEW);
15811 +      delete varclus_tmp;
15812 +   run;
15813 +   quit;
15814 +%mend findClusNum;
15815 +*/
15816 +
15817 +%macro getNclusfromTrain(inoutstat=, nc=);
15818 +%global &nc;
15819 +data _null_;
15820 +    set &inoutstat end=eof;
15821 +    if eof then do;
15822 +    call symput("&nc", _ncl_);
15823 +    end;
15824 +run;
15825 +%mend  getNclusfromTrain;
15826 +
15827 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15828 +
15829 +     *--- Build Code to Modify Metadata ---*;
15830 +     filename X "&deltacodefile";
15831 +     data _null_;
15832 +        FILE X;
15833 +        set &groupds end=eof;
15834 +        /*by Cluster;*/
15835 +         if _N_=1 then do;
15836 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15837 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15838 +           %end;
15839 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15840 +           put "if upcase(strip(NAME)) in (";
15841 +        end;
15842 +        if Strip(upcase(Selected)) eq 'YES' then do;
15843 +           string = '"'!!trim(left(VARIABLE))!!'"';
15844 +           put string;
15845 +        end;
15846 +        if eof then do;
15847 +           put ') then ROLE="INPUT";';
15848 +           put 'else ROLE="REJECTED";';
15849 +           put 'end;';
15850 +
15851 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15852 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15853 +           %end;
15854 +        end;
15855 +     run;
15856 +     quit;
15857 +
15858 +     filename X;
15859 +
15860 +     quit;
15861 +%mend MakeDeltaCode;
15862 +
15863 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15864 +    %if ^%sysfunc(exist(&statds)) %then %do;
15865 +         %goto doendc;
15866 +    %end;
15867 +
15868 +    data &corrds(drop=_TYPE_ _NCL_) ;
15869 +       set &statds;
15870 +       where _type_ eq 'CORR' ;
15871 +    run ;
15872 +    proc sort data=&corrds;
15873 +       by _NAME_ ;
15874 +    run ;
15875 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15876 +      BY _NAME_ ;
15877 +    run ;
15878 +    data &corrplotds;
15879 +       length _Y_ $100;
15880 +       set &corrplotDs;
15881 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15882 +    run ;
15883 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15884 +       set &corrplotds;
15885 +       where _LABEL_ ne '' ;
15886 +       keep _TMP_ _LABEL_ ;
15887 +    run ;
15888 +    data _null_;
15889 +       nobs=0;
15890 +       dsid = open('varclus_match');
15891 +       if dsid then do;
15892 +          nobs = attrn(dsid, 'NOBS');
15893 +          dsid = close(dsid);
15894 +       end;
15895 +       call symput ('CORR_NOBS', nobs);
15896 +    run;
15897 +    %if &corr_nobs %then %do;
15898 +        proc sort data=varclus_match;
15899 +           by _name_;
15900 +        run ;
15901 +        proc sort data=&corrplotds;
15902 +           by _name_;
15903 +        run ;
15904 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15905 +           merge varclus_match &corrplotds;
15906 +           by _NAME_ ;
15907 +           if _X_ eq '' then _X_=_NAME_ ;
15908 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15909 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15910 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15911 +
15912 +       run ;
15913 +    %end;
15914 +    %else %do;
15915 +        proc sort data=&corrplotds;
15916 +           by _name_;
15917 +        run ;
15918 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15919 +           set &corrplotds;
15920 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15921 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15922 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15923 +
15924 +        run ;
15925 +    %end;
15926 +    proc sort data=&corrplotds;
15927 +       by _X_ _Y_;
15928 +    run ;
15929 +    proc datasets lib=work nolist mt=(DATA VIEW);
15930 +       delete varclus_match;
15931 +    run;
15932 +    quit;
15933 +
15934 +%doendc:
15935 +
15936 +%mend MakeVarClusCorrData;
15937 +
15938 +%macro MakeStatPlotData(statds= , outstatplotds=);
15939 +   %if %sysfunc(exist(&statds)) %then %do;
15940 +
15941 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15942 +          set &statDs;
15943 +          where _type_ in('MEAN', 'STD', 'N');
15944 +       run ;
15945 +       proc transpose data=varclus_tmp out=&outstatplotds;
15946 +          id _TYPE_ ;
15947 +       run ;
15948 +       data &outstatplotds;
15949 +          set &outstatplotds(obs=1000);
15950 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15951 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15952 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15953 +          else SCALEDSTD= STD ;
15954 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15955 +       run ;
15956 +       proc sort data=&outstatplotds;
15957 +          by descending SCALEDSTD ;
15958 +       run ;
15959 +       proc datasets lib=work nolist mt=(DATA VIEW);
15960 +          delete varclus_tmp;
15961 +       run;
15962 +       quit;
15963 +    %end;
15964 +
15965 +%mend MakeStatPlotData;
15966 +
15967 +
15968 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15969 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15970 +    data &EM_USER_OUTSTATSCORE;
15971 +          set &indata;
15972 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15973 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15974 +          if _TYPE_ = 'STD' then _NAME_='STD';
15975 +          DROP _TYPE_ _NCL_;
15976 +     run;
15977 +
15978 +     filename _file_  "&fileRef";
15979 +
15980 +     data _null_;
15981 +        FILE _file_ MOD;
15982 +        put ' ';
15983 +        put '/*-------------------------------------------------*/';
15984 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
15985 +        put '/*-------------------------------------------------*/';
15986 +        put ' ';
15987 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
15988 +
15989 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
15990 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
15991 +
15992 +        %let k = 1;
15993 +        %do %while(^%sysfunc(fetch(&dsid)));
15994 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15995 +                %if &k > 2 %then %do;
15996 +                 %let cn = %eval(&k-2);
15997 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
15998 +                %end;
15999 +                %let k = %eval(&k+1);
16000 +        %end;
16001 +
16002 +        %let rc = %sysfunc(rewind(&dsid));
16003 +
16004 +        %do i= 2 %to &nvar;
16005 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16006 +            %do %while(^%sysfunc(fetch(&dsid)));
16007 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16008 +                %if &_name = MEAN %then
16009 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16010 +                %else %if &_name = STD %then
16011 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16012 +                %else %do;
16013 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16014 +                      %let abscoeff = %sysfunc(abs(&coeff));
16015 +                          %if &abscoeff >  0 %then %do;
16016 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16017 +                           %end;
16018 +                 %end;
16019 +             %end;
16020 +             %let rc = %sysfunc(rewind(&dsid));
16021 +         %end;
16022 +
16023 +        %let dsid= %sysfunc(close(&dsid));
16024 +       run;
16025 +%mend CreateScoreCode;
16026 +
16027 +
16028 +
16029 +/*----------------------------------------------------------
16030 +    Instead of using %MakeRSquareData,
16031 +    %MakeVarClusResultTable at macro2.source is used
16032 + +----------------------------------------------------------*/
16033 +
16034 +
16035 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
16036 +
16037 +/* modifying  from ods rsquare = data */
16038 +
16039 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
16040 +    Length Cluster $16;
16041 +    length Variable $32;
16042 +    Length VariableLabel $64;
16043 +    set &indata; retain CurrentCluster;
16044 +    if NumberOfClusters ^= &ncluster then delete;
16045 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
16046 +    CurrentCluster = Cluster;
16047 +   run;
16048 +proc sort data =&outdata ;
16049 +     by Cluster RsquareRatio;
16050 +run;
16051 +data _tmprsq(drop=index);
16052 +     set &outdata; by Cluster;
16053 +     if first.Cluster then do;
16054 +     index = strip(scan(Cluster,2 ));
16055 +     Variable = "Clus"||index;
16056 +     VariableLabel = "Cluster Component "||index;
16057 +     OwnCluster = 1;
16058 +     NextClosest = .;
16059 +     RsquareRatio = 0;
16060 +     output;
16061 +     end;
16062 +run;
16063 +
16064 +proc sort data = _tmprsq ;
16065 +     by Cluster RsquareRatio;
16066 +run;
16067 +data &outdata;
16068 +     set &outdata _tmprsq;
16069 +by Cluster;
16070 +run;
16071 +
16072 +
16073 +/* Just create the Selected variable with all YES */
16074 +
16075 +data &outdata;
16076 +    set &outdata; by cluster;
16077 +    length Selected $8;
16078 +    Selected = 'YES';
16079 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16080 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16081 +    rename OwnCluster = RSqWithClusterComp;
16082 +    rename NextClosest = RSqWithNextClusComp;
16083 +run;
16084 +
16085 +
16086 +/* Selected = Y/N will be done %score section -----
16087 +
16088 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
16089 +data &outdata;
16090 +    set &outdata; by cluster;
16091 +    length Selected $8;
16092 +    if first.Cluster then Selected = 'YES';
16093 +    else Selected = 'NO';
16094 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16095 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16096 +    rename OwnCluster = RSqWithClusterComp;
16097 +    rename NextClosest = RSqWithNextClusComp;
16098 +run;
16099 +%end;
16100 +%else %do;
16101 +data &outdata;
16102 +    set &outdata; by cluster;
16103 +    if last.Cluster then Selected = 'YES';
16104 +    else Selected = 'NO';
16105 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
16106 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
16107 +    rename OwnCluster = RSqWithClusterComp;
16108 +    rename NextClosest = RSqWithNextClusComp;
16109 +run;
16110 +%end;
16111 +---------------------------------------------------------------*/
16112 +
16113 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
16114 +/* to calculate NextClosestClusRsq */
16115 +proc transpose data = &inClusRSquare  out=_clusRsq;
16116 +      by cluster;
16117 +      run;
16118 +data _clusRsq;
16119 +     set _clusRsq;
16120 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
16121 +run;
16122 +
16123 +proc sort data=_clusRsq;
16124 +    by cluster col1;
16125 +    run;
16126 +data _clusRsq(drop=_NAME_ _LABEL_);
16127 +     set _clusRsq; by cluster;
16128 +     if last.Cluster then output;
16129 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
16130 +     rename COL1 = RSqWithNextClusComp;
16131 +     rename Cluster = Variable;
16132 +     label  Cluster = "Variable";
16133 +run;
16134 +
16135 +proc sort data =&outdata;
16136 +     by Variable;
16137 +run;
16138 +data &outdata;
16139 +    merge &outdata _clusRsq;
16140 +    by Variable;
16141 +run;
16142 +proc sort data =&outdata;
16143 +by Cluster  RsquareRatio;
16144 +run;
16145 +quit;
16146 +%end;
16147 +
16148 +proc datasets lib = work nolist;
16149 +     delete _tmprsq _clusRsq;
16150 +     run;
16151 +quit;
16152 +
16153 +%mend MakeRSquareData;
16154 +
16155 +
16156 +/*-------------------------------------------------------------------------*/
16157 +
16158 +
16159 +
16160 +%macro ModifyCorr(indata=,
16161 +                  outdata=,
16162 +                  rsquare = Y
16163 +                  );
16164 +    data corr_tmp;
16165 +        set &indata;
16166 +    run;
16167 +     proc sql;
16168 +           update &indata
16169 +           set
16170 +     %let dsid = %sysfunc(open(work.corr_tmp));
16171 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16172 +          %do i = 4 %to &nvar;
16173 +          %let _name = %sysfunc(varname(&dsid, &i));
16174 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16175 +            %else  %let _name_md = &_name;
16176 +            %if &i < &nvar %then %do;
16177 +               &_name = 1- &_name_md ,
16178 +            %end;
16179 +            %else %do;
16180 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
16181 +            %end;
16182 +          %end;
16183 +      %let dsid= %sysfunc(close(&dsid));
16184 +
16185 +      select * from &indata;
16186 +      run;
16187 +      proc datasets lib = work nolist;
16188 +           delete corr_tmp;
16189 +      run;
16190 +      quit;
16191 +
16192 + %mend ModifyCorr;
16193 +
16194 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
16195 +    data &outdata(drop= _NCL_  _TYPE_);
16196 +       set &indata;
16197 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16198 +       rename _NAME_ = Cluster;
16199 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16200 +    run;
16201 +    %if &RSquare eq Y %then %do;
16202 +     data corr_tmp;
16203 +        set &outdata;
16204 +     run;
16205 +
16206 +     data &outdata(drop=i);
16207 +          set &outdata;
16208 +          %let dsid = %sysfunc(open(work.corr_tmp));
16209 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16210 +          %do i = 2 %to &nvar;
16211 +            %let _name = %sysfunc(varname(&dsid, &i));
16212 +            %let _name_md = &_name.**2;
16213 +                &_name = &_name_md;
16214 +          %end;
16215 +      %let dsid= %sysfunc(close(&dsid));
16216 +      run;
16217 +      proc datasets lib = work nolist;
16218 +           delete corr_tmp;
16219 +      run;
16220 +
16221 +    %end;
16222 +     quit;
16223 +%mend MakeClusStructCorrData;
16224 +
16225 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
16226 +    data &outdata(drop= _NCL_  _TYPE_);
16227 +       set &indata;
16228 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
16229 +       rename _NAME_ = Cluster;
16230 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16231 +    run;
16232 +    data corr_tmp;
16233 +        set &outdata;
16234 +    run;
16235 +
16236 +    %let dsid = %sysfunc(open(work.corr_tmp));
16237 +    %let nclus2= %eval(&ncluster+1);
16238 +    data &outdata;
16239 +         set &outdata;
16240 +          %do i = 2 %to &nclus2;
16241 +          %let i_1 = %eval(&i-1);
16242 +            %let _name = %sysfunc(varname(&dsid, &i));
16243 +            %let _newName = Clus&i_1;
16244 +                rename &_name = &_newName; ;
16245 +                *label &_name ="Cluster &i_1";
16246 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
16247 +          %end;
16248 +          keep Cluster
16249 +          %do i = 2 %to &nclus2;
16250 +                %let _name = %sysfunc(varname(&dsid, &i));
16251 +                &_name
16252 +          %end;
16253 +          ;
16254 +    %let dsid= %sysfunc(close(&dsid));
16255 +     run;
16256 +     quit;
16257 +
16258 +    %if &RSquare eq Y %then %do;
16259 +
16260 +       data corr_tmp;
16261 +        set &outdata;
16262 +     run;
16263 +
16264 +     data &outdata(drop=i);
16265 +          set &outdata;
16266 +          %let dsid = %sysfunc(open(work.corr_tmp));
16267 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16268 +          %do i = 2 %to &nvar;
16269 +            %let _name = %sysfunc(varname(&dsid, &i));
16270 +            %let _name_md = &_name.**2;
16271 +                &_name = &_name_md;
16272 +          %end;
16273 +      %let dsid= %sysfunc(close(&dsid));
16274 +      run;
16275 +    %end;
16276 +
16277 +    %if &makeplotds eq Y %then %do;
16278 +     proc transpose data = &outdata
16279 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16280 +          by cluster;
16281 +     run;
16282 +     data &plotds;
16283 +          set  &plotds;
16284 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16285 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16286 +     run;
16287 +     %end;
16288 +     proc datasets lib = work nolist;
16289 +           delete corr_tmp;
16290 +     run;
16291 +     quit;
16292 +%mend MakeInterClusCorrData;
16293 +
16294 +
16295 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
16296 +
16297 +data &outlink(drop = Selected);
16298 +     set &indata;
16299 +     LINKID = _N_;
16300 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
16301 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
16302 +run;
16303 +data &outnode(keep=NODEID TYPE LABEL);
16304 +    set &indata;
16305 +    length TYPE $16;
16306 +    rename Variable = NODEID;
16307 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
16308 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
16309 +    then  TYPE = "CLUSTER";
16310 +    else  TYPE="VARIABLE";
16311 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
16312 +run;
16313 +quit;
16314 +%mend MakeClusConstellData;
16315 +
16316 +
16317 +
16318 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
16319 +
16320 +data &outlink(drop = Selected);
16321 +     set &indata;
16322 +     LINKID = _N_;
16323 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
16324 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
16325 +run;
16326 +data &outnode(keep=NODEID TYPE LABEL);
16327 +    set &indata;
16328 +    length TYPE $16;
16329 +    rename Variable = NODEID;
16330 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
16331 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
16332 +    then  TYPE = "CLUSTER";
16333 +    else  TYPE="VARIABLE";
16334 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
16335 +run;
16336 +quit;
16337 +%mend MakeClusConstellData;
16338 +
16339 +
16340 +/*--- This will work only when inds is not a view data -------
16341 +
16342 +%macro getNVarNObs(inds=, nvar=, nobs=);
16343 +
16344 +    %global &nvar;
16345 +    %global &nobs;
16346 +    data _null_;
16347 +         dsid = open("&inds");
16348 +         nv = attrn(dsid, 'NVAR');
16349 +         no = attrn(dsid, 'NOBS');
16350 +         dsid = close(dsid);
16351 +         call symput("&nvar", nv);
16352 +         call symput("&nobs", no);
16353 +    run;
16354 +    quit;
16355 +%mend  getNVarNObs;
16356 +
16357 ++---------------------------------------------------------------*/
16358 +
16359 +
16360 +%macro getNVar(inds=, nvar=);
16361 +    %global &nvar;
16362 +    data _null_;
16363 +         dsid = open("&inds");
16364 +         nv = attrn(dsid, 'NVAR');
16365 +         dsid = close(dsid);
16366 +         call symput("&nvar", nv);
16367 +    run;
16368 +    quit;
16369 +%mend  getNVar;
16370 +
16371 +
16372 +
16373 +%macro getNObs(inds=, nobs=);
16374 +    %global &nobs;
16375 +    data _null_;
16376 +        set &inds end=eof;
16377 +        if eof then call symput("&nobs", _N_);
16378 +    run;
16379 +    quit;
16380 +%mend  getNObs;
16381 +
16382 +%Macro CreateVarclusMeta(trainnum=);
16383 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
16384 +    data &EM_USER_VARCLUSMETA;
16385 +         length TrainNum 8.;
16386 +         length NewTrain $8;
16387 +         length NGCluster 8.;
16388 +         length ExportedComp $16;
16389 +         length HideVariable $8;
16390 +         TrainNum = &trainnum;
16391 +         NewTrain = "Y";
16392 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
16393 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
16394 +         NGCluster = 0; /* zero means no twostage */
16395 +   run;
16396 +   quit;
16397 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
16398 +
16399 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
16400 +    data &outdata(drop= _NCL_  _TYPE_);
16401 +       set &indata;
16402 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
16403 +       %if &globalclusid ne %then %do;
16404 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16405 +       rename _NAME_ = Cluster;
16406 +       %end;
16407 +       %else %do;
16408 +        _NAME_ = upcase(_NAME_);
16409 +       rename _NAME_ = Cluster;
16410 +       %end;
16411 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16412 +    run;
16413 +    data corr_tmp;
16414 +        set &outdata;
16415 +    run;
16416 +
16417 +    %let dsid = %sysfunc(open(work.corr_tmp));
16418 +    %let nclus2= %eval(&ncluster+1);
16419 +    data &outdata;
16420 +         set &outdata;
16421 +          %do i = 2 %to &nclus2;
16422 +          %let i_1 = %eval(&i-1);
16423 +            %let _name = %sysfunc(varname(&dsid, &i));
16424 +            %if &globalclusid ne %then
16425 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
16426 +                     rename &_name = &_newName;
16427 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
16428 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
16429 +                %end;
16430 +            %else
16431 +                %do; %let _newName = CLUS&i_1;
16432 +                     rename &_name = &_newName;
16433 +                     *label &_name ="Cluster &i_1";
16434 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
16435 +                %end;
16436 +          %end;
16437 +          keep Cluster
16438 +          %do i = 2 %to &nclus2;
16439 +                %let _name = %sysfunc(varname(&dsid, &i));
16440 +                &_name
16441 +          %end;
16442 +          ;
16443 +    %let dsid= %sysfunc(close(&dsid));
16444 +     run;
16445 +     quit;
16446 +
16447 +    %if &RSquare eq Y %then %do;
16448 +
16449 +       data corr_tmp;
16450 +        set &outdata;
16451 +     run;
16452 +
16453 +     data &outdata;
16454 +          set &outdata;
16455 +          %let dsid = %sysfunc(open(work.corr_tmp));
16456 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16457 +          %do i = 2 %to &nvar;
16458 +            %let _name = %sysfunc(varname(&dsid, &i));
16459 +            %let _name_md = &_name.**2;
16460 +                &_name = &_name_md;
16461 +          %end;
16462 +      %let dsid= %sysfunc(close(&dsid));
16463 +      run;
16464 +    %end;
16465 +
16466 +    %if &makeplotds eq Y %then %do;
16467 +     proc transpose data = &outdata
16468 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16469 +          by cluster;
16470 +     run;
16471 +     data &plotds;
16472 +          set  &plotds;
16473 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16474 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
16475 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
16476 +     run;
16477 +     %end;
16478 +     proc datasets lib = work nolist;
16479 +           delete corr_tmp;
16480 +     run;
16481 +     quit;
16482 +%mend MakeInterClusCorrData;
16483 +
16484 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
16485 +    data _tmpds(drop= _NCL_);
16486 +       set &indata;
16487 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
16488 +       %if &globalclusid ne %then %do;
16489 +           _NAME_ = "GC&globalclusid.";
16490 +       rename _NAME_ = Cluster;
16491 +       %end;
16492 +       %else %do;
16493 +        _NAME_ = "CLUS";
16494 +        rename _NAME_ = Cluster;
16495 +       %end;
16496 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16497 +    run;
16498 +    proc transpose data =_tmpds out =&outdata;
16499 +    run;
16500 +
16501 +    data &outdata(drop=COL1);
16502 +        %if &globalclusid ne %then %do;
16503 +        length GCluster $16;
16504 +        %end;
16505 +        length Cluster $32;
16506 +        length _NAME_ $32;
16507 +         set &outdata;
16508 +         _NAME_ = upcase(_NAME_);
16509 +         rename _NAME_=Variable;
16510 +         *label _NAME_="Variable";
16511 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16512 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16513 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16514 +
16515 +         %if &globalclusid ne %then %do;
16516 +          GCluster = "GC&globalclusid";
16517 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
16518 +         %end;
16519 +         %else %do;
16520 +         Cluster = "CLUS"||strip(COL1);
16521 +        %end;
16522 +         rename COL2 = RSqWithOwnClusComp;
16523 +         *label COL2 = "R-Square With Own Cluster Component";
16524 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16525 +
16526 +   run;
16527 +   proc sort data =&outdata;
16528 +        by Cluster RSqWithOwnClusComp;
16529 +   run;
16530 +   proc datasets lib = work nolist;
16531 +           delete _tmpds;
16532 +   run;
16533 +   quit;
16534 +%mend MakeOwnRSquare;
16535 +
16536 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16537 +    data &outdata(drop= _NCL_  _TYPE_);
16538 +       %if &globalclusid ne %then %do;
16539 +        length GCluster $16;
16540 +        %end;
16541 +       set &indata;
16542 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16543 +       %if &globalclusid ne %then %do;
16544 +         GCluster = "GC&globalclusid";
16545 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16546 +         rename _NAME_ = Cluster;
16547 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16548 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16549 +
16550 +       %end;
16551 +       %else %do;
16552 +         _NAME_ = upcase(_NAME_);
16553 +         rename _NAME_ = Cluster;
16554 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16555 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16556 +
16557 +       %end;
16558 +     run;
16559 +    %if &RSquare eq Y %then %do;
16560 +     data corr_tmp;
16561 +          set &outdata;
16562 +     run;
16563 +     %let istart = 2;
16564 +     %if &globalclusid ne %then %let istart = 3;
16565 +     data &outdata;
16566 +          set &outdata;
16567 +          %let dsid = %sysfunc(open(work.corr_tmp));
16568 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16569 +          %do i =&istart %to &nvar;
16570 +            %let _name = %sysfunc(varname(&dsid, &i));
16571 +            %let _name_md = &_name.**2;
16572 +                &_name = &_name_md;
16573 +          %end;
16574 +      %let dsid= %sysfunc(close(&dsid));
16575 +      run;
16576 +      proc datasets lib = work nolist;
16577 +           delete corr_tmp;
16578 +      run;
16579 +    %end;
16580 +     quit;
16581 +%mend MakeClusStructCorrData;
16582 +
16583 +/*
16584 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16585 +*/
16586 +
16587 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16588 +
16589 +     /* The indata should be the outdata
16590 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16591 +
16592 +     proc sort data =&indata out=_tmpclusRsq;
16593 +     by cluster;
16594 +     run;
16595 +
16596 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16597 +      by cluster;
16598 +     run;
16599 +
16600 +     proc sort data=_tmpclusRsq;
16601 +        by _NAME_ COL1;
16602 +     run;
16603 +
16604 +     data _tmpclusRsq;
16605 +         length _NAME_ $32;
16606 +         set _tmpclusRsq; by _NAME_;
16607 +          _NAME_ = upcase(_NAME_);
16608 +          %if &ncluster ne 1 %then %do;
16609 +             if last._NAME_ then delete;
16610 +          %end;
16611 +          %else %do;
16612 +             COL1 = 0;
16613 +          %end;
16614 +     run;
16615 +     /* need to sort again */
16616 +     proc sort data=_tmpclusRsq;
16617 +        by _NAME_ COL1;
16618 +     run;
16619 +
16620 +     data &outdata;
16621 +         set _tmpclusRsq; by _NAME_;
16622 +         Cluster = upcase(Cluster);
16623 +         if last._NAME_ then output;
16624 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16625 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16626 +         rename COL1 = RSqWithNextClusComp;
16627 +         Cluster = upcase(Cluster);
16628 +         rename Cluster = ClosestCluster;
16629 +         *label  Cluster = "Next Closest Cluster";
16630 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16631 +         rename _NAME_ = Variable;
16632 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16633 +    run;
16634 +
16635 +
16636 +    %if &globalclusid ne %then %do;
16637 +    data &outdata;
16638 +       length GCluster $16;
16639 +       set &outdata;
16640 +       GCluster = "GC&globalclusid";
16641 +       run;
16642 +    %end;
16643 +    proc datasets lib = work nolist;
16644 +           delete _tmpclusRsq;
16645 +    run;
16646 +    quit;
16647 +%mend FindNextClosestClusByVar;
16648 +
16649 +
16650 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16651 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16652 +     proc sort data =&indata out=_tmpclusRsq;
16653 +     by cluster;
16654 +     run;
16655 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16656 +     by cluster;
16657 +     run;
16658 +     proc sort data=_tmpclusRsq;
16659 +        by _NAME_ col1;
16660 +     run;
16661 +     data _tmpclusRsq;
16662 +         length _NAME_ $32;
16663 +         set _tmpclusRsq; by _NAME_;
16664 +          _NAME_ = upcase(_NAME_);
16665 +          %if &ncluster ne 1 %then %do;
16666 +             if last._NAME_ then delete;
16667 +          %end;
16668 +          %else %do;
16669 +             COL1 = 0;
16670 +          %end;
16671 +     run;
16672 +     data &outdata;
16673 +         set _tmpclusRsq; by _NAME_;
16674 +         Cluster = upcase(Cluster);
16675 +         if last._NAME_ then output;
16676 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16677 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16678 +         rename COL1 = RSqWithNextClusComp;
16679 +         Cluster = upcase(Cluster);
16680 +         rename Cluster = ClosestCluster;
16681 +         *label  Cluster = "Next Closest Cluster";
16682 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16683 +         rename _NAME_ = Variable;
16684 +         *label  _NAME_ = "Variable";
16685 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16686 +
16687 +    run;
16688 +    %if &globalclusid ne %then %do;
16689 +    data &outdata;
16690 +       length GCluster $16;
16691 +       set &outdata;
16692 +       GCluster = "GC&globalclusid";
16693 +       run;
16694 +    %end;
16695 +
16696 +    proc datasets lib = work nolist;
16697 +           delete _tmpclusRsq;
16698 +    run;
16699 +
16700 +    quit;
16701 +%mend FindNextClosestClusByCluster;
16702 +
16703 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16704 +/*----
16705 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16706 +-----------*/
16707 +
16708 +proc sort data =&indata1;
16709 +    by Variable;
16710 +run;
16711 +proc sort data =&indata2;
16712 +    by Variable;
16713 +run;
16714 +data &outdata;
16715 +    merge &indata1 &indata2;
16716 +    by Variable;
16717 +    length Type $16;
16718 +    Type = 'Variable';
16719 +    *label Type ='Type';
16720 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16721 +run;
16722 +
16723 +
16724 +data &indata3;
16725 +    set  &indata3 ;
16726 +    length RSqWithOwnClusComp 8.;
16727 +    Cluster = Variable;
16728 +    RSqWithOwnClusComp = 1;
16729 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16730 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16731 +    length Type $16;
16732 +    Type = 'ClusterComp';
16733 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16734 +
16735 +;
16736 +run;
16737 +
16738 +proc sort data=&outdata;
16739 +    by Cluster;
16740 +run;
16741 +proc sort data =&indata3;
16742 +    by Cluster;
16743 +run;
16744 +
16745 +data &outdata;
16746 +     set &outdata &indata3;
16747 +     by Cluster;
16748 +run;
16749 +
16750 +
16751 +/* Create the Selected variable with all YES */
16752 +
16753 +data &outdata;
16754 +     set &outdata;
16755 +     length RsqRatio 8.;
16756 +     length Selected $8;
16757 +     *label RSqRatio = "1-R**2 Ratio";
16758 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16759 +     *label Selected = "Variable Selected";
16760 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16761 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16762 +     Selected ='YES';
16763 +     rename _LABEL_ = Label;
16764 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16765 +run;
16766 +
16767 +
16768 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16769 +        Just create the Selected variable with all YES at the step above
16770 + +------------------------------------------------------------------------------+
16771 +
16772 +proc sort data=&outdata;
16773 +    by Cluster RsqRatio;
16774 +run;
16775 +
16776 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16777 +data &outdata;
16778 +     set &outdata; by Cluster;
16779 +     length Selected $8;
16780 +     label Selected = "Variable Selected";
16781 +     if  first.Cluster then Selected ='Yes';
16782 +     else Selected = 'No';
16783 +    run;
16784 +%end;
16785 +%else %do;
16786 +data &outdata(drop = _var _varchange);
16787 +     set &outdata; retain _var 0; by Cluster;
16788 +     length Selected $8;
16789 +     label Selected = "Variable Selected";
16790 +     if first.Cluster then  _varchange = 0;
16791 +     else _varchange =1;
16792 +     if _var ne _varchange then  Selected  = 'Yes';
16793 +     else Selected = 'No';
16794 +     if last.cluster then  _var = 0;
16795 +     else _var = _varchange;
16796 +run;
16797 +%end;
16798 +
16799 +--------------------------------------------------------------*/
16800 +
16801 +quit;
16802 +%mend MakeVarClusResultTable;
16803 +
16804 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16805 +     proc sort data =&indata;
16806 +        by cluster;
16807 +     run;
16808 +     proc transpose data =&indata
16809 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16810 +          by cluster;
16811 +     run;
16812 +     data &outdata;
16813 +          set  &outdata;
16814 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16815 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16816 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16817 +     run;
16818 +     %if &globalclusid ne %then %do;
16819 +     data &outdata;
16820 +          Length GCluster $16;
16821 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16822 +          set  &outdata;
16823 +          GCluster ="GC&globalclusid.";
16824 +          run;
16825 +     %end;
16826 +
16827 +%Mend MakePlotDataFromCorrTable;
16828 +
16829 +
16830 +%macro MakeCorrelation(indata=,
16831 +                       outstat=_tmpoutstat,
16832 +                       corrmatrix=N,
16833 +                       outcorr=_tmpoutcorr,
16834 +                       includeclassvar=N,
16835 +                       target=,
16836 +                       freq=,
16837 +                       weight=);
16838 +   %if &target eq  %then %do;
16839 +
16840 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16841 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16842 +       %if &includeclassvar eq Y %then %do;
16843 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16844 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16845 +          %do i = 2 %to &nvar;
16846 +          %let varname = %sysfunc(varname(&dsid, &i));
16847 +          &varname
16848 +          %end;
16849 +       %end;
16850 +       ;
16851 +      %if &freq ne  %then %do;
16852 +          freq &freq;
16853 +      %end;
16854 +      %if &weight ne  %then %do;
16855 +          weight &weight;
16856 +      %end;
16857 +
16858 +      run;
16859 +      %if &corrmatrix eq Y %then %do;
16860 +      data  &outcorr (drop = _NCL_ _TYPE_);
16861 +           set  &outstat ;
16862 +           if _TYPE_ ='CORR' then output;
16863 +      run;
16864 +      %end;
16865 +    %end;
16866 +    %else %do;
16867 +       proc corr data=&indata outp=&outstat noprint;
16868 +            var
16869 +       %let dsid = %sysfunc(open(&indata));
16870 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16871 +          %do i = 1 %to &nvar;
16872 +              %let _name = %sysfunc(varname(&dsid, &i));
16873 +              %if &_name ne &target %then;
16874 +              &_name
16875 +           %end;
16876 +        %let dsid= %sysfunc(close(&dsid));
16877 +        ;
16878 +        with &target;
16879 +        run;
16880 +    %end;
16881 +    quit;
16882 +%mend MakeCorrelation;
16883 +
16884 +
16885 +%macro MakeCorrelationDistance(indata=,
16886 +                               outdata=,
16887 +                               rsquare = N
16888 +                               );
16889 +    data corr_tmp;
16890 +        set &indata;
16891 +        if _N_ = 1 then do;
16892 +           output;
16893 +           stop;
16894 +         end;
16895 +    run;
16896 +    %if &outdata ne  %then %let  _outdata = &outdata;
16897 +    %else %let _outdata = &indata;
16898 +
16899 +    data &_outdata;
16900 +         set &indata;
16901 +
16902 +         %let dsid = %sysfunc(open(work.corr_tmp));
16903 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16904 +          %do i = 2 %to &nvar;
16905 +              %let _name = %sysfunc(varname(&dsid, &i));
16906 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16907 +              %else  %let _name_md = &_name;
16908 +              &_name = 1- &_name_md;
16909 +          %end;
16910 +      %let dsid= %sysfunc(close(&dsid));
16911 +      run;
16912 +      proc datasets lib = work nolist;
16913 +           delete corr_tmp;
16914 +      run;
16915 +      quit;
16916 +  %mend MakeCorrelationDistance;
16917 +
16918 +
16919 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16920 +                                   rsquare = N
16921 +                                   );
16922 +    data corr_tmp;
16923 +        set &indata;
16924 +    run;
16925 +    proc sql noprint;
16926 +           update &indata
16927 +           set
16928 +     %let dsid = %sysfunc(open(work.corr_tmp));
16929 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16930 +          %do i = 4 %to &nvar;
16931 +          %let _name = %sysfunc(varname(&dsid, &i));
16932 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16933 +            %else  %let _name_md = &_name;
16934 +            %if &i < &nvar %then %do;
16935 +               &_name = 1- &_name_md ,
16936 +            %end;
16937 +            %else %do;
16938 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16939 +            %end;
16940 +          %end;
16941 +      %let dsid= %sysfunc(close(&dsid));
16942 +
16943 +      select * from &indata;
16944 +      run;
16945 +     data &indata( drop = _NCL_);
16946 +           set &indata;
16947 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16948 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16949 +     run;
16950 +     data &indata(DROP = _NCL_);
16951 +           set &indata;
16952 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16953 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16954 +           rename _NAME_ = _VAR_;
16955 +     run;
16956 +     proc datasets lib = work nolist;
16957 +           delete corr_tmp;
16958 +     run;
16959 +     quit;
16960 + %mend UpdateOutStatCorrToDistance;
16961 +
16962 +
16963 +%macro HierClusWithCorr(indata= ,
16964 +                        ncluster=,
16965 +                        method = Ward,
16966 +                        outtree = _outtree,
16967 +                        idvar =_VAR_,
16968 +                        outdata=,
16969 +                        rescore = N,
16970 +                        newncluster=
16971 +                        );
16972 +      %global &newncluster;
16973 +      %if &rescore ne Y %then %do;
16974 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16975 +                   method=&method outtree=&outtree noprint;
16976 +           id &idvar;
16977 +      run;
16978 +      %end;
16979 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16980 +      run;
16981 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
16982 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
16983 +      run;
16984 +      data _outcontent;
16985 +          set _outcontent;
16986 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
16987 +          index = 1;
16988 +          rename NAME = _NAME_;
16989 +      run;
16990 +      proc sort data=_outcontent;
16991 +          by _NAME_;
16992 +      run;
16993 +      proc sort data =&outdata;
16994 +           by _NAME_;
16995 +      run;
16996 +      data &outdata(drop=index);
16997 +          merge &outdata _outcontent;
16998 +          by _NAME_;
16999 +          if index = . then delete;
17000 +      run;
17001 +      /*-----------------------------------------------------------*/
17002 +      data &outdata;
17003 +           length CLUSNAME $16;
17004 +           set &outdata;
17005 +           if CLUSTER > &ncluster then delete;
17006 +           CLUSNAME='GC'||strip(CLUSTER);
17007 +           *label CLUSNAME = "Cluster Name";
17008 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
17009 +           rename _NAME_ = VARIABLE ;
17010 +           *label _NAME_ = "Variable";
17011 +           *label CLUSTER = "Cluster";
17012 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
17013 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
17014 +      run;
17015 +      proc sort data=&outdata out=&outdata;
17016 +           by CLUSTER;
17017 +      run;
17018 +      proc means data =&outdata noprint;
17019 +           output out=_meanout;
17020 +      run;
17021 +      data _null_;
17022 +            set _meanout;
17023 +            if strip(_STAT_) eq 'MAX' then do;
17024 +            call symput("&newncluster", CLUSTER);
17025 +            stop;
17026 +            end;
17027 +      run;
17028 +
17029 +      proc datasets lib = work nolist;
17030 +           delete _outcontent _meanout;
17031 +      run;
17032 +      quit;
17033 +%mend  HierClusWithCorr;
17034 +
17035 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
17036 +
17037 +     data _tmpindata;
17038 +          set &indata;
17039 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
17040 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17041 +          if _TYPE_ = 'STD' then _NAME_='STD';
17042 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
17043 +          DROP _TYPE_ _NCL_;
17044 +     run;
17045 +
17046 +     filename _file_  "&fileRef";
17047 +
17048 +     data _null_;
17049 +        FILE _file_ MOD;
17050 +        put ' ';
17051 +        put "/*-------------------------------------------------*/";
17052 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
17053 +        put "/*-------------------------------------------------*/";
17054 +        put ' ';
17055 +        %let dsid = %sysfunc(open(work._tmpindata));
17056 +
17057 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17058 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17059 +        %let k = 1;
17060 +        %do %while(^%sysfunc(fetch(&dsid)));
17061 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17062 +               %if &k > 2 %then %do;
17063 +                %let cn = %eval(&k-2);
17064 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
17065 +                %end;
17066 +                %let k = %eval(&k+1);
17067 +
17068 +        %end;
17069 +        %let rc = %sysfunc(rewind(&dsid));
17070 +
17071 +        %do j= 2 %to &nvar;
17072 +            %let _varname = %sysfunc(varname(&dsid, &j));
17073 +            %do %while(^%sysfunc(fetch(&dsid)));
17074 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17075 +                %if &_name = MEAN %then
17076 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
17077 +                %else %if &_name = STD %then
17078 +                %let _std = %sysfunc(getvarn(&dsid, &j));
17079 +                %else %do;
17080 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
17081 +                      %let abscoeff = %sysfunc(abs(&coeff));
17082 +                          %if &abscoeff >  0 %then %do;
17083 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17084 +                           %end;
17085 +                 %end;
17086 +             %end;
17087 +             %let rc = %sysfunc(rewind(&dsid));
17088 +         %end;
17089 +
17090 +        %let dsid= %sysfunc(close(&dsid));
17091 +
17092 +     run;
17093 +
17094 +     filename _file_;
17095 +     proc datasets lib = work nolist;
17096 +           delete _tmpindata;
17097 +     run;
17098 +     quit;
17099 +%mend CreateScoreCode2;
17100 +
17101 +
17102 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
17103 +
17104 +     /*--- Build Code to Modify Metadata ---*/
17105 +     filename X "&deltacodefile";
17106 +     data _null_;
17107 +        FILE X;
17108 +        set &groupds end=eof;
17109 +        if _N_=1 then do;
17110 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17111 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
17112 +           %end;
17113 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
17114 +           put "if upcase(strip(NAME)) in (";
17115 +        end;
17116 +        if Strip(upcase(Selected)) eq 'YES' then do;
17117 +           string = '"'!!trim(left(VARIABLE))!!'"';
17118 +           put string;
17119 +        end;
17120 +        if eof then do;
17121 +           put ') then ROLE="INPUT";';
17122 +           put 'else ROLE="REJECTED";';
17123 +           put 'end;';
17124 +
17125 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
17126 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
17127 +           %end;
17128 +        end;
17129 +     run;
17130 +     quit;
17131 +
17132 +     filename X;
17133 +     quit;
17134 +%mend MakeDeltaCode2;
17135 +
17136 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
17137 +  %global &ngc;
17138 +  data _null_;
17139 +  %if &indata ne %then %do;
17140 +      %let dsid = %sysfunc(open(&indata));
17141 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
17142 +      %let dsid = %sysfunc(close(&dsid));
17143 +  %end;
17144 +  %else %do;
17145 +       %let nvar = %eval(&ninput+&ndummy); ;
17146 +  %end;
17147 +  %let numgc = %eval(&nvar/&div+2);
17148 +  %let &ngc = &numgc;
17149 +   run;
17150 +  quit;
17151 +%mend getInitialGClusterNumber;
17152 +
17153 +
17154 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
17155 +data &outlink(drop = Selected);
17156 +     set &indata;
17157 +     LINKID = _N_;
17158 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
17159 +run;
17160 +data &outnode(keep=NODEID TYPE LABEL);
17161 +    set &indata;
17162 +    length TYPE $16;
17163 +    rename VARIABLE = NODEID;
17164 +    *label  CLUSNAME="Node ID";
17165 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17166 +    TYPE = "VARIABLE";
17167 +    *label TYPE = "Node Type";
17168 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17169 +    run;
17170 +data _tmp(keep=NODEID TYPE LABEL);
17171 +    set &indata;
17172 +    length TYPE $16;
17173 +    rename CLUSNAME = NODEID;
17174 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17175 +    TYPE = "GCLUSTER";
17176 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17177 +    run;
17178 +proc sort data=_tmp;
17179 +    by NODEID;
17180 +run;
17181 +data _tmp;
17182 +    set _tmp; by NODEID;
17183 +    if first.NODEID then output;
17184 +run;
17185 +proc sort data=&outnode;
17186 +    by NODEID;
17187 +run;
17188 +data  &outnode;
17189 +    set _tmp &outnode;
17190 +run;
17191 +proc datasets lib = work nolist;
17192 +     delete _tmp;
17193 +run;
17194 +quit;
17195 +%mend MakeGobalConstellData;
17196 +
17197 +/* Make contellation plot data among GCLUSTERS */
17198 +
17199 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
17200 +
17201 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
17202 +     set &indata;
17203 +     LINKID = _N_;
17204 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
17205 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
17206 +     end;
17207 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
17208 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
17209 +     end;
17210 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
17211 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
17212 +    end;
17213 +run;
17214 +
17215 +data _tmp_outrsquare;
17216 +        set &inoutrsq;
17217 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
17218 +run;
17219 +
17220 +proc freq data =_tmp_outrsquare noprint;
17221 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
17222 +run;
17223 +
17224 +data &outnode(keep=_NAME_ TYPE LABEL);
17225 +    set &outlink;
17226 +    length TYPE $16;
17227 +    length LABEL $100;
17228 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
17229 +
17230 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
17231 +    TYPE = "GCLUSTER";
17232 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
17233 +    end;
17234 +    else do;
17235 +    TYPE= "ROOT";
17236 +    LABEL= _NAME_;
17237 +    end;
17238 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
17239 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
17240 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
17241 +    run;
17242 +
17243 +proc sort data=&outnode;
17244 +     by _NAME_;
17245 +proc sort data=_tmp_GCLUSFREQ;
17246 +     by _NAME_;
17247 +run;
17248 +
17249 +data  &outnode;
17250 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
17251 +     if COUNT=. then COUNT=1;
17252 +run;
17253 +
17254 +proc datasets lib = work nolist;
17255 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
17256 +run;
17257 +
17258 +quit;
17259 +%Mend MakeGClusterConstData;
17260 +
17261 +
17262 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
17263 +
17264 +    data _gscoretmpds;
17265 +          set &indata;
17266 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
17267 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
17268 +          if _TYPE_ = 'STD' then _NAME_='STD';
17269 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
17270 +          DROP _TYPE_ _NCL_;
17271 +     run;
17272 +
17273 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17274 +        GCluster Component &globalclusid ------ */
17275 +
17276 +    filename _file_  "&fileref";
17277 +
17278 +    data _null_;
17279 +        %if &globalclusid eq 1 %then %do;
17280 +          FILE _file_;
17281 +        %end;
17282 +        %else %do;
17283 +          FILE _file_ MOD;
17284 +        %end;
17285 +
17286 +        %let dsid = %sysfunc(open(work._gscoretmpds));
17287 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
17288 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
17289 +
17290 +        %let k = 1;
17291 +        %do %while(^%sysfunc(fetch(&dsid)));
17292 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17293 +                %if &k > 2 %then %do;
17294 +                put "&_name = 0 ; ";
17295 +                %end;
17296 +                %let k = %eval(&k+1);
17297 +        %end;
17298 +
17299 +        %let rc = %sysfunc(rewind(&dsid));
17300 +        %do i= 2 %to &nvar;
17301 +            %let _varname =  %sysfunc(varname(&dsid, &i));
17302 +            %do %while(^%sysfunc(fetch(&dsid)));
17303 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
17304 +                %if &_name = MEAN %then
17305 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
17306 +                %else %if &_name = STD %then
17307 +                %let _std = %sysfunc(getvarn(&dsid, &i));
17308 +                %else %do;
17309 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
17310 +                      %let abscoeff = %sysfunc(abs(&coeff));
17311 +                          %if &abscoeff >  0 %then %do;
17312 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
17313 +                           %end;
17314 +                 %end;
17315 +             %end;
17316 +             %let rc = %sysfunc(rewind(&dsid));
17317 +
17318 +         %end;
17319 +
17320 +        %let dsid= %sysfunc(close(&dsid));
17321 +       run;
17322 +
17323 +
17324 +       proc datasets lib=work nolist;
17325 +            delete _gscoretmpds;
17326 +       run;
17327 +      quit;
17328 +
17329 +%mend CreateGClusterScoreCode;
17330 +
17331 +
17332 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
17333 +
17334 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
17335 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
17336 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
17337 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
17338 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
17339 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
17340 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
17341 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
17342 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
17343 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
17344 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
17345 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
17346 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
17347 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
17348 +
17349 +   filename gsfile "&gscorecode";
17350 +
17351 +   data &EM_USER_GSCORE;
17352 +             set &indata;
17353 +             %include  gsfile;
17354 +        keep
17355 +        %do i=1 %to &ngcluster;
17356 +         %let gcvarname = GC&i;
17357 +         &gcvarname
17358 +        %end;
17359 +     ;
17360 +   run;
17361 +
17362 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
17363 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17364 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17365 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17366 +    noprint  ;
17367 +     var
17368 +       %do i=1 %to &ngcluster;
17369 +         %let gcvarname = GC&i;
17370 +         &gcvarname
17371 +        %end;
17372 +   ;
17373 +   run;
17374 +
17375 +
17376 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
17377 +   data &EM_USER_GSCORECORRPLOT ;
17378 +        set &EM_USER_GSCORECORRPLOT;
17379 +        rename _X_ = X;
17380 +        rename _Y_ = Y;
17381 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17382 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
17383 +   run;
17384 +
17385 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
17386 +
17387 +   data &EM_USER_GSCORETREE;
17388 +        length _NAME_ $32;
17389 +        length _LABEL_ $100;
17390 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
17391 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
17392 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
17393 +        end;else do;
17394 +         _LABEL_ = _NAME_;
17395 +        end;
17396 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
17397 +
17398 +   run;
17399 +
17400 +   quit;
17401 +
17402 +%mend MakeGClusterCorrelation;
17403 +
17404 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
17407 +%macro train;
17409 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
17410 +   %include temp;
17411 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
17412 +   %include temp;
17413 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
17414 +   %include temp;
17415 +   filename temp;
17417 +   %let VARCLUS_MAXNUMOBS = 100000;
17418 +   %let VARCLUS_MAXNUMVAR = 200;
17419 +   %let trainnum = 0;
17420 +   %let error = 0;
17422 +   %if &EM_IMPORT_DATA eq %then %do;
17423 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17424 +       %let  error = 1;
17425 +       %goto endtrain;
17426 +   %end;
17428 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
17429 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17430 +        %let  error = 1;
17431 +        %goto endline;
17432 +    %end;
17434 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17435 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
17436 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
17437 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
17438 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
17439 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
17441 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
17442 +        %if  &_num_input_total < 2 %then %do;
17443 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17444 +            %let error = 2;
17445 +            %goto endtrain;
17446 +        %end;
17447 +   %end;
17448 +   %else %do;
17449 +         %if  &_num_input_interval < 2 %then %do;
17450 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17451 +         %let error = 2;
17452 +         %goto endtrain;
17453 +         %end;
17454 +   %end;
17456 +   %em_checkerror();
17458 +   %if &EMEXCEPTIONSTRING ne %then %do;
17459 +       %goto endtrain;
17460 +   %end;
17462 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
17464 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17465 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17466 +                             outvar=&EM_USER_OUTDUMMY,
17467 +                             outdata=_newtrainds,
17468 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17470 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17471 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
17472 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17473 +                proc datasets lib=work nolist;
17474 +                delete  _newtrainds;
17475 +                run;
17476 +                quit;
17477 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17478 +                %let error = 3;
17479 +               %goto endtrain;
17480 +            %end;
17481 +        %end;
17483 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17484 +             %getNVar(inds=_newtrainds, nvar=_nvar);
17486 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
17487 +                %let trainnum = 2;
17488 +            %end;
17489 +            %else %do;
17490 +                %let trainnum = 1;
17491 +            %end;
17492 +        %end;
17493 +    %end;
17494 +    %else %do;
17496 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17498 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
17500 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17502 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17503 +                  %let error = 3;
17504 +                 %goto endtrain;
17505 +            %end;
17506 +        %end;
17509 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17510 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
17511 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
17512 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
17513 +                %let trainnum = 2;
17514 +            %end;
17515 +            %else %do;
17516 +                %let trainnum = 1;
17517 +            %end;
17518 +        %end;
17520 +   %end;
17522 +    %em_checkerror();
17524 +    %if &EMEXCEPTIONSTRING ne %then %do;
17525 +       %let error = 4;
17526 +       %goto endtrain;
17527 +    %end;
17529 +    %CreateVarclusMeta(trainnum=&trainnum);
17531 +    %if &error > 0 %then  %goto endtrain;
17533 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
17535 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17536 +           %train1;
17537 +       %end;
17538 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17539 +           %train2;
17540 +       %end;
17542 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17543 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17544 +      data _null_;
17545 +         length line $20000;
17546 +         file _out lrecl=20000;
17547 +         fid=fopen("_in",'i',20000,'v');
17548 +         if fid > 0  then do;
17549 +            do while(^fread(fid));
17550 +               rlen = frlen(fid);
17551 +               rc= fget(fid,line,20000);
17552 +               start = length(line)-length(left(line))+1;
17553 +               line=strip(line);
17554 +               if line ne 'delete;' then do;
17555 +                  put @start line;
17556 +               end;
17557 +            end;
17558 +            if fid > 0  then rc=fclose(fid);
17559 +         end;
17560 +      run;
17561 +      filename _in;
17562 +      filename _out;
17564 +   %endtrain:
17567 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17569 +%macro VarClus(indata=,
17570 +               outstat=,
17571 +               outtree=,
17572 +               vars=,
17573 +               freq=,
17574 +               weight=,
17575 +               includeclassvar=
17576 +               );
17578 +   %if &vars eq %then
17579 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17581 +        /*Add by ruzhan, May 28, 2013*/
17582 +        ods graphics on;
17583 +        %let odspath =;
17584 +        data _null_;
17585 +            path = pathname('WORK');
17586 +            call symput('odspath', path);
17587 +        run;
17588 +        ods listing gpath="&odspath";
17589 +        ods output DENDROGRAM=&outtree;
17590 +       proc varclus data = &indata outstat= &outstat
17591 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17592 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17593 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17594 +        /*-----------------------
17595 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17596 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17597 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17598 +       %end;
17599 +       -------------------------*/
17600 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17601 +            maxc = &EM_PROPERTY_MAXCLUS
17602 +       %end;
17604 +       /*------------------------------------------------------------------------------------------------------
17605 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17606 +        ------------------------------------------------------------------------------------------------------*/
17608 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17609 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17610 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17611 +       %end;
17613 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17614 +            proportion = &EM_PROPERTY_PROPORTION
17615 +       %end;
17616 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17617 +               summary
17618 +       %end;
17620 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17621 +           short
17622 +       %end;
17623 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17624 +           corr trace simple
17625 +       %end;
17626 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17627 +          noprint
17628 +       %end;
17629 +        /*Comment out by ruzhan, May 28, 2013*/
17630 +       /*       outtree=&outtree*/
17631 +       ;
17632 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17634 +      %if &includeclassvar eq Y %then %do;
17635 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17636 +          %if &dsid > 0 %then %do;
17637 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17638 +              %do i = 2 %to &nvar;
17639 +                  %let varname = %sysfunc(varname(&dsid, &i));
17640 +                   &varname
17641 +              %end;
17643 +          %end;
17644 +      %end;
17646 +      ;
17647 +      /*------------------------
17648 +      %if &freq ne  %then %do;
17649 +          freq &freq;
17650 +      %end;
17651 +      %if &weight ne  %then %do;
17652 +          weight &weight;
17653 +      %end;
17654 +      ----------------------------*/
17655 +      %if %EM_FREQ ne %then %do;
17656 +           Freq %EM_FREQ;
17657 +      %end;
17658 +      ;
17659 +    run;
17660 +    ods graphics off;
17661 +    %endline:
17662 +    quit;
17663 +%mend VarClus;
17665 +%macro Train1;
17667 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17668 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17669 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17670 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17671 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17672 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17673 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17674 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17675 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17676 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17677 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17678 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17679 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17681 +   /*
17682 +     %let VARCLUS_MAXNUMOBS = 100;
17683 +     %let VARCLUS_MAXNUMVAR = 200;
17684 +   */
17686 +   /* Train
17688 +   %if &EM_IMPORT_DATA eq %then %do;
17689 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17690 +       %goto endtrain1;
17691 +   %end;
17693 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17694 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17695 +        %goto endtrain1;
17696 +   %end;
17697 +   */
17698 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17699 +       /* moved this to pretrain ------------
17701 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17702 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17703 +                             outvar=&EM_USER_OUTDUMMY,
17704 +                             outdata=_newtrainds,
17705 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17707 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17708 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17709 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17710 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17711 +                %goto endtrain;
17712 +            %end;
17713 +        %end;
17715 +        +-------------------------------------*/
17717 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17718 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17719 +          There is no _newtrainds */
17720 +         %VarClus( indata=&EM_IMPORT_DATA,
17721 +                  outstat=&EM_USER_OUTSTAT,
17722 +                  outtree = &EM_USER_OUTTREE,
17723 +                  includeclassvar=N
17724 +                 );
17725 +        %end;
17726 +        %else %do;
17727 +        %VarClus( indata=_newtrainds,
17728 +                  outstat=&EM_USER_OUTSTAT,
17729 +                  outtree = &EM_USER_OUTTREE,
17730 +                  includeclassvar=Y
17731 +                 );
17732 +         proc datasets lib=work nolist;
17733 +              delete  _newtrainds;
17734 +         run;
17735 +         %end;
17736 +    %end;
17737 +    %else %do;
17739 +        /*----- moved this to pretrain ------------
17740 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17741 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17742 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17743 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17744 +                 %goto endtrain;
17745 +            %end;
17746 +        %end;
17747 +        +-------------------------------------*/
17749 +        %VarClus(indata=&EM_IMPORT_DATA,
17750 +                  outstat=&EM_USER_OUTSTAT,
17751 +                  outtree =&EM_USER_OUTTREE,
17752 +                  includeclassvar=N
17753 +               );
17755 +   %end;
17757 +   %em_checkerror();
17759 +   %if &EMEXCEPTIONSTRING ne %then %do;
17760 +       %goto endtrain1;
17761 +   %end;
17762 +    /*
17763 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17764 +    */
17766 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17768 +    %let gid=;
17770 +    /*--- To make the main result table ----------------------*/
17772 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17773 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17774 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17775 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17776 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17777 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17779 +   /* Inter Cluster Correlation Plot ------------------------*/
17781 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17782 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17784 +   /* Create some other data sets for results ----*/
17786 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17787 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17788 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17790 +  /*---- move this to Score action ------------
17791 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17792 +   */
17794 +   /* create score code at training time */
17795 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17796 +   %endtrain1:
17797 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17800 +%macro VarClus2( indata=,
17801 +                 outdata=,
17802 +                 outstat =outstat,
17803 +                 outrsquare=outrsquare,
17804 +                 outtree = outtree,
17805 +                 outclusstruct = outclusstruct,
17806 +                 outcluscorr =outcluscorr,
17807 +                 outcluscorrplot =outcluscorrplot,
17808 +                 outclusrsquare =outclusrsquare,
17809 +                 outstatplot = outstatplot,
17810 +                 outcorr = outcorr,
17811 +                 outcorrplot = outcorrplot,
17812 +                 clusdata=,
17813 +                 outnode=outnode,
17814 +                 outlink=outlink,
17815 +                 ngroup =1  );
17816 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17817 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17818 +              %goto endline;
17819 +         %end;
17821 +        %global numglobalcluster;
17822 +        %let  numglobalcluster = &ngroup;
17823 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17824 +        %do vci =1 %to &ngroup;
17825 +           data tmp_clusdata;
17826 +                set &clusdata;
17827 +                if CLUSTER ne &vci then delete;
17828 +           run;
17829 +           %let outstatds = &outstat.&vci;
17830 +           %let outrsquareds = &outrsquare.&vci;
17831 +           %let outtreeds = &outtree.&vci;
17832 +           %let outclusstuctds = &outclusstruct.&vci;
17833 +           %let outcluscorrds = &outcluscorr.&vci;
17834 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17835 +           %let outclusrsquareds = &outclussquare.&vci;
17836 +           %let outstatplotds = &outstatplot.&vci;
17837 +           %let outcorrds = &outcorr.&vci;
17838 +           %let outcorrplotds = &outcorrplot.&vci;
17839 +           %let outnodeds = &outnode.&vci;
17840 +           %let outlinkds = &outlink.&vci;
17842 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17843 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17844 +           %let emuseroutstat = &EM_USER_&outstatds;
17846 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17847 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17848 +           %let emuserouttree = &EM_USER_&outtreeds;
17850 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17851 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17852 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17854 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17855 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17856 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17858 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17859 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17860 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17862 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17863 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17864 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17866 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17867 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17868 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17870 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17871 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17872 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17874 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17875 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17876 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17878 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17879 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17880 +           %let emuseroutnode = &EM_USER_&outnodeds;
17882 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17883 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17884 +           %let emuseroutlink = &EM_USER_&outlinkds;
17886 +           /*Add by ruzhan, May 28, 2013*/
17887 +           ods graphics on;
17888 +            %let odspath =;
17889 +            data _null_;
17890 +                path = pathname('WORK');
17891 +                call symput('odspath', path);
17892 +            run;
17893 +            ods listing gpath="&odspath";
17895 +           ods output DENDROGRAM=&emuserouttree;
17897 +           proc varclus data=&indata outstat=&emuseroutstat
17898 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17899 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17900 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17901 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17902 +                  maxc=&EM_PROPERTY_MAXCLUS
17903 +           %end;
17905 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17906 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17907 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17908 +            %end;
17910 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17911 +                proportion = &EM_PROPERTY_PROPORTION
17912 +           %end;
17913 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17914 +               summary
17915 +           %end;
17916 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17917 +               short
17918 +           %end;
17919 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17920 +               corr trace simple
17921 +           %end;
17922 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17923 +               noprint
17924 +           %end;
17925 +            /*Comment out by ruzhan, May 28, 2013*/
17926 +              /*outtree=&emuserouttree*/
17927 +           ;
17928 +           var
17929 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17930 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17931 +                %do %while(^%sysfunc(fetch(&dsid)));
17932 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17933 +                    &_varname
17934 +                %end;
17935 +            %let dsid = %sysfunc(close(&dsid));
17936 +           ;
17937 +           %if %EM_FREQ ne %then %do;
17938 +           Freq %EM_FREQ;
17939 +           %end;
17940 +           run;
17941 +            ods graphics off;
17942 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17944 +            %let gid=&vci;
17945 +            /*--- To make the main result table ----------------------*/
17946 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17947 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17948 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17949 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17950 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17951 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17953 +            /* Inter Cluster Correlation Plot ------------------------*/
17955 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17956 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17958 +           /* Create some other data sets for results ---------------*/
17960 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17961 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17962 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17964 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17966 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17968 +           %if &vci = 1 %then %do;
17969 +           data &EM_USER_OUTRSQUARE;
17970 +                set &emuseroutrsquare;
17971 +           run;
17972 +           %end;
17973 +           %else %do;
17974 +           data &EM_USER_OUTRSQUARE;
17975 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17976 +           run;
17977 +           %end;
17978 +           quit;
17979 +       %end;
17981 +       /*---- move this to Score action ------------
17982 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17983 +       */
17985 +       /* Make Score Gcluster component & correlation  */
17986 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
17988 +       quit;
17989 +       %endline:
17990 +%mend VarClus2;
17993 +%macro Train2;
17995 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17996 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17997 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17998 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17999 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
18000 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
18001 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
18002 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
18003 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
18004 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
18005 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
18006 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
18007 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
18008 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
18009 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
18010 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
18011 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
18012 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
18016 +    /* Train */
18018 +   /* moved to pretrain ------------
18020 +   %if &EM_IMPORT_DATA eq %then %do;
18021 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
18022 +       %goto endtrain2;
18023 +   %end;
18025 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
18026 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
18027 +        %goto endtrain2;
18028 +   %end;
18029 +   +-------------------------------------------*/
18031 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
18034 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18036 +        /*----- moved to pretrain ------------
18038 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
18039 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
18040 +                             outvar=&EM_USER_OUTDUMMY,
18041 +                             outdata=_newtrainds,
18042 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
18043 +                              ndummyvars=_ndummyvars
18044 +                            );
18046 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
18047 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
18048 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
18049 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
18050 +                %goto endtrain;
18051 +            %end;
18052 +        %end;
18054 +        +---------------------------------------*/
18055 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
18056 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
18057 +          There is no _newtrainds */
18058 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
18059 +                             outstat=&EM_USER_GOUTSTAT,
18060 +                             corrmatrix=Y,
18061 +                             outcorr=&EM_USER_GOUTCORR,
18062 +                             includeclassvar=N,
18063 +                             freq =%EM_FREQ
18064 +                          );
18065 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
18067 +        %end;
18068 +        %else %do;
18069 +         %MakeCorrelation(   indata=_newtrainds,
18070 +                             outstat=&EM_USER_GOUTSTAT,
18071 +                             corrmatrix=Y,
18072 +                             outcorr=&EM_USER_GOUTCORR,
18073 +                             includeclassvar=Y,
18074 +                             freq =%EM_FREQ
18075 +                          );
18076 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
18078 +        %end;
18080 +    %end;
18081 +    %else %do;
18083 +        /* moved to pretrain -------------------
18085 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
18086 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
18087 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
18088 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
18089 +                %goto endtrain;
18090 +            %end;
18091 +        %end;
18092 +         +------------------------------------------*/
18094 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
18095 +                          outstat=&EM_USER_GOUTSTAT,
18096 +                          corrmatrix=Y,
18097 +                          outcorr=&EM_USER_GOUTCORR,
18098 +                          includeclassvar=N,
18099 +                          freq =%EM_FREQ
18100 +                          );
18101 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
18102 +    %end;
18104 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
18105 +                                rsquare = N
18106 +                                );
18107 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
18108 +                      ncluster=&_ngc,
18109 +                      method = Ward,
18110 +                      outtree =&EM_USER_GOUTTREE,
18111 +                      idvar = _VAR_,
18112 +                      outdata=&EM_USER_GOUTGROUP,
18113 +                      rescore = N,
18114 +                      newncluster=_newnclus
18115 +                        );
18117 +   /* store the number of global cluster */
18119 +   data &EM_USER_VARCLUSMETA;
18120 +        set &EM_USER_VARCLUSMETA;
18121 +        NGCluster = &_newnclus;
18122 +   run;
18124 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
18126 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18127 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
18128 +            %VarClus2(indata=&EM_IMPORT_DATA,
18129 +                 clusdata=&EM_USER_GOUTGROUP,
18130 +                 ngroup=&_newnclus);
18131 +         %end;
18132 +         %else %do;
18133 +             %VarClus2(indata=_newtrainds,
18134 +                 clusdata=&EM_USER_GOUTGROUP,
18135 +                 ngroup=&_newnclus);
18137 +         %end;
18139 +   %end;
18140 +   %else %do;
18141 +       %VarClus2(indata=&EM_IMPORT_DATA,
18142 +                 clusdata=&EM_USER_GOUTGROUP,
18143 +                 ngroup=&_newnclus);
18144 +   %end;
18146 +   %em_checkerror();
18147 +   %if &EMEXCEPTIONSTRING ne %then %do;
18148 +       %put &em_codebar;
18149 +       %put Error: Variable clustering failed.;
18150 +       %put &em_codebar;
18151 +       %goto endtrain2;
18152 +   %end;
18153 +   /*
18154 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
18155 +   */
18156 +   %endtrain2:
18157 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
18159 +%macro em_copyfile(infref=, outfref=, append=N);
18160 +
18161 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
18162 +
18163 +       %let omode =;
18164 +       %if &append=Y %then
18165 +           %let omode = MOD;
18166 +       data _null_;
18167 +          length line $20000;
18168 +          file &outfref &omode lrecl=20000;
18169 +          fid=fopen("&infref",'i',20000,'v');
18170 +          if fid > 0  then do;
18171 +             do while(^fread(fid));
18172 +                rlen = frlen(fid);
18173 +                rc= fget(fid,line,20000);
18174 +                start = length(line)-length(left(line))+1;
18175 +                line=strip(line);
18176 +                put @start line;
18177 +             end;
18178 +             if fid > 0  then rc=fclose(fid);
18179 +          end;
18180 +       run;
18181 +
18182 +   %end;
18183 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
18184  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK._DMDBDAT has 32235 observations and 4 variables.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           1.21 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: This is the PROC statement.
NOTE: The training set WORK._DMDBDAT.DATA has 4 variable(s).
NOTE: The PROC statement has finished with return code 0.
NOTE: This is the INPUT statement.
NOTE: 4 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code 0.
NOTE: This is the MAKE statement.
 
NOTE: 4 input variable(s).
NOTE: Number of cases=32235
NOTE: Sum of frequencies=32235
NOTE: Sum of weights=32235
NOTE: VARDEF=DF
NOTE: Maximum number of categories=4
NOTE: The total number of variables is 4 with dimensionality 10.
NOTE: The data set EMWS3.VARCLUS_OUTDUMMY has 3 observations and 11 variables.
NOTE: The MAKE statement has finished with return code 0.
NOTE: This is the SCORE statement.
NOTE: The data set WORK._NEWTRAINDS has 32235 observations and 109 variables.
NOTE: The SCORE statement has finished with return code 0.
NOTE: This is the CODE statement.
NOTE: External file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas opened.
NOTE: The CODE statement has finished with return code 0.
 
 
NOTE: PROCEDURE DMZIP used (Total process time):
      real time           0.26 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The file WORK._DMDBCAT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._DMDBDAT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:167
NOTE: There were 32235 observations read from the data set WORK._NEWTRAINDS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:226
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
18185  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set EMWS3.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS3.VARCLUS_OUTTREE has 162 observations and 3 variables.
NOTE: The data set EMWS3.VARCLUS_OUTSTAT has 2164 observations and 99 variables.
NOTE: The PROCEDURE VARCLUS printed pages 2-7.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           2.79 seconds
      cpu time            0.79 seconds
 
 
 
NOTE: Deleting WORK._NEWTRAINDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
18186  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 2164 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 2164 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORR has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORR has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORR has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 35 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1225 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1225 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1225 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1225 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1190 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1190 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 2164 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 98 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 2164 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSSTRUCT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSSTRUCT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 35 observations and 97 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3360 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3360 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3360 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3360 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3264 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3264 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3264 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 96 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 96 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._OWNRSQ.
NOTE: There were 96 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 96 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 96 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.19 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 35 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: There were 35 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 131 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      50364:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      50364:84
NOTE: There were 2164 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 35 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 35 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 1225 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.20 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1225 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 1225 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS3.VARCLUS_OUTSTATPLOT has 96 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.13 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS3.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTSTATPLOT has 96 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS3.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTSTATPLOT has 96 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.19 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS3.VARCLUS_OUTCORR has 96 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS3.VARCLUS_OUTCORR.
NOTE: The data set EMWS3.VARCLUS_OUTCORR has 96 observations and 97 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.21 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 96 observations read from the data set EMWS3.VARCLUS_OUTCORR.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 9216 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.21 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 9216 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.38 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 9216 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 9216 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 9216 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.39 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 9216 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 9216 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 9216 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.44 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 9216 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 9216 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.47 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTLINK has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTNODE has 131 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2164 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set EMWS3.VARCLUS_OUTSTATSCORE has 37 observations and 97 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _FILE_ is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2403,
      Last Modified=25Apr2020:11:48:16,
      Create Time=25Apr2020:11:48:16
 
NOTE: 136 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.46 seconds
      cpu time            0.39 seconds
 
 
 
NOTE: The file _OUT is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=25Apr2020:11:48:26,
      Create Time=25Apr2020:11:48:26
 
NOTE: 245 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
18187  *------------------------------------------------------------*;
18188  * End TRAIN: VarClus;
18189  *------------------------------------------------------------*;
18190
 
18191  *------------------------------------------------------------*;
18192  * Close any missing semi colons;
18193  *------------------------------------------------------------*;
18194  ;
18195  ;
18196  ;
18197  ;
18198  quit;
18199  *------------------------------------------------------------*;
18200  * Close any unbalanced quotes;
18201  *------------------------------------------------------------*;
18202  /*; *"; *'; */
18203  ;
18204  run;
18205  quit;
18206  /* Reset EM Options */
18207  options formchar="|----|+|---+=|-/\<>*";
18208  options nocenter ls=256 ps=10000;
18209  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                April 25, 2020
Time:                11:48:28
*------------------------------------------------------------*
18311  %let EMEXCEPTIONSTRING=;
18312  *------------------------------------------------------------*;
18313  * SCORE: VarClus;
18314  *------------------------------------------------------------*;
18315  %let EM_ACTION = SCORE;
18316  %let syscc = 0;
18317
18318  %macro main;
18319
18320     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
18321     %include temp;
18322     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
18323     %include temp;
18324     filename temp;
18325
18326    %SetProperties;
18327
18328     %if %upcase(&EM_ACTION) = CREATE %then %do;
18329         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
18330         %include temp;
18331         filename temp;
18332         %create;
18333     %end;
18334     %else
18335     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18336          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
18337             %include temp;
18338             filename temp;
18339             %train;
18340     %end;
18341     %else
18342     %if %upcase(&EM_ACTION) = SCORE %then %do;
18343             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
18344             %include temp;
18345             filename temp;
18346             %score;
18347     %end;
18348     %else
18349     %if %upcase(&EM_ACTION) = REPORT %then %do;
18350             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
18351             %include temp;
18352             filename temp;
18353             %report;
18354     %end;
18355     /*
18356     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
18357         %put 'OPENING TABLE';
18358     %end;
18359     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
18360         %put 'CLOSE TABLE';
18361     %end;
18362     */
18363  %mend main;
18364  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
18365 +
18366 +/* Initialize property macro variables */
18367 +%macro SetProperties;
18368 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
18369 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
18370 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
18371 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
18372 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
18373 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
18374 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
18375 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
18376 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
18377 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
18378 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
18379 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
18380 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
18381 +
18382 +%mend SetProperties;
18383 +
18384 +%Macro MakeDummyVariables(indata=,
18385 +                          outvar=,
18386 +                          outdata=,
18387 +                          fileref=,
18388 +                          recreatecmeta=N, /* optional */
18389 +                          incmeta=,     /* optional */
18390 +                          outcmeta=,    /* optional */
18391 +                          ndummyvars=_ndummyvars
18392 +                          );
18393 +    %global &ndummyvars;
18394 +
18395 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
18396 +       class
18397 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
18398 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
18399 +    ;
18400 +    run;
18401 +    %let &ndummyvars = 0;
18402 +    data _null_;
18403 +    %let dsid = %sysfunc(open(work._classout));
18404 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
18405 +    %let dsid = %sysfunc(close(&dsid));
18406 +    run;
18407 +
18408 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
18409 +       input
18410 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
18411 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
18412 +        / level=nominal stdize=no;
18413 +       make outvar = &outvar;
18414 +       score data = &indata out =&outdata;
18415 +       code  file=  "&fileref";
18416 +    run;
18417 +    %if &recreatecmeta eq Y %then %do;
18418 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
18419 +    data _tmpds;
18420 +        set _tmpds;
18421 +           ROLE = 'INPUT';
18422 +           LEVEL = 'INTERVAL';
18423 +           CREATOR='DMZIP';
18424 +           if NAME = '_TYPE_' then delete;
18425 +    run;
18426 +    data &outcmeta;
18427 +         set &incmeta _tmpds;
18428 +    run;
18429 +    %end;
18430 +    proc datasets lib=work nolist;
18431 +      delete  _dmdbdat _dmdbcat _classout
18432 +    %if &recreatecmeta eq Y %then %do;
18433 +    _tmpds
18434 +    %end;
18435 +    ;
18436 +    quit;
18437 +%Mend MakeDummyVariables;
18438 +
18439 +/*--- Determine Optimal Number of Cluster ----
18440 +%macro FindClusNum(statds=, groupds=, minvariation=);
18441 +   %global optnclus;
18442 +   data varclus_tmp(drop=_NAME_);
18443 +      set &statDs;
18444 +      where _type_ ='PROPOR';
18445 +   run;
18446 +   proc sort data=varclus_tmp;
18447 +      by _NCL_;
18448 +   run;
18449 +   proc transpose data=varclus_tmp out=varclus_tmp;
18450 +      by _NCL_;
18451 +      var %EM_INTERVAL_INPUT
18452 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18453 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
18454 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
18455 +          %do i = 2 %to &nvar;
18456 +          %let varname = %sysfunc(varname(&dsid, &i));
18457 +          &varname
18458 +          %end;
18459 +      %end;
18460 +   ;
18461 +   run;
18462 +
18463 +   %if &minVariation eq %then %do;
18464 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
18465 +   %end;
18466 +   %if ^(0<&minVariation<100) %then %do;
18467 +       %let minVariation = 90;
18468 +   %end;
18469 +
18470 +   data _null_;
18471 +      set varclus_tmp end=eof;
18472 +      by _NCL_;
18473 +      retain flag 0;
18474 +      if first._ncl_ then flag=0;
18475 +      if .<col1 < &minVariation then flag=1;
18476 +      if last._ncl_ and ^flag then do;
18477 +         call symput('OPTNCL', _ncl_);
18478 +         stop;
18479 +      end;
18480 +     if eof then call symput('OPTNCL', _ncl_);
18481 +   run;
18482 +
18483 +   %let optnclus = &OPTNCL;
18484 +
18485 +   data varclus_tmp(drop=_NCL_ _NAME_);
18486 +      set &statDs;
18487 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
18488 +   run;
18489 +   proc sort data=varclus_tmp;
18490 +      by _TYPE_;
18491 +   run;
18492 +   proc transpose data=varclus_tmp out=varclus_tmp;
18493 +      by _TYPE_;
18494 +   run;
18495 +   proc sort data=varclus_tmp;
18496 +      by _name_ _type_;
18497 +   run;
18498 +
18499 +  proc transpose data=varclus_tmp out=&groupds;
18500 +      by _NAME_;
18501 +   run;
18502 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
18503 +      by Cluster descending Rsquare;
18504 +      where Cluster ne 0;
18505 +   run;
18506 +   proc datasets lib=work nolist mt=(DATA VIEW);
18507 +      delete varclus_tmp;
18508 +   run;
18509 +   quit;
18510 +%mend findClusNum;
18511 +*/
18512 +
18513 +%macro getNclusfromTrain(inoutstat=, nc=);
18514 +%global &nc;
18515 +data _null_;
18516 +    set &inoutstat end=eof;
18517 +    if eof then do;
18518 +    call symput("&nc", _ncl_);
18519 +    end;
18520 +run;
18521 +%mend  getNclusfromTrain;
18522 +
18523 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
18524 +
18525 +     *--- Build Code to Modify Metadata ---*;
18526 +     filename X "&deltacodefile";
18527 +     data _null_;
18528 +        FILE X;
18529 +        set &groupds end=eof;
18530 +        /*by Cluster;*/
18531 +         if _N_=1 then do;
18532 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18533 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18534 +           %end;
18535 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18536 +           put "if upcase(strip(NAME)) in (";
18537 +        end;
18538 +        if Strip(upcase(Selected)) eq 'YES' then do;
18539 +           string = '"'!!trim(left(VARIABLE))!!'"';
18540 +           put string;
18541 +        end;
18542 +        if eof then do;
18543 +           put ') then ROLE="INPUT";';
18544 +           put 'else ROLE="REJECTED";';
18545 +           put 'end;';
18546 +
18547 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18548 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18549 +           %end;
18550 +        end;
18551 +     run;
18552 +     quit;
18553 +
18554 +     filename X;
18555 +
18556 +     quit;
18557 +%mend MakeDeltaCode;
18558 +
18559 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18560 +    %if ^%sysfunc(exist(&statds)) %then %do;
18561 +         %goto doendc;
18562 +    %end;
18563 +
18564 +    data &corrds(drop=_TYPE_ _NCL_) ;
18565 +       set &statds;
18566 +       where _type_ eq 'CORR' ;
18567 +    run ;
18568 +    proc sort data=&corrds;
18569 +       by _NAME_ ;
18570 +    run ;
18571 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18572 +      BY _NAME_ ;
18573 +    run ;
18574 +    data &corrplotds;
18575 +       length _Y_ $100;
18576 +       set &corrplotDs;
18577 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18578 +    run ;
18579 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18580 +       set &corrplotds;
18581 +       where _LABEL_ ne '' ;
18582 +       keep _TMP_ _LABEL_ ;
18583 +    run ;
18584 +    data _null_;
18585 +       nobs=0;
18586 +       dsid = open('varclus_match');
18587 +       if dsid then do;
18588 +          nobs = attrn(dsid, 'NOBS');
18589 +          dsid = close(dsid);
18590 +       end;
18591 +       call symput ('CORR_NOBS', nobs);
18592 +    run;
18593 +    %if &corr_nobs %then %do;
18594 +        proc sort data=varclus_match;
18595 +           by _name_;
18596 +        run ;
18597 +        proc sort data=&corrplotds;
18598 +           by _name_;
18599 +        run ;
18600 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18601 +           merge varclus_match &corrplotds;
18602 +           by _NAME_ ;
18603 +           if _X_ eq '' then _X_=_NAME_ ;
18604 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18605 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18606 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18607 +
18608 +       run ;
18609 +    %end;
18610 +    %else %do;
18611 +        proc sort data=&corrplotds;
18612 +           by _name_;
18613 +        run ;
18614 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18615 +           set &corrplotds;
18616 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18617 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18618 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18619 +
18620 +        run ;
18621 +    %end;
18622 +    proc sort data=&corrplotds;
18623 +       by _X_ _Y_;
18624 +    run ;
18625 +    proc datasets lib=work nolist mt=(DATA VIEW);
18626 +       delete varclus_match;
18627 +    run;
18628 +    quit;
18629 +
18630 +%doendc:
18631 +
18632 +%mend MakeVarClusCorrData;
18633 +
18634 +%macro MakeStatPlotData(statds= , outstatplotds=);
18635 +   %if %sysfunc(exist(&statds)) %then %do;
18636 +
18637 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18638 +          set &statDs;
18639 +          where _type_ in('MEAN', 'STD', 'N');
18640 +       run ;
18641 +       proc transpose data=varclus_tmp out=&outstatplotds;
18642 +          id _TYPE_ ;
18643 +       run ;
18644 +       data &outstatplotds;
18645 +          set &outstatplotds(obs=1000);
18646 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18647 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18648 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18649 +          else SCALEDSTD= STD ;
18650 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18651 +       run ;
18652 +       proc sort data=&outstatplotds;
18653 +          by descending SCALEDSTD ;
18654 +       run ;
18655 +       proc datasets lib=work nolist mt=(DATA VIEW);
18656 +          delete varclus_tmp;
18657 +       run;
18658 +       quit;
18659 +    %end;
18660 +
18661 +%mend MakeStatPlotData;
18662 +
18663 +
18664 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18665 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18666 +    data &EM_USER_OUTSTATSCORE;
18667 +          set &indata;
18668 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18669 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18670 +          if _TYPE_ = 'STD' then _NAME_='STD';
18671 +          DROP _TYPE_ _NCL_;
18672 +     run;
18673 +
18674 +     filename _file_  "&fileRef";
18675 +
18676 +     data _null_;
18677 +        FILE _file_ MOD;
18678 +        put ' ';
18679 +        put '/*-------------------------------------------------*/';
18680 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18681 +        put '/*-------------------------------------------------*/';
18682 +        put ' ';
18683 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18684 +
18685 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18686 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18687 +
18688 +        %let k = 1;
18689 +        %do %while(^%sysfunc(fetch(&dsid)));
18690 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18691 +                %if &k > 2 %then %do;
18692 +                 %let cn = %eval(&k-2);
18693 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18694 +                %end;
18695 +                %let k = %eval(&k+1);
18696 +        %end;
18697 +
18698 +        %let rc = %sysfunc(rewind(&dsid));
18699 +
18700 +        %do i= 2 %to &nvar;
18701 +            %let _varname =  %sysfunc(varname(&dsid, &i));
18702 +            %do %while(^%sysfunc(fetch(&dsid)));
18703 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18704 +                %if &_name = MEAN %then
18705 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18706 +                %else %if &_name = STD %then
18707 +                %let _std = %sysfunc(getvarn(&dsid, &i));
18708 +                %else %do;
18709 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18710 +                      %let abscoeff = %sysfunc(abs(&coeff));
18711 +                          %if &abscoeff >  0 %then %do;
18712 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18713 +                           %end;
18714 +                 %end;
18715 +             %end;
18716 +             %let rc = %sysfunc(rewind(&dsid));
18717 +         %end;
18718 +
18719 +        %let dsid= %sysfunc(close(&dsid));
18720 +       run;
18721 +%mend CreateScoreCode;
18722 +
18723 +
18724 +
18725 +/*----------------------------------------------------------
18726 +    Instead of using %MakeRSquareData,
18727 +    %MakeVarClusResultTable at macro2.source is used
18728 + +----------------------------------------------------------*/
18729 +
18730 +
18731 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18732 +
18733 +/* modifying  from ods rsquare = data */
18734 +
18735 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18736 +    Length Cluster $16;
18737 +    length Variable $32;
18738 +    Length VariableLabel $64;
18739 +    set &indata; retain CurrentCluster;
18740 +    if NumberOfClusters ^= &ncluster then delete;
18741 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18742 +    CurrentCluster = Cluster;
18743 +   run;
18744 +proc sort data =&outdata ;
18745 +     by Cluster RsquareRatio;
18746 +run;
18747 +data _tmprsq(drop=index);
18748 +     set &outdata; by Cluster;
18749 +     if first.Cluster then do;
18750 +     index = strip(scan(Cluster,2 ));
18751 +     Variable = "Clus"||index;
18752 +     VariableLabel = "Cluster Component "||index;
18753 +     OwnCluster = 1;
18754 +     NextClosest = .;
18755 +     RsquareRatio = 0;
18756 +     output;
18757 +     end;
18758 +run;
18759 +
18760 +proc sort data = _tmprsq ;
18761 +     by Cluster RsquareRatio;
18762 +run;
18763 +data &outdata;
18764 +     set &outdata _tmprsq;
18765 +by Cluster;
18766 +run;
18767 +
18768 +
18769 +/* Just create the Selected variable with all YES */
18770 +
18771 +data &outdata;
18772 +    set &outdata; by cluster;
18773 +    length Selected $8;
18774 +    Selected = 'YES';
18775 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18776 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18777 +    rename OwnCluster = RSqWithClusterComp;
18778 +    rename NextClosest = RSqWithNextClusComp;
18779 +run;
18780 +
18781 +
18782 +/* Selected = Y/N will be done %score section -----
18783 +
18784 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18785 +data &outdata;
18786 +    set &outdata; by cluster;
18787 +    length Selected $8;
18788 +    if first.Cluster then Selected = 'YES';
18789 +    else Selected = 'NO';
18790 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18791 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18792 +    rename OwnCluster = RSqWithClusterComp;
18793 +    rename NextClosest = RSqWithNextClusComp;
18794 +run;
18795 +%end;
18796 +%else %do;
18797 +data &outdata;
18798 +    set &outdata; by cluster;
18799 +    if last.Cluster then Selected = 'YES';
18800 +    else Selected = 'NO';
18801 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18802 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18803 +    rename OwnCluster = RSqWithClusterComp;
18804 +    rename NextClosest = RSqWithNextClusComp;
18805 +run;
18806 +%end;
18807 +---------------------------------------------------------------*/
18808 +
18809 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18810 +/* to calculate NextClosestClusRsq */
18811 +proc transpose data = &inClusRSquare  out=_clusRsq;
18812 +      by cluster;
18813 +      run;
18814 +data _clusRsq;
18815 +     set _clusRsq;
18816 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18817 +run;
18818 +
18819 +proc sort data=_clusRsq;
18820 +    by cluster col1;
18821 +    run;
18822 +data _clusRsq(drop=_NAME_ _LABEL_);
18823 +     set _clusRsq; by cluster;
18824 +     if last.Cluster then output;
18825 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18826 +     rename COL1 = RSqWithNextClusComp;
18827 +     rename Cluster = Variable;
18828 +     label  Cluster = "Variable";
18829 +run;
18830 +
18831 +proc sort data =&outdata;
18832 +     by Variable;
18833 +run;
18834 +data &outdata;
18835 +    merge &outdata _clusRsq;
18836 +    by Variable;
18837 +run;
18838 +proc sort data =&outdata;
18839 +by Cluster  RsquareRatio;
18840 +run;
18841 +quit;
18842 +%end;
18843 +
18844 +proc datasets lib = work nolist;
18845 +     delete _tmprsq _clusRsq;
18846 +     run;
18847 +quit;
18848 +
18849 +%mend MakeRSquareData;
18850 +
18851 +
18852 +/*-------------------------------------------------------------------------*/
18853 +
18854 +
18855 +
18856 +%macro ModifyCorr(indata=,
18857 +                  outdata=,
18858 +                  rsquare = Y
18859 +                  );
18860 +    data corr_tmp;
18861 +        set &indata;
18862 +    run;
18863 +     proc sql;
18864 +           update &indata
18865 +           set
18866 +     %let dsid = %sysfunc(open(work.corr_tmp));
18867 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18868 +          %do i = 4 %to &nvar;
18869 +          %let _name = %sysfunc(varname(&dsid, &i));
18870 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18871 +            %else  %let _name_md = &_name;
18872 +            %if &i < &nvar %then %do;
18873 +               &_name = 1- &_name_md ,
18874 +            %end;
18875 +            %else %do;
18876 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18877 +            %end;
18878 +          %end;
18879 +      %let dsid= %sysfunc(close(&dsid));
18880 +
18881 +      select * from &indata;
18882 +      run;
18883 +      proc datasets lib = work nolist;
18884 +           delete corr_tmp;
18885 +      run;
18886 +      quit;
18887 +
18888 + %mend ModifyCorr;
18889 +
18890 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18891 +    data &outdata(drop= _NCL_  _TYPE_);
18892 +       set &indata;
18893 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18894 +       rename _NAME_ = Cluster;
18895 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18896 +    run;
18897 +    %if &RSquare eq Y %then %do;
18898 +     data corr_tmp;
18899 +        set &outdata;
18900 +     run;
18901 +
18902 +     data &outdata(drop=i);
18903 +          set &outdata;
18904 +          %let dsid = %sysfunc(open(work.corr_tmp));
18905 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18906 +          %do i = 2 %to &nvar;
18907 +            %let _name = %sysfunc(varname(&dsid, &i));
18908 +            %let _name_md = &_name.**2;
18909 +                &_name = &_name_md;
18910 +          %end;
18911 +      %let dsid= %sysfunc(close(&dsid));
18912 +      run;
18913 +      proc datasets lib = work nolist;
18914 +           delete corr_tmp;
18915 +      run;
18916 +
18917 +    %end;
18918 +     quit;
18919 +%mend MakeClusStructCorrData;
18920 +
18921 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18922 +    data &outdata(drop= _NCL_  _TYPE_);
18923 +       set &indata;
18924 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18925 +       rename _NAME_ = Cluster;
18926 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18927 +    run;
18928 +    data corr_tmp;
18929 +        set &outdata;
18930 +    run;
18931 +
18932 +    %let dsid = %sysfunc(open(work.corr_tmp));
18933 +    %let nclus2= %eval(&ncluster+1);
18934 +    data &outdata;
18935 +         set &outdata;
18936 +          %do i = 2 %to &nclus2;
18937 +          %let i_1 = %eval(&i-1);
18938 +            %let _name = %sysfunc(varname(&dsid, &i));
18939 +            %let _newName = Clus&i_1;
18940 +                rename &_name = &_newName; ;
18941 +                *label &_name ="Cluster &i_1";
18942 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18943 +          %end;
18944 +          keep Cluster
18945 +          %do i = 2 %to &nclus2;
18946 +                %let _name = %sysfunc(varname(&dsid, &i));
18947 +                &_name
18948 +          %end;
18949 +          ;
18950 +    %let dsid= %sysfunc(close(&dsid));
18951 +     run;
18952 +     quit;
18953 +
18954 +    %if &RSquare eq Y %then %do;
18955 +
18956 +       data corr_tmp;
18957 +        set &outdata;
18958 +     run;
18959 +
18960 +     data &outdata(drop=i);
18961 +          set &outdata;
18962 +          %let dsid = %sysfunc(open(work.corr_tmp));
18963 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18964 +          %do i = 2 %to &nvar;
18965 +            %let _name = %sysfunc(varname(&dsid, &i));
18966 +            %let _name_md = &_name.**2;
18967 +                &_name = &_name_md;
18968 +          %end;
18969 +      %let dsid= %sysfunc(close(&dsid));
18970 +      run;
18971 +    %end;
18972 +
18973 +    %if &makeplotds eq Y %then %do;
18974 +     proc transpose data = &outdata
18975 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18976 +          by cluster;
18977 +     run;
18978 +     data &plotds;
18979 +          set  &plotds;
18980 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18981 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18982 +     run;
18983 +     %end;
18984 +     proc datasets lib = work nolist;
18985 +           delete corr_tmp;
18986 +     run;
18987 +     quit;
18988 +%mend MakeInterClusCorrData;
18989 +
18990 +
18991 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18992 +
18993 +data &outlink(drop = Selected);
18994 +     set &indata;
18995 +     LINKID = _N_;
18996 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18997 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18998 +run;
18999 +data &outnode(keep=NODEID TYPE LABEL);
19000 +    set &indata;
19001 +    length TYPE $16;
19002 +    rename Variable = NODEID;
19003 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
19004 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
19005 +    then  TYPE = "CLUSTER";
19006 +    else  TYPE="VARIABLE";
19007 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
19008 +run;
19009 +quit;
19010 +%mend MakeClusConstellData;
19011 +
19012 +
19013 +
19014 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
19015 +
19016 +data &outlink(drop = Selected);
19017 +     set &indata;
19018 +     LINKID = _N_;
19019 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
19020 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
19021 +run;
19022 +data &outnode(keep=NODEID TYPE LABEL);
19023 +    set &indata;
19024 +    length TYPE $16;
19025 +    rename Variable = NODEID;
19026 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
19027 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
19028 +    then  TYPE = "CLUSTER";
19029 +    else  TYPE="VARIABLE";
19030 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
19031 +run;
19032 +quit;
19033 +%mend MakeClusConstellData;
19034 +
19035 +
19036 +/*--- This will work only when inds is not a view data -------
19037 +
19038 +%macro getNVarNObs(inds=, nvar=, nobs=);
19039 +
19040 +    %global &nvar;
19041 +    %global &nobs;
19042 +    data _null_;
19043 +         dsid = open("&inds");
19044 +         nv = attrn(dsid, 'NVAR');
19045 +         no = attrn(dsid, 'NOBS');
19046 +         dsid = close(dsid);
19047 +         call symput("&nvar", nv);
19048 +         call symput("&nobs", no);
19049 +    run;
19050 +    quit;
19051 +%mend  getNVarNObs;
19052 +
19053 ++---------------------------------------------------------------*/
19054 +
19055 +
19056 +%macro getNVar(inds=, nvar=);
19057 +    %global &nvar;
19058 +    data _null_;
19059 +         dsid = open("&inds");
19060 +         nv = attrn(dsid, 'NVAR');
19061 +         dsid = close(dsid);
19062 +         call symput("&nvar", nv);
19063 +    run;
19064 +    quit;
19065 +%mend  getNVar;
19066 +
19067 +
19068 +
19069 +%macro getNObs(inds=, nobs=);
19070 +    %global &nobs;
19071 +    data _null_;
19072 +        set &inds end=eof;
19073 +        if eof then call symput("&nobs", _N_);
19074 +    run;
19075 +    quit;
19076 +%mend  getNObs;
19077 +
19078 +%Macro CreateVarclusMeta(trainnum=);
19079 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
19080 +    data &EM_USER_VARCLUSMETA;
19081 +         length TrainNum 8.;
19082 +         length NewTrain $8;
19083 +         length NGCluster 8.;
19084 +         length ExportedComp $16;
19085 +         length HideVariable $8;
19086 +         TrainNum = &trainnum;
19087 +         NewTrain = "Y";
19088 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19089 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19090 +         NGCluster = 0; /* zero means no twostage */
19091 +   run;
19092 +   quit;
19093 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
19094  +
19095  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
19096  +    data &outdata(drop= _NCL_  _TYPE_);
19097  +       set &indata;
19098  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
19099  +       %if &globalclusid ne %then %do;
19100  +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
19101  +       rename _NAME_ = Cluster;
19102  +       %end;
19103  +       %else %do;
19104  +        _NAME_ = upcase(_NAME_);
19105  +       rename _NAME_ = Cluster;
19106  +       %end;
19107  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
19108  +    run;
19109  +    data corr_tmp;
19110  +        set &outdata;
19111  +    run;
19112  +
19113  +    %let dsid = %sysfunc(open(work.corr_tmp));
19114  +    %let nclus2= %eval(&ncluster+1);
19115  +    data &outdata;
19116  +         set &outdata;
19117  +          %do i = 2 %to &nclus2;
19118  +          %let i_1 = %eval(&i-1);
19119  +            %let _name = %sysfunc(varname(&dsid, &i));
19120  +            %if &globalclusid ne %then
19121  +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
19122  +                     rename &_name = &_newName;
19123  +                     *label &_name ="GC &globalclusid : Cluster &i_1";
19124  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
19125  +                %end;
19126  +            %else
19127  +                %do; %let _newName = CLUS&i_1;
19128  +                     rename &_name = &_newName;
19129  +                     *label &_name ="Cluster &i_1";
19130  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
19131  +                %end;
19132  +          %end;
19133  +          keep Cluster
19134  +          %do i = 2 %to &nclus2;
19135  +                %let _name = %sysfunc(varname(&dsid, &i));
19136  +                &_name
19137  +          %end;
19138  +          ;
19139  +    %let dsid= %sysfunc(close(&dsid));
19140  +     run;
19141  +     quit;
19142  +
19143  +    %if &RSquare eq Y %then %do;
19144  +
19145  +       data corr_tmp;
19146  +        set &outdata;
19147  +     run;
19148  +
19149  +     data &outdata;
19150  +          set &outdata;
19151  +          %let dsid = %sysfunc(open(work.corr_tmp));
19152  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19153  +          %do i = 2 %to &nvar;
19154  +            %let _name = %sysfunc(varname(&dsid, &i));
19155  +            %let _name_md = &_name.**2;
19156  +                &_name = &_name_md;
19157  +          %end;
19158  +      %let dsid= %sysfunc(close(&dsid));
19159  +      run;
19160  +    %end;
19161  +
19162  +    %if &makeplotds eq Y %then %do;
19163  +     proc transpose data = &outdata
19164  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
19165  +          by cluster;
19166  +     run;
19167  +     data &plotds;
19168  +          set  &plotds;
19169  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
19170  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
19171  +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
19172  +     run;
19173  +     %end;
19174  +     proc datasets lib = work nolist;
19175  +           delete corr_tmp;
19176  +     run;
19177  +     quit;
19178  +%mend MakeInterClusCorrData;
19179  +
19180  +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
19181  +    data _tmpds(drop= _NCL_);
19182  +       set &indata;
19183  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
19184  +       %if &globalclusid ne %then %do;
19185  +           _NAME_ = "GC&globalclusid.";
19186  +       rename _NAME_ = Cluster;
19187  +       %end;
19188  +       %else %do;
19189  +        _NAME_ = "CLUS";
19190  +        rename _NAME_ = Cluster;
19191  +       %end;
19192  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
19193  +    run;
19194  +    proc transpose data =_tmpds out =&outdata;
19195  +    run;
19196  +
19197  +    data &outdata(drop=COL1);
19198  +        %if &globalclusid ne %then %do;
19199  +        length GCluster $16;
19200  +        %end;
19201  +        length Cluster $32;
19202  +        length _NAME_ $32;
19203  +         set &outdata;
19204  +         _NAME_ = upcase(_NAME_);
19205  +         rename _NAME_=Variable;
19206  +         *label _NAME_="Variable";
19207  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19208  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19209  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19210  +
19211  +         %if &globalclusid ne %then %do;
19212  +          GCluster = "GC&globalclusid";
19213  +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
19214  +         %end;
19215  +         %else %do;
19216  +         Cluster = "CLUS"||strip(COL1);
19217  +        %end;
19218  +         rename COL2 = RSqWithOwnClusComp;
19219  +         *label COL2 = "R-Square With Own Cluster Component";
19220  +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
19221  +
19222  +   run;
19223  +   proc sort data =&outdata;
19224  +        by Cluster RSqWithOwnClusComp;
19225  +   run;
19226  +   proc datasets lib = work nolist;
19227  +           delete _tmpds;
19228  +   run;
19229  +   quit;
19230  +%mend MakeOwnRSquare;
19231  +
19232  +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
19233  +    data &outdata(drop= _NCL_  _TYPE_);
19234  +       %if &globalclusid ne %then %do;
19235  +        length GCluster $16;
19236  +        %end;
19237  +       set &indata;
19238  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
19239  +       %if &globalclusid ne %then %do;
19240  +         GCluster = "GC&globalclusid";
19241  +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
19242  +         rename _NAME_ = Cluster;
19243  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19244  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19245  +
19246  +       %end;
19247  +       %else %do;
19248  +         _NAME_ = upcase(_NAME_);
19249  +         rename _NAME_ = Cluster;
19250  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19251  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19252  +
19253  +       %end;
19254  +     run;
19255  +    %if &RSquare eq Y %then %do;
19256  +     data corr_tmp;
19257  +          set &outdata;
19258  +     run;
19259  +     %let istart = 2;
19260  +     %if &globalclusid ne %then %let istart = 3;
19261  +     data &outdata;
19262  +          set &outdata;
19263  +          %let dsid = %sysfunc(open(work.corr_tmp));
19264  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19265  +          %do i =&istart %to &nvar;
19266  +            %let _name = %sysfunc(varname(&dsid, &i));
19267  +            %let _name_md = &_name.**2;
19268  +                &_name = &_name_md;
19269  +          %end;
19270  +      %let dsid= %sysfunc(close(&dsid));
19271  +      run;
19272  +      proc datasets lib = work nolist;
19273  +           delete corr_tmp;
19274  +      run;
19275  +    %end;
19276  +     quit;
19277  +%mend MakeClusStructCorrData;
19278  +
19279  +/*
19280  +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
19281  +*/
19282  +
19283  +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
19284  +
19285  +     /* The indata should be the outdata
19286  +        from %MakeClusStructCorrData(indata=, outdata=, ); */
19287  +
19288  +     proc sort data =&indata out=_tmpclusRsq;
19289  +     by cluster;
19290  +     run;
19291  +
19292  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
19293  +      by cluster;
19294  +     run;
19295  +
19296  +     proc sort data=_tmpclusRsq;
19297  +        by _NAME_ COL1;
19298  +     run;
19299  +
19300  +     data _tmpclusRsq;
19301  +         length _NAME_ $32;
19302  +         set _tmpclusRsq; by _NAME_;
19303  +          _NAME_ = upcase(_NAME_);
19304  +          %if &ncluster ne 1 %then %do;
19305  +             if last._NAME_ then delete;
19306  +          %end;
19307  +          %else %do;
19308  +             COL1 = 0;
19309  +          %end;
19310  +     run;
19311  +     /* need to sort again */
19312  +     proc sort data=_tmpclusRsq;
19313  +        by _NAME_ COL1;
19314  +     run;
19315  +
19316  +     data &outdata;
19317  +         set _tmpclusRsq; by _NAME_;
19318  +         Cluster = upcase(Cluster);
19319  +         if last._NAME_ then output;
19320  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
19321  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
19322  +         rename COL1 = RSqWithNextClusComp;
19323  +         Cluster = upcase(Cluster);
19324  +         rename Cluster = ClosestCluster;
19325  +         *label  Cluster = "Next Closest Cluster";
19326  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
19327  +         rename _NAME_ = Variable;
19328  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19329  +    run;
19330  +
19331  +
19332  +    %if &globalclusid ne %then %do;
19333  +    data &outdata;
19334  +       length GCluster $16;
19335  +       set &outdata;
19336  +       GCluster = "GC&globalclusid";
19337  +       run;
19338  +    %end;
19339  +    proc datasets lib = work nolist;
19340  +           delete _tmpclusRsq;
19341  +    run;
19342  +    quit;
19343  +%mend FindNextClosestClusByVar;
19344  +
19345  +
19346  +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
19347  +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
19348  +     proc sort data =&indata out=_tmpclusRsq;
19349  +     by cluster;
19350  +     run;
19351  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
19352  +     by cluster;
19353  +     run;
19354  +     proc sort data=_tmpclusRsq;
19355  +        by _NAME_ col1;
19356  +     run;
19357  +     data _tmpclusRsq;
19358  +         length _NAME_ $32;
19359  +         set _tmpclusRsq; by _NAME_;
19360  +          _NAME_ = upcase(_NAME_);
19361  +          %if &ncluster ne 1 %then %do;
19362  +             if last._NAME_ then delete;
19363  +          %end;
19364  +          %else %do;
19365  +             COL1 = 0;
19366  +          %end;
19367  +     run;
19368  +     data &outdata;
19369  +         set _tmpclusRsq; by _NAME_;
19370  +         Cluster = upcase(Cluster);
19371  +         if last._NAME_ then output;
19372  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
19373  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
19374  +         rename COL1 = RSqWithNextClusComp;
19375  +         Cluster = upcase(Cluster);
19376  +         rename Cluster = ClosestCluster;
19377  +         *label  Cluster = "Next Closest Cluster";
19378  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
19379  +         rename _NAME_ = Variable;
19380  +         *label  _NAME_ = "Variable";
19381  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19382  +
19383  +    run;
19384  +    %if &globalclusid ne %then %do;
19385  +    data &outdata;
19386  +       length GCluster $16;
19387  +       set &outdata;
19388  +       GCluster = "GC&globalclusid";
19389  +       run;
19390  +    %end;
19391  +
19392  +    proc datasets lib = work nolist;
19393  +           delete _tmpclusRsq;
19394  +    run;
19395  +
19396  +    quit;
19397  +%mend FindNextClosestClusByCluster;
19398  +
19399  +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
19400  +/*----
19401  +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
19402  +-----------*/
19403  +
19404  +proc sort data =&indata1;
19405  +    by Variable;
19406  +run;
19407  +proc sort data =&indata2;
19408  +    by Variable;
19409  +run;
19410  +data &outdata;
19411  +    merge &indata1 &indata2;
19412  +    by Variable;
19413  +    length Type $16;
19414  +    Type = 'Variable';
19415  +    *label Type ='Type';
19416  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
19417  +run;
19418  +
19419  +
19420  +data &indata3;
19421  +    set  &indata3 ;
19422  +    length RSqWithOwnClusComp 8.;
19423  +    Cluster = Variable;
19424  +    RSqWithOwnClusComp = 1;
19425  +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
19426  +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
19427  +    length Type $16;
19428  +    Type = 'ClusterComp';
19429  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
19430  +
19431  +;
19432  +run;
19433  +
19434  +proc sort data=&outdata;
19435  +    by Cluster;
19436  +run;
19437  +proc sort data =&indata3;
19438  +    by Cluster;
19439  +run;
19440  +
19441  +data &outdata;
19442  +     set &outdata &indata3;
19443  +     by Cluster;
19444  +run;
19445  +
19446  +
19447  +/* Create the Selected variable with all YES */
19448  +
19449  +data &outdata;
19450  +     set &outdata;
19451  +     length RsqRatio 8.;
19452  +     length Selected $8;
19453  +     *label RSqRatio = "1-R**2 Ratio";
19454  +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
19455  +     *label Selected = "Variable Selected";
19456  +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
19457  +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
19458  +     Selected ='YES';
19459  +     rename _LABEL_ = Label;
19460  +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19461  +run;
19462  +
19463  +
19464  +/*----  Selected = Y/N will be assigened at the %score                   -------+
19465  +        Just create the Selected variable with all YES at the step above
19466  + +------------------------------------------------------------------------------+
19467  +
19468  +proc sort data=&outdata;
19469  +    by Cluster RsqRatio;
19470  +run;
19471  +
19472  +%if &selectedcomp eq CLUSTERCOMP %then %do;
19473  +data &outdata;
19474  +     set &outdata; by Cluster;
19475  +     length Selected $8;
19476  +     label Selected = "Variable Selected";
19477  +     if  first.Cluster then Selected ='Yes';
19478  +     else Selected = 'No';
19479  +    run;
19480  +%end;
19481  +%else %do;
19482  +data &outdata(drop = _var _varchange);
19483  +     set &outdata; retain _var 0; by Cluster;
19484  +     length Selected $8;
19485  +     label Selected = "Variable Selected";
19486  +     if first.Cluster then  _varchange = 0;
19487  +     else _varchange =1;
19488  +     if _var ne _varchange then  Selected  = 'Yes';
19489  +     else Selected = 'No';
19490  +     if last.cluster then  _var = 0;
19491  +     else _var = _varchange;
19492  +run;
19493  +%end;
19494  +
19495  +--------------------------------------------------------------*/
19496  +
19497  +quit;
19498  +%mend MakeVarClusResultTable;
19499  +
19500  +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
19501  +     proc sort data =&indata;
19502  +        by cluster;
19503  +     run;
19504  +     proc transpose data =&indata
19505  +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
19506  +          by cluster;
19507  +     run;
19508  +     data &outdata;
19509  +          set  &outdata;
19510  +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19511  +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19512  +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
19513  +     run;
19514  +     %if &globalclusid ne %then %do;
19515  +     data &outdata;
19516  +          Length GCluster $16;
19517  +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19518  +          set  &outdata;
19519  +          GCluster ="GC&globalclusid.";
19520  +          run;
19521  +     %end;
19522  +
19523  +%Mend MakePlotDataFromCorrTable;
19524  +
19525  +
19526  +%macro MakeCorrelation(indata=,
19527  +                       outstat=_tmpoutstat,
19528  +                       corrmatrix=N,
19529  +                       outcorr=_tmpoutcorr,
19530  +                       includeclassvar=N,
19531  +                       target=,
19532  +                       freq=,
19533  +                       weight=);
19534  +   %if &target eq  %then %do;
19535  +
19536  +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
19537  +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
19538  +       %if &includeclassvar eq Y %then %do;
19539  +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
19540  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19541  +          %do i = 2 %to &nvar;
19542  +          %let varname = %sysfunc(varname(&dsid, &i));
19543  +          &varname
19544  +          %end;
19545  +       %end;
19546  +       ;
19547  +      %if &freq ne  %then %do;
19548  +          freq &freq;
19549  +      %end;
19550  +      %if &weight ne  %then %do;
19551  +          weight &weight;
19552  +      %end;
19553  +
19554  +      run;
19555  +      %if &corrmatrix eq Y %then %do;
19556  +      data  &outcorr (drop = _NCL_ _TYPE_);
19557  +           set  &outstat ;
19558  +           if _TYPE_ ='CORR' then output;
19559  +      run;
19560  +      %end;
19561  +    %end;
19562  +    %else %do;
19563  +       proc corr data=&indata outp=&outstat noprint;
19564  +            var
19565  +       %let dsid = %sysfunc(open(&indata));
19566  +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19567  +          %do i = 1 %to &nvar;
19568  +              %let _name = %sysfunc(varname(&dsid, &i));
19569  +              %if &_name ne &target %then;
19570  +              &_name
19571  +           %end;
19572  +        %let dsid= %sysfunc(close(&dsid));
19573  +        ;
19574  +        with &target;
19575  +        run;
19576  +    %end;
19577  +    quit;
19578  +%mend MakeCorrelation;
19579  +
19580  +
19581  +%macro MakeCorrelationDistance(indata=,
19582  +                               outdata=,
19583  +                               rsquare = N
19584  +                               );
19585  +    data corr_tmp;
19586  +        set &indata;
19587  +        if _N_ = 1 then do;
19588  +           output;
19589  +           stop;
19590  +         end;
19591  +    run;
19592  +    %if &outdata ne  %then %let  _outdata = &outdata;
19593  +    %else %let _outdata = &indata;
19594  +
19595  +    data &_outdata;
19596  +         set &indata;
19597  +
19598  +         %let dsid = %sysfunc(open(work.corr_tmp));
19599  +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19600  +          %do i = 2 %to &nvar;
19601  +              %let _name = %sysfunc(varname(&dsid, &i));
19602  +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19603  +              %else  %let _name_md = &_name;
19604  +              &_name = 1- &_name_md;
19605  +          %end;
19606  +      %let dsid= %sysfunc(close(&dsid));
19607  +      run;
19608  +      proc datasets lib = work nolist;
19609  +           delete corr_tmp;
19610  +      run;
19611  +      quit;
19612  +  %mend MakeCorrelationDistance;
19613  +
19614  +
19615  +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19616  +                                   rsquare = N
19617  +                                   );
19618  +    data corr_tmp;
19619  +        set &indata;
19620  +    run;
19621  +    proc sql noprint;
19622  +           update &indata
19623  +           set
19624  +     %let dsid = %sysfunc(open(work.corr_tmp));
19625  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19626  +          %do i = 4 %to &nvar;
19627  +          %let _name = %sysfunc(varname(&dsid, &i));
19628  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19629  +            %else  %let _name_md = &_name;
19630  +            %if &i < &nvar %then %do;
19631  +               &_name = 1- &_name_md ,
19632  +            %end;
19633  +            %else %do;
19634  +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19635  +            %end;
19636  +          %end;
19637  +      %let dsid= %sysfunc(close(&dsid));
19638  +
19639  +      select * from &indata;
19640  +      run;
19641  +     data &indata( drop = _NCL_);
19642  +           set &indata;
19643  +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19644  +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19645  +     run;
19646  +     data &indata(DROP = _NCL_);
19647  +           set &indata;
19648  +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19649  +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19650  +           rename _NAME_ = _VAR_;
19651  +     run;
19652  +     proc datasets lib = work nolist;
19653  +           delete corr_tmp;
19654  +     run;
19655  +     quit;
19656  + %mend UpdateOutStatCorrToDistance;
19657  +
19658  +
19659  +%macro HierClusWithCorr(indata= ,
19660  +                        ncluster=,
19661  +                        method = Ward,
19662  +                        outtree = _outtree,
19663  +                        idvar =_VAR_,
19664  +                        outdata=,
19665  +                        rescore = N,
19666  +                        newncluster=
19667  +                        );
19668  +      %global &newncluster;
19669  +      %if &rescore ne Y %then %do;
19670  +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19671  +                   method=&method outtree=&outtree noprint;
19672  +           id &idvar;
19673  +      run;
19674  +      %end;
19675  +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19676  +      run;
19677  +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19678  +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19679  +      run;
19680  +      data _outcontent;
19681  +          set _outcontent;
19682  +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19683  +          index = 1;
19684  +          rename NAME = _NAME_;
19685  +      run;
19686  +      proc sort data=_outcontent;
19687  +          by _NAME_;
19688  +      run;
19689  +      proc sort data =&outdata;
19690  +           by _NAME_;
19691  +      run;
19692  +      data &outdata(drop=index);
19693  +          merge &outdata _outcontent;
19694  +          by _NAME_;
19695  +          if index = . then delete;
19696  +      run;
19697  +      /*-----------------------------------------------------------*/
19698  +      data &outdata;
19699  +           length CLUSNAME $16;
19700  +           set &outdata;
19701  +           if CLUSTER > &ncluster then delete;
19702  +           CLUSNAME='GC'||strip(CLUSTER);
19703  +           *label CLUSNAME = "Cluster Name";
19704  +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19705  +           rename _NAME_ = VARIABLE ;
19706  +           *label _NAME_ = "Variable";
19707  +           *label CLUSTER = "Cluster";
19708  +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19709  +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19710  +      run;
19711  +      proc sort data=&outdata out=&outdata;
19712  +           by CLUSTER;
19713  +      run;
19714  +      proc means data =&outdata noprint;
19715  +           output out=_meanout;
19716  +      run;
19717  +      data _null_;
19718  +            set _meanout;
19719  +            if strip(_STAT_) eq 'MAX' then do;
19720  +            call symput("&newncluster", CLUSTER);
19721  +            stop;
19722  +            end;
19723  +      run;
19724  +
19725  +      proc datasets lib = work nolist;
19726  +           delete _outcontent _meanout;
19727  +      run;
19728  +      quit;
19729  +%mend  HierClusWithCorr;
19730  +
19731  +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19732  +
19733  +     data _tmpindata;
19734  +          set &indata;
19735  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19736  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19737  +          if _TYPE_ = 'STD' then _NAME_='STD';
19738  +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19739  +          DROP _TYPE_ _NCL_;
19740  +     run;
19741  +
19742  +     filename _file_  "&fileRef";
19743  +
19744  +     data _null_;
19745  +        FILE _file_ MOD;
19746  +        put ' ';
19747  +        put "/*-------------------------------------------------*/";
19748  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19749  +        put "/*-------------------------------------------------*/";
19750  +        put ' ';
19751  +        %let dsid = %sysfunc(open(work._tmpindata));
19752  +
19753  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19754  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19755  +        %let k = 1;
19756  +        %do %while(^%sysfunc(fetch(&dsid)));
19757  +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19758  +               %if &k > 2 %then %do;
19759  +                %let cn = %eval(&k-2);
19760  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19761  +                %end;
19762  +                %let k = %eval(&k+1);
19763  +
19764  +        %end;
19765  +        %let rc = %sysfunc(rewind(&dsid));
19766  +
19767  +        %do j= 2 %to &nvar;
19768  +            %let _varname = %sysfunc(varname(&dsid, &j));
19769  +            %do %while(^%sysfunc(fetch(&dsid)));
19770  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19771  +                %if &_name = MEAN %then
19772  +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19773  +                %else %if &_name = STD %then
19774  +                %let _std = %sysfunc(getvarn(&dsid, &j));
19775  +                %else %do;
19776  +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19777  +                      %let abscoeff = %sysfunc(abs(&coeff));
19778  +                          %if &abscoeff >  0 %then %do;
19779  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19780  +                           %end;
19781  +                 %end;
19782  +             %end;
19783  +             %let rc = %sysfunc(rewind(&dsid));
19784  +         %end;
19785  +
19786  +        %let dsid= %sysfunc(close(&dsid));
19787  +
19788  +     run;
19789  +
19790  +     filename _file_;
19791  +     proc datasets lib = work nolist;
19792  +           delete _tmpindata;
19793  +     run;
19794  +     quit;
19795  +%mend CreateScoreCode2;
19796  +
19797  +
19798  +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19799  +
19800  +     /*--- Build Code to Modify Metadata ---*/
19801  +     filename X "&deltacodefile";
19802  +     data _null_;
19803  +        FILE X;
19804  +        set &groupds end=eof;
19805  +        if _N_=1 then do;
19806  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19807  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19808  +           %end;
19809  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19810  +           put "if upcase(strip(NAME)) in (";
19811  +        end;
19812  +        if Strip(upcase(Selected)) eq 'YES' then do;
19813  +           string = '"'!!trim(left(VARIABLE))!!'"';
19814  +           put string;
19815  +        end;
19816  +        if eof then do;
19817  +           put ') then ROLE="INPUT";';
19818  +           put 'else ROLE="REJECTED";';
19819  +           put 'end;';
19820  +
19821  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19822  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19823  +           %end;
19824  +        end;
19825  +     run;
19826  +     quit;
19827  +
19828  +     filename X;
19829  +     quit;
19830  +%mend MakeDeltaCode2;
19831  +
19832  +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19833  +  %global &ngc;
19834  +  data _null_;
19835  +  %if &indata ne %then %do;
19836  +      %let dsid = %sysfunc(open(&indata));
19837  +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19838  +      %let dsid = %sysfunc(close(&dsid));
19839  +  %end;
19840  +  %else %do;
19841  +       %let nvar = %eval(&ninput+&ndummy); ;
19842  +  %end;
19843  +  %let numgc = %eval(&nvar/&div+2);
19844  +  %let &ngc = &numgc;
19845  +   run;
19846  +  quit;
19847  +%mend getInitialGClusterNumber;
19848  +
19849  +
19850  +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19851  +data &outlink(drop = Selected);
19852  +     set &indata;
19853  +     LINKID = _N_;
19854  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19855  +run;
19856  +data &outnode(keep=NODEID TYPE LABEL);
19857  +    set &indata;
19858  +    length TYPE $16;
19859  +    rename VARIABLE = NODEID;
19860  +    *label  CLUSNAME="Node ID";
19861  +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19862  +    TYPE = "VARIABLE";
19863  +    *label TYPE = "Node Type";
19864  +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19865  +    run;
19866  +data _tmp(keep=NODEID TYPE LABEL);
19867  +    set &indata;
19868  +    length TYPE $16;
19869  +    rename CLUSNAME = NODEID;
19870  +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19871  +    TYPE = "GCLUSTER";
19872  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19873  +    run;
19874  +proc sort data=_tmp;
19875  +    by NODEID;
19876  +run;
19877  +data _tmp;
19878  +    set _tmp; by NODEID;
19879  +    if first.NODEID then output;
19880  +run;
19881  +proc sort data=&outnode;
19882  +    by NODEID;
19883  +run;
19884  +data  &outnode;
19885  +    set _tmp &outnode;
19886  +run;
19887  +proc datasets lib = work nolist;
19888  +     delete _tmp;
19889  +run;
19890  +quit;
19891  +%mend MakeGobalConstellData;
19892  +
19893  +/* Make contellation plot data among GCLUSTERS */
19894  +
19895  +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19896  +
19897  +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19898  +     set &indata;
19899  +     LINKID = _N_;
19900  +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19901  +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19902  +     end;
19903  +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19904  +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19905  +     end;
19906  +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19907  +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19908  +    end;
19909  +run;
19910  +
19911  +data _tmp_outrsquare;
19912  +        set &inoutrsq;
19913  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19914  +run;
19915  +
19916  +proc freq data =_tmp_outrsquare noprint;
19917  +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19918  +run;
19919  +
19920  +data &outnode(keep=_NAME_ TYPE LABEL);
19921  +    set &outlink;
19922  +    length TYPE $16;
19923  +    length LABEL $100;
19924  +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19925  +
19926  +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19927  +    TYPE = "GCLUSTER";
19928  +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19929  +    end;
19930  +    else do;
19931  +    TYPE= "ROOT";
19932  +    LABEL= _NAME_;
19933  +    end;
19934  +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19935  +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19936  +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19937  +    run;
19938  +
19939  +proc sort data=&outnode;
19940  +     by _NAME_;
19941  +proc sort data=_tmp_GCLUSFREQ;
19942  +     by _NAME_;
19943  +run;
19944  +
19945  +data  &outnode;
19946  +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19947  +     if COUNT=. then COUNT=1;
19948  +run;
19949  +
19950  +proc datasets lib = work nolist;
19951  +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19952  +run;
19953  +
19954  +quit;
19955  +%Mend MakeGClusterConstData;
19956  +
19957  +
19958  +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19959  +
19960  +    data _gscoretmpds;
19961  +          set &indata;
19962  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19963  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19964  +          if _TYPE_ = 'STD' then _NAME_='STD';
19965  +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19966  +          DROP _TYPE_ _NCL_;
19967  +     run;
19968  +
19969  +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19970  +        GCluster Component &globalclusid ------ */
19971  +
19972  +    filename _file_  "&fileref";
19973  +
19974  +    data _null_;
19975  +        %if &globalclusid eq 1 %then %do;
19976  +          FILE _file_;
19977  +        %end;
19978  +        %else %do;
19979  +          FILE _file_ MOD;
19980  +        %end;
19981  +
19982  +        %let dsid = %sysfunc(open(work._gscoretmpds));
19983  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19984  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19985  +
19986  +        %let k = 1;
19987  +        %do %while(^%sysfunc(fetch(&dsid)));
19988  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19989  +                %if &k > 2 %then %do;
19990  +                put "&_name = 0 ; ";
19991  +                %end;
19992  +                %let k = %eval(&k+1);
19993  +        %end;
19994  +
19995  +        %let rc = %sysfunc(rewind(&dsid));
19996  +        %do i= 2 %to &nvar;
19997  +            %let _varname =  %sysfunc(varname(&dsid, &i));
19998  +            %do %while(^%sysfunc(fetch(&dsid)));
19999  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20000  +                %if &_name = MEAN %then
20001  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
20002  +                %else %if &_name = STD %then
20003  +                %let _std = %sysfunc(getvarn(&dsid, &i));
20004  +                %else %do;
20005  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
20006  +                      %let abscoeff = %sysfunc(abs(&coeff));
20007  +                          %if &abscoeff >  0 %then %do;
20008  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
20009  +                           %end;
20010  +                 %end;
20011  +             %end;
20012  +             %let rc = %sysfunc(rewind(&dsid));
20013  +
20014  +         %end;
20015  +
20016  +        %let dsid= %sysfunc(close(&dsid));
20017  +       run;
20018  +
20019  +
20020  +       proc datasets lib=work nolist;
20021  +            delete _gscoretmpds;
20022  +       run;
20023  +      quit;
20024  +
20025  +%mend CreateGClusterScoreCode;
20026  +
20027  +
20028  +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
20029  +
20030  +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
20031  +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
20032  +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
20033  +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
20034  +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
20035  +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
20036  +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
20037  +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
20038  +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
20039  +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
20040  +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
20041  +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
20042  +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
20043  +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
20044  +
20045  +   filename gsfile "&gscorecode";
20046  +
20047  +   data &EM_USER_GSCORE;
20048  +             set &indata;
20049  +             %include  gsfile;
20050  +        keep
20051  +        %do i=1 %to &ngcluster;
20052  +         %let gcvarname = GC&i;
20053  +         &gcvarname
20054  +        %end;
20055  +     ;
20056  +   run;
20057  +
20058  +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
20059  +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
20060  +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
20061  +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
20062  +    noprint  ;
20063  +     var
20064  +       %do i=1 %to &ngcluster;
20065  +         %let gcvarname = GC&i;
20066  +         &gcvarname
20067  +        %end;
20068  +   ;
20069  +   run;
20070  +
20071  +
20072  +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
20073  +   data &EM_USER_GSCORECORRPLOT ;
20074  +        set &EM_USER_GSCORECORRPLOT;
20075  +        rename _X_ = X;
20076  +        rename _Y_ = Y;
20077  +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20078  +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
20079  +   run;
20080  +
20081  +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
20082  +
20083  +   data &EM_USER_GSCORETREE;
20084  +        length _NAME_ $32;
20085  +        length _LABEL_ $100;
20086  +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
20087  +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
20088  +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
20089  +        end;else do;
20090  +         _LABEL_ = _NAME_;
20091  +        end;
20092  +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20093  +
20094  +   run;
20095  +
20096  +   quit;
20097  +
20098  +%mend MakeGClusterCorrelation;
20099  +
20100  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
20101  +%macro score;
20102  +
20103  +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
20104  +%include temp;
20105  +filename temp;
20106  +
20107  +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
20108  +
20109  +data _null_;
20110  +         set &EM_USER_VARCLUSMETA;
20111  +         if _N_=1 then
20112  +         call symput('_trainnum', TrainNum);
20113  +         call symput('_exportedcomp', ExportedComp);
20114  +         call symput('_hidevariable', HideVariable);
20115  +         call symput('_newTrain', NewTrain);
20116  +run;
20117  +
20118  +%if &_newTrain = N %then %do;
20119  +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
20120  +        %else %let _exportedCompChanged = Y;
20121  +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
20122  +        %else  %let _hideVariableChanged = Y;
20123  +%end;
20124  +%else %do;
20125  +        %let _exportedCompChanged = Y;
20126  +        %let _hideVariableChanged = Y;
20127  +%end;
20128  +
20129  +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
20130  +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
20131  +     %include temp;
20132  +     filename temp;
20133  +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
20134  +%end;
20135  +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
20136  +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
20137  +     %include temp;
20138  +     filename temp;
20139  +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
20140  +%end;
20141  +
20142  +  /* store  current property values */
20143  + data &EM_USER_VARCLUSMETA;
20144  +       set &EM_USER_VARCLUSMETA;
20145  +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
20146  +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
20147  + run;
20148  +
20149  +%mend score;
20150  +
20151  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
20152  +
20153  +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
20154  +     proc sort data =&indata;
20155  +              by Cluster RsqRatio Type;
20156  +     run;
20157  +     /*----------------------------------------------------------------------
20158  +      The Type variabe is used becuse the variable need to be selected
20159  +        instead of Cluster component when only one variable is in the cluster
20160  +     +-----------------------------------------------------------------------*/
20161  +
20162  +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
20163  +         data &indata;
20164  +              set &indata; by cluster;
20165  +              if first.Cluster then Selected = 'YES';
20166  +              else Selected = 'NO';
20167  +         run;
20168  +         quit;
20169  +    %end;
20170  +    %else %do;
20171  +         data &indata(drop = _var _varchange);
20172  +              set &indata; retain _var 0; by Cluster;
20173  +             if first.Cluster then  _varchange = 0;
20174  +                 else _varchange =1;
20175  +             if _var ne _varchange then  Selected  = 'YES';
20176  +             else Selected = 'NO';
20177  +             if last.cluster then  _var = 0;
20178  +             else _var = _varchange;
20179  +         run;
20180  +         quit;
20181  +    %end;
20182  +%mend ChangeVariableSelectionFlag;
20183  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
20184  +
20185  +%macro score1(ExportedCompChanged=,
20186  +              HideVariableChanged=);
20187  +
20188  +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
20189  +   %if &ExportedCompChanged = Y %then %do;
20190  +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
20191  +   %end;
20192  +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
20193  +
20194  +%mend score1;
20195  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.17 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file X is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=25Apr2020:11:48:28,
      Create Time=25Apr2020:11:39:56
 
NOTE: 42 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 93.
NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref X has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS3.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.00 seconds
 
 
20196   *------------------------------------------------------------*;
20197   * End SCORE: VarClus;
20198   *------------------------------------------------------------*;
20199
 
20200   filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
20201   *------------------------------------------------------------*;
20202   * VarClus: Scoring DATA data;
20203   *------------------------------------------------------------*;
20204   data EMWS3.VarClus_TRAIN
20205   / view=EMWS3.VarClus_TRAIN
20206   ;
20207   set EMWS3.Part_TRAIN
20208   ;
20209   %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas.
20210  +*** Begin Class Look-up, Standardization, Replacement ;
20211  +
20212  +*** Generate dummy variables for BOTHPAYM ;
20213  +label BOTHPAYM0 = 'BOTHPAYM=0' ;
20214  +label BOTHPAYM1 = 'BOTHPAYM=1' ;
20215  +if missing( BOTHPAYM ) then do;
20216  +   BOTHPAYM0 = .;
20217  +   BOTHPAYM1 = .;
20218  +end;
20219  +else do;
20220  +   length _dm4 $ 4; drop _dm4 ;
20221  +   _dm4 = put( BOTHPAYM , $4. );
20222  +   %DMNORMIP( _dm4 )
20223  +   if _dm4 = '0'  then do;
20224  +      BOTHPAYM0 = 1;
20225  +      BOTHPAYM1 = 0;
20226  +   end;
20227  +   else if _dm4 = '1'  then do;
20228  +      BOTHPAYM0 = 0;
20229  +      BOTHPAYM1 = 1;
20230  +   end;
20231  +   else do;
20232  +      delete;
20233  +   end;
20234  +end;
20235  +
20236  +*** Generate dummy variables for CCPAYM ;
20237  +label CCPAYM0 = 'CCPAYM=0' ;
20238  +label CCPAYM1 = 'CCPAYM=1' ;
20239  +if missing( CCPAYM ) then do;
20240  +   CCPAYM0 = .;
20241  +   CCPAYM1 = .;
20242  +end;
20243  +else do;
20244  +   length _dm4 $ 4; drop _dm4 ;
20245  +   _dm4 = put( CCPAYM , $4. );
20246  +   %DMNORMIP( _dm4 )
20247  +   if _dm4 = '0'  then do;
20248  +      CCPAYM0 = 1;
20249  +      CCPAYM1 = 0;
20250  +   end;
20251  +   else if _dm4 = '1'  then do;
20252  +      CCPAYM0 = 0;
20253  +      CCPAYM1 = 1;
20254  +   end;
20255  +   else do;
20256  +      delete;
20257  +   end;
20258  +end;
20259  +
20260  +*** Generate dummy variables for PCPAYM ;
20261  +label PCPAYM0 = 'PCPAYM=0' ;
20262  +label PCPAYM1 = 'PCPAYM=1' ;
20263  +if missing( PCPAYM ) then do;
20264  +   PCPAYM0 = .;
20265  +   PCPAYM1 = .;
20266  +end;
20267  +else do;
20268  +   length _dm4 $ 4; drop _dm4 ;
20269  +   _dm4 = put( PCPAYM , $4. );
20270  +   %DMNORMIP( _dm4 )
20271  +   if _dm4 = '0'  then do;
20272  +      PCPAYM0 = 1;
20273  +      PCPAYM1 = 0;
20274  +   end;
20275  +   else if _dm4 = '1'  then do;
20276  +      PCPAYM0 = 0;
20277  +      PCPAYM1 = 1;
20278  +   end;
20279  +   else do;
20280  +      delete;
20281  +   end;
20282  +end;
20283  +
20284  +*** Generate dummy variables for METHPAYM ;
20285  +label METHPAYMCC = 'METHPAYM=CC' ;
20286  +label METHPAYMCK = 'METHPAYM=CK' ;
20287  +label METHPAYMDK = 'METHPAYM=DK' ;
20288  +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
20289  +*** encoding is sparse, initialize to zero;
20290  +METHPAYMCC = 0;
20291  +METHPAYMCK = 0;
20292  +METHPAYMDK = 0;
20293  +METHPAYMXBOT = 0;
20294  +if missing( METHPAYM ) then do;
20295  +   METHPAYMCC = .;
20296  +   METHPAYMCK = .;
20297  +   METHPAYMDK = .;
20298  +   METHPAYMXBOT = .;
20299  +end;
20300  +else do;
20301  +   length _dm4 $ 4; drop _dm4 ;
20302  +   _dm4 = put( METHPAYM , $4. );
20303  +   %DMNORMIP( _dm4 )
20304  +   if _dm4 = 'CC'  then do;
20305  +      METHPAYMCC = 1;
20306  +   end;
20307  +   else if _dm4 = 'CK'  then do;
20308  +      METHPAYMCK = 1;
20309  +   end;
20310  +   else if _dm4 = 'XBOT'  then do;
20311  +      METHPAYMXBOT = 1;
20312  +   end;
20313  +   else if _dm4 = 'DK'  then do;
20314  +      METHPAYMDK = 1;
20315  +   end;
20316  +   else do;
20317  +      delete;
20318  +   end;
20319  +end;
20320  +
20321  +*** End Class Look-up, Standardization, Replacement ;
20322  +
20323  +
20324  +/*-------------------------------------------------*/
20325  +/* Varclus Score Code Begins*/
20326  +/*-------------------------------------------------*/
20327  +
20328  +Clus1 = 0 ; /*---Cluster Component 1------ */
20329  +Clus2 = 0 ; /*---Cluster Component 2------ */
20330  +Clus3 = 0 ; /*---Cluster Component 3------ */
20331  +Clus4 = 0 ; /*---Cluster Component 4------ */
20332  +Clus5 = 0 ; /*---Cluster Component 5------ */
20333  +Clus6 = 0 ; /*---Cluster Component 6------ */
20334  +Clus7 = 0 ; /*---Cluster Component 7------ */
20335  +Clus8 = 0 ; /*---Cluster Component 8------ */
20336  +Clus9 = 0 ; /*---Cluster Component 9------ */
20337  +Clus10 = 0 ; /*---Cluster Component 10------ */
20338  +Clus11 = 0 ; /*---Cluster Component 11------ */
20339  +Clus12 = 0 ; /*---Cluster Component 12------ */
20340  +Clus13 = 0 ; /*---Cluster Component 13------ */
20341  +Clus14 = 0 ; /*---Cluster Component 14------ */
20342  +Clus15 = 0 ; /*---Cluster Component 15------ */
20343  +Clus16 = 0 ; /*---Cluster Component 16------ */
20344  +Clus17 = 0 ; /*---Cluster Component 17------ */
20345  +Clus18 = 0 ; /*---Cluster Component 18------ */
20346  +Clus19 = 0 ; /*---Cluster Component 19------ */
20347  +Clus20 = 0 ; /*---Cluster Component 20------ */
20348  +Clus21 = 0 ; /*---Cluster Component 21------ */
20349  +Clus22 = 0 ; /*---Cluster Component 22------ */
20350  +Clus23 = 0 ; /*---Cluster Component 23------ */
20351  +Clus24 = 0 ; /*---Cluster Component 24------ */
20352  +Clus25 = 0 ; /*---Cluster Component 25------ */
20353  +Clus26 = 0 ; /*---Cluster Component 26------ */
20354  +Clus27 = 0 ; /*---Cluster Component 27------ */
20355  +Clus28 = 0 ; /*---Cluster Component 28------ */
20356  +Clus29 = 0 ; /*---Cluster Component 29------ */
20357  +Clus30 = 0 ; /*---Cluster Component 30------ */
20358  +Clus31 = 0 ; /*---Cluster Component 31------ */
20359  +Clus32 = 0 ; /*---Cluster Component 32------ */
20360  +Clus33 = 0 ; /*---Cluster Component 33------ */
20361  +Clus34 = 0 ; /*---Cluster Component 34------ */
20362  +Clus35 = 0 ; /*---Cluster Component 35------ */
20363  +Clus6 = Clus6+0.31049469798101 * (ACTBUY - 0.99109663409337)/1.16003174926523;
20364  +Clus9 = Clus9+0.32502227037692 * (BUYPROP - 0.18928931964407)/0.25656954904129;
20365  +Clus32 = Clus32+0.27053392066665 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
20366  +Clus7 = Clus7+0.36779194981722 * (DAYLAST - 1182.17608189855)/1226.0780195912;
20367  +Clus29 = Clus29+0.32606352949113 * (DEPT01 - 0.50547541492166)/1.82274128473225;
20368  +Clus29 = Clus29+0.31475903553413 * (DEPT02 - 0.29257018768419)/1.15307534710204;
20369  +Clus29 = Clus29+0.35680641258699 * (DEPT03 - 1.08161935784085)/2.82203775857088;
20370  +Clus29 = Clus29+0.31539445831064 * (DEPT04 - 0.68006824879789)/2.28175674515779;
20371  +Clus29 = Clus29+0.29360569691748 * (DEPT05 - 0.54295020939972)/1.52515347226129;
20372  +Clus32 = Clus32+0.17644386618702 * (DEPT06 - 0.85925236544129)/1.98131768775175;
20373  +Clus31 = Clus31+0.21799066207907 * (DEPT07 - 0.02559329920893)/0.31536747776311;
20374  +Clus31 = Clus31+0.33993271338746 * (DEPT08 - 0.31512331316891)/1.29408639394269;
20375  +Clus31 = Clus31+0.34186033539386 * (DEPT09 - 0.2486427795874)/1.20923480324609;
20376  +Clus31 = Clus31+0.35421920019149 * (DEPT10 - 0.39066232356134)/1.7648701612552;
20377  +Clus31 = Clus31+0.28393608567866 * (DEPT11 - 0.15141926477431)/0.76300583506574;
20378  +Clus31 = Clus31+0.38386073638767 * (DEPT12 - 0.21448735846129)/0.89341788675275;
20379  +Clus32 = Clus32+0.21094125773847 * (DEPT13 - 1.30395532805956)/2.58742913517547;
20380  +Clus1 = Clus1+0.14612398962451 * (DEPT14 - 0.83527221963704)/2.18699342328426;
20381  +Clus1 = Clus1+0.09702913619723 * (DEPT15 - 0.28949899177912)/1.23869079532202;
20382  +Clus1 = Clus1+0.09670854836259 * (DEPT16 - 0.22491081123002)/1.0272304883634;
20383  +Clus1 = Clus1+0.08864693290338 * (DEPT17 - 0.19466418489219)/0.960753111967;
20384  +Clus34 = Clus34+0.68513998203611 * (DEPT18 - 0.1317512021095)/0.70116887678934;
20385  +Clus34 = Clus34+0.68513998203611 * (DEPT19 - 0.07324336900884)/0.59281735227563;
20386  +Clus32 = Clus32+0.0549670760145 * (DEPT20 - 0.02956413835892)/0.31025698407933;
20387  +Clus33 = Clus33+1 * (DEPT21 - 0.01821002016441)/0.24509272697267;
20388  +Clus32 = Clus32+0.23307614189926 * (DEPT22 - 2.12771831859779)/3.55134640550257;
20389  +Clus32 = Clus32+0.20251555040293 * (DEPT23 - 2.14223669923995)/3.81941288304535;
20390  +Clus32 = Clus32+0.17413334206296 * (DEPT24 - 0.64039087947882)/1.70711269742472;
20391  +Clus6 = Clus6+0.26635393730034 * (DEPT25 - 1.77676438653637)/4.75421718243184;
20392  +Clus9 = Clus9+0.18580207423567 * (DEPT26 - 0.19075539010392)/0.91270742425277;
20393  +Clus32 = Clus32+0.16412176293701 * (DEPT27 - 0.58712579494338)/1.55259848403997;
20394  +Clus4 = Clus4+0.41745197007519 * (DOLINDEA - 47.8585866898046)/37.591191668842;
20395  +Clus1 = Clus1+0.22176651741164 * (DOLINDET - 197.869031487513)/314.244548218948;
20396  +Clus3 = Clus3+0.34040516245314 * (DOLL24 - 45.4938073522568)/93.9875146751151;
20397  +Clus24 = Clus24+0.53431022831305 * (DOLLARQ01 - 3.60255901969908)/18.9572343997303;
20398  +Clus23 = Clus23+0.53635920804358 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
20399  +Clus11 = Clus11+0.53251837592186 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
20400  +Clus16 = Clus16+0.53398718553838 * (DOLLARQ04 - 4.67856274236077)/22.181986153492;
20401  +Clus17 = Clus17+0.53548666653293 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
20402  +Clus13 = Clus13+0.53337003658551 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
20403  +Clus25 = Clus25+0.53620252678703 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
20404  +Clus27 = Clus27+0.54119921647341 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
20405  +Clus22 = Clus22+0.5349541071483 * (DOLLARQ09 - 4.29424383434155)/20.7683103640237;
20406  +Clus10 = Clus10+0.53279724233879 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
20407  +Clus15 = Clus15+0.53532885078822 * (DOLLARQ11 - 4.15352411974561)/20.8177653006881;
20408  +Clus6 = Clus6+0.3683415196646 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
20409  +Clus26 = Clus26+0.54383527719424 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
20410  +Clus20 = Clus20+0.54398954027119 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
20411  +Clus8 = Clus8+0.53531614157592 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
20412  +Clus18 = Clus18+0.53714970024584 * (DOLLARQ16 - 7.79008624166278)/31.0104071776129;
20413  +Clus3 = Clus3+0.44436827521592 * (DOLLARQ17 - 5.57017403443462)/26.1415799982751;
20414  +Clus19 = Clus19+0.53306278493927 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
20415  +Clus14 = Clus14+0.53462067704059 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
20416  +Clus9 = Clus9+0.37631589198989 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
20417  +Clus21 = Clus21+0.53908041935557 * (DOLLARQ21 - 4.74636513106871)/24.2680885720031;
20418  +Clus12 = Clus12+0.53808320116509 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
20419  +Clus4 = Clus4+0.41538876032442 * (DOLNETDA - 45.411597554134)/36.1502695431938;
20420  +Clus1 = Clus1+0.22085514615169 * (DOLNETDT - 189.18095548317)/303.615750735173;
20421  +Clus1 = Clus1+0.19970567328905 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
20422  +Clus7 = Clus7+0.36779707552659 * (MONLAST - 38.7579959671164)/40.2783526824403;
20423  +Clus35 = Clus35+1 * (TENURE - 83.4682798200713)/60.0499642836247;
20424  +Clus24 = Clus24+0.53431022831305 * (TOTORDQ01 - 0.07833100666976)/0.31375640071534;
20425  +Clus23 = Clus23+0.53635920804358 * (TOTORDQ02 - 0.07383279044516)/0.30498525646648;
20426  +Clus11 = Clus11+0.53251837592187 * (TOTORDQ03 - 0.05841476655808)/0.25663649019308;
20427  +Clus16 = Clus16+0.53398718553838 * (TOTORDQ04 - 0.09058476810919)/0.33923460400983;
20428  +Clus17 = Clus17+0.53548666653293 * (TOTORDQ05 - 0.08766868310842)/0.32373427535999;
20429  +Clus13 = Clus13+0.53337003658551 * (TOTORDQ06 - 0.08068869241507)/0.31127041208068;
20430  +Clus25 = Clus25+0.53620252678703 * (TOTORDQ07 - 0.08583837443772)/0.3225455818214;
20431  +Clus27 = Clus27+0.54119921647341 * (TOTORDQ08 - 0.11782224290367)/0.39692742169452;
20432  +Clus22 = Clus22+0.5349541071483 * (TOTORDQ09 - 0.09120521172638)/0.32676782706381;
20433  +Clus10 = Clus10+0.53279724233879 * (TOTORDQ10 - 0.07501163331782)/0.2991488551838;
20434  +Clus15 = Clus15+0.53532885078822 * (TOTORDQ11 - 0.08630370715061)/0.31791570298113;
20435  +Clus6 = Clus6+0.38864318218989 * (TOTORDQ12 - 0.12619823173569)/0.4074226605598;
20436  +Clus26 = Clus26+0.54383527719424 * (TOTORDQ13 - 0.10832945556072)/0.35251925488707;
20437  +Clus20 = Clus20+0.54398954027119 * (TOTORDQ14 - 0.08894059252365)/0.31938115502111;
20438  +Clus8 = Clus8+0.53531614157592 * (TOTORDQ15 - 0.09821622460058)/0.342400248125;
20439  +Clus18 = Clus18+0.53714970024584 * (TOTORDQ16 - 0.14620753838994)/0.42506049526083;
20440  +Clus3 = Clus3+0.42389042465751 * (TOTORDQ17 - 0.108267411199)/0.35925036974258;
20441  +Clus19 = Clus19+0.53306278493927 * (TOTORDQ18 - 0.09319063130138)/0.32753587031264;
20442  +Clus14 = Clus14+0.53462067704059 * (TOTORDQ19 - 0.08217775709632)/0.30645832771871;
20443  +Clus9 = Clus9+0.40129080124664 * (TOTORDQ20 - 0.15985729796804)/0.46170113594525;
20444  +Clus21 = Clus21+0.53908041935557 * (TOTORDQ21 - 0.09182565534357)/0.32980785722872;
20445  +Clus12 = Clus12+0.53808320116509 * (TOTORDQ22 - 0.08611757406545)/0.31443413012517;
20446  +Clus1 = Clus1+0.21191459192951 * (UNITSIDD - 10.9602916085)/17.1055734908767;
20447  +Clus4 = Clus4+0.30018376965081 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
20448  +Clus30 = Clus30+1 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
20449  +Clus5 = Clus5+-0.33333333333333 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
20450  +Clus5 = Clus5+0.33333333333333 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
20451  +Clus2 = Clus2+-0.33333333333333 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
20452  +Clus2 = Clus2+0.33333333333333 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
20453  +Clus28 = Clus28+-0.33333333333333 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
20454  +Clus28 = Clus28+0.33333333333333 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
20455  +Clus2 = Clus2+0.33333333333333 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
20456  +Clus28 = Clus28+0.33333333333333 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
20457  +Clus7 = Clus7+0.32661485207285 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
20458  +Clus5 = Clus5+0.33333333333333 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
NOTE: %INCLUDE (level 1) ending.
20459   run;
 
NOTE: DATA STEP view saved on file EMWS3.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.03 seconds
 
 
20460   quit;
20461   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
20462   filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
20463   *------------------------------------------------------------*;
20464   * VarClus: Scoring VALIDATE data;
20465   *------------------------------------------------------------*;
20466   data EMWS3.VarClus_VALIDATE
20467   / view=EMWS3.VarClus_VALIDATE
20468   ;
20469   set EMWS3.Part_VALIDATE
20470   ;
20471   %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas.
20472  +*** Begin Class Look-up, Standardization, Replacement ;
20473  +
20474  +*** Generate dummy variables for BOTHPAYM ;
20475  +label BOTHPAYM0 = 'BOTHPAYM=0' ;
20476  +label BOTHPAYM1 = 'BOTHPAYM=1' ;
20477  +if missing( BOTHPAYM ) then do;
20478  +   BOTHPAYM0 = .;
20479  +   BOTHPAYM1 = .;
20480  +end;
20481  +else do;
20482  +   length _dm4 $ 4; drop _dm4 ;
20483  +   _dm4 = put( BOTHPAYM , $4. );
20484  +   %DMNORMIP( _dm4 )
20485  +   if _dm4 = '0'  then do;
20486  +      BOTHPAYM0 = 1;
20487  +      BOTHPAYM1 = 0;
20488  +   end;
20489  +   else if _dm4 = '1'  then do;
20490  +      BOTHPAYM0 = 0;
20491  +      BOTHPAYM1 = 1;
20492  +   end;
20493  +   else do;
20494  +      delete;
20495  +   end;
20496  +end;
20497  +
20498  +*** Generate dummy variables for CCPAYM ;
20499  +label CCPAYM0 = 'CCPAYM=0' ;
20500  +label CCPAYM1 = 'CCPAYM=1' ;
20501  +if missing( CCPAYM ) then do;
20502  +   CCPAYM0 = .;
20503  +   CCPAYM1 = .;
20504  +end;
20505  +else do;
20506  +   length _dm4 $ 4; drop _dm4 ;
20507  +   _dm4 = put( CCPAYM , $4. );
20508  +   %DMNORMIP( _dm4 )
20509  +   if _dm4 = '0'  then do;
20510  +      CCPAYM0 = 1;
20511  +      CCPAYM1 = 0;
20512  +   end;
20513  +   else if _dm4 = '1'  then do;
20514  +      CCPAYM0 = 0;
20515  +      CCPAYM1 = 1;
20516  +   end;
20517  +   else do;
20518  +      delete;
20519  +   end;
20520  +end;
20521  +
20522  +*** Generate dummy variables for PCPAYM ;
20523  +label PCPAYM0 = 'PCPAYM=0' ;
20524  +label PCPAYM1 = 'PCPAYM=1' ;
20525  +if missing( PCPAYM ) then do;
20526  +   PCPAYM0 = .;
20527  +   PCPAYM1 = .;
20528  +end;
20529  +else do;
20530  +   length _dm4 $ 4; drop _dm4 ;
20531  +   _dm4 = put( PCPAYM , $4. );
20532  +   %DMNORMIP( _dm4 )
20533  +   if _dm4 = '0'  then do;
20534  +      PCPAYM0 = 1;
20535  +      PCPAYM1 = 0;
20536  +   end;
20537  +   else if _dm4 = '1'  then do;
20538  +      PCPAYM0 = 0;
20539  +      PCPAYM1 = 1;
20540  +   end;
20541  +   else do;
20542  +      delete;
20543  +   end;
20544  +end;
20545  +
20546  +*** Generate dummy variables for METHPAYM ;
20547  +label METHPAYMCC = 'METHPAYM=CC' ;
20548  +label METHPAYMCK = 'METHPAYM=CK' ;
20549  +label METHPAYMDK = 'METHPAYM=DK' ;
20550  +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
20551  +*** encoding is sparse, initialize to zero;
20552  +METHPAYMCC = 0;
20553  +METHPAYMCK = 0;
20554  +METHPAYMDK = 0;
20555  +METHPAYMXBOT = 0;
20556  +if missing( METHPAYM ) then do;
20557  +   METHPAYMCC = .;
20558  +   METHPAYMCK = .;
20559  +   METHPAYMDK = .;
20560  +   METHPAYMXBOT = .;
20561  +end;
20562  +else do;
20563  +   length _dm4 $ 4; drop _dm4 ;
20564  +   _dm4 = put( METHPAYM , $4. );
20565  +   %DMNORMIP( _dm4 )
20566  +   if _dm4 = 'CC'  then do;
20567  +      METHPAYMCC = 1;
20568  +   end;
20569  +   else if _dm4 = 'CK'  then do;
20570  +      METHPAYMCK = 1;
20571  +   end;
20572  +   else if _dm4 = 'XBOT'  then do;
20573  +      METHPAYMXBOT = 1;
20574  +   end;
20575  +   else if _dm4 = 'DK'  then do;
20576  +      METHPAYMDK = 1;
20577  +   end;
20578  +   else do;
20579  +      delete;
20580  +   end;
20581  +end;
20582  +
20583  +*** End Class Look-up, Standardization, Replacement ;
20584  +
20585  +
20586  +/*-------------------------------------------------*/
20587  +/* Varclus Score Code Begins*/
20588  +/*-------------------------------------------------*/
20589  +
20590  +Clus1 = 0 ; /*---Cluster Component 1------ */
20591  +Clus2 = 0 ; /*---Cluster Component 2------ */
20592  +Clus3 = 0 ; /*---Cluster Component 3------ */
20593  +Clus4 = 0 ; /*---Cluster Component 4------ */
20594  +Clus5 = 0 ; /*---Cluster Component 5------ */
20595  +Clus6 = 0 ; /*---Cluster Component 6------ */
20596  +Clus7 = 0 ; /*---Cluster Component 7------ */
20597  +Clus8 = 0 ; /*---Cluster Component 8------ */
20598  +Clus9 = 0 ; /*---Cluster Component 9------ */
20599  +Clus10 = 0 ; /*---Cluster Component 10------ */
20600  +Clus11 = 0 ; /*---Cluster Component 11------ */
20601  +Clus12 = 0 ; /*---Cluster Component 12------ */
20602  +Clus13 = 0 ; /*---Cluster Component 13------ */
20603  +Clus14 = 0 ; /*---Cluster Component 14------ */
20604  +Clus15 = 0 ; /*---Cluster Component 15------ */
20605  +Clus16 = 0 ; /*---Cluster Component 16------ */
20606  +Clus17 = 0 ; /*---Cluster Component 17------ */
20607  +Clus18 = 0 ; /*---Cluster Component 18------ */
20608  +Clus19 = 0 ; /*---Cluster Component 19------ */
20609  +Clus20 = 0 ; /*---Cluster Component 20------ */
20610  +Clus21 = 0 ; /*---Cluster Component 21------ */
20611  +Clus22 = 0 ; /*---Cluster Component 22------ */
20612  +Clus23 = 0 ; /*---Cluster Component 23------ */
20613  +Clus24 = 0 ; /*---Cluster Component 24------ */
20614  +Clus25 = 0 ; /*---Cluster Component 25------ */
20615  +Clus26 = 0 ; /*---Cluster Component 26------ */
20616  +Clus27 = 0 ; /*---Cluster Component 27------ */
20617  +Clus28 = 0 ; /*---Cluster Component 28------ */
20618  +Clus29 = 0 ; /*---Cluster Component 29------ */
20619  +Clus30 = 0 ; /*---Cluster Component 30------ */
20620  +Clus31 = 0 ; /*---Cluster Component 31------ */
20621  +Clus32 = 0 ; /*---Cluster Component 32------ */
20622  +Clus33 = 0 ; /*---Cluster Component 33------ */
20623  +Clus34 = 0 ; /*---Cluster Component 34------ */
20624  +Clus35 = 0 ; /*---Cluster Component 35------ */
20625  +Clus6 = Clus6+0.31049469798101 * (ACTBUY - 0.99109663409337)/1.16003174926523;
20626  +Clus9 = Clus9+0.32502227037692 * (BUYPROP - 0.18928931964407)/0.25656954904129;
20627  +Clus32 = Clus32+0.27053392066665 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
20628  +Clus7 = Clus7+0.36779194981722 * (DAYLAST - 1182.17608189855)/1226.0780195912;
20629  +Clus29 = Clus29+0.32606352949113 * (DEPT01 - 0.50547541492166)/1.82274128473225;
20630  +Clus29 = Clus29+0.31475903553413 * (DEPT02 - 0.29257018768419)/1.15307534710204;
20631  +Clus29 = Clus29+0.35680641258699 * (DEPT03 - 1.08161935784085)/2.82203775857088;
20632  +Clus29 = Clus29+0.31539445831064 * (DEPT04 - 0.68006824879789)/2.28175674515779;
20633  +Clus29 = Clus29+0.29360569691748 * (DEPT05 - 0.54295020939972)/1.52515347226129;
20634  +Clus32 = Clus32+0.17644386618702 * (DEPT06 - 0.85925236544129)/1.98131768775175;
20635  +Clus31 = Clus31+0.21799066207907 * (DEPT07 - 0.02559329920893)/0.31536747776311;
20636  +Clus31 = Clus31+0.33993271338746 * (DEPT08 - 0.31512331316891)/1.29408639394269;
20637  +Clus31 = Clus31+0.34186033539386 * (DEPT09 - 0.2486427795874)/1.20923480324609;
20638  +Clus31 = Clus31+0.35421920019149 * (DEPT10 - 0.39066232356134)/1.7648701612552;
20639  +Clus31 = Clus31+0.28393608567866 * (DEPT11 - 0.15141926477431)/0.76300583506574;
20640  +Clus31 = Clus31+0.38386073638767 * (DEPT12 - 0.21448735846129)/0.89341788675275;
20641  +Clus32 = Clus32+0.21094125773847 * (DEPT13 - 1.30395532805956)/2.58742913517547;
20642  +Clus1 = Clus1+0.14612398962451 * (DEPT14 - 0.83527221963704)/2.18699342328426;
20643  +Clus1 = Clus1+0.09702913619723 * (DEPT15 - 0.28949899177912)/1.23869079532202;
20644  +Clus1 = Clus1+0.09670854836259 * (DEPT16 - 0.22491081123002)/1.0272304883634;
20645  +Clus1 = Clus1+0.08864693290338 * (DEPT17 - 0.19466418489219)/0.960753111967;
20646  +Clus34 = Clus34+0.68513998203611 * (DEPT18 - 0.1317512021095)/0.70116887678934;
20647  +Clus34 = Clus34+0.68513998203611 * (DEPT19 - 0.07324336900884)/0.59281735227563;
20648  +Clus32 = Clus32+0.0549670760145 * (DEPT20 - 0.02956413835892)/0.31025698407933;
20649  +Clus33 = Clus33+1 * (DEPT21 - 0.01821002016441)/0.24509272697267;
20650  +Clus32 = Clus32+0.23307614189926 * (DEPT22 - 2.12771831859779)/3.55134640550257;
20651  +Clus32 = Clus32+0.20251555040293 * (DEPT23 - 2.14223669923995)/3.81941288304535;
20652  +Clus32 = Clus32+0.17413334206296 * (DEPT24 - 0.64039087947882)/1.70711269742472;
20653  +Clus6 = Clus6+0.26635393730034 * (DEPT25 - 1.77676438653637)/4.75421718243184;
20654  +Clus9 = Clus9+0.18580207423567 * (DEPT26 - 0.19075539010392)/0.91270742425277;
20655  +Clus32 = Clus32+0.16412176293701 * (DEPT27 - 0.58712579494338)/1.55259848403997;
20656  +Clus4 = Clus4+0.41745197007519 * (DOLINDEA - 47.8585866898046)/37.591191668842;
20657  +Clus1 = Clus1+0.22176651741164 * (DOLINDET - 197.869031487513)/314.244548218948;
20658  +Clus3 = Clus3+0.34040516245314 * (DOLL24 - 45.4938073522568)/93.9875146751151;
20659  +Clus24 = Clus24+0.53431022831305 * (DOLLARQ01 - 3.60255901969908)/18.9572343997303;
20660  +Clus23 = Clus23+0.53635920804358 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
20661  +Clus11 = Clus11+0.53251837592186 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
20662  +Clus16 = Clus16+0.53398718553838 * (DOLLARQ04 - 4.67856274236077)/22.181986153492;
20663  +Clus17 = Clus17+0.53548666653293 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
20664  +Clus13 = Clus13+0.53337003658551 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
20665  +Clus25 = Clus25+0.53620252678703 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
20666  +Clus27 = Clus27+0.54119921647341 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
20667  +Clus22 = Clus22+0.5349541071483 * (DOLLARQ09 - 4.29424383434155)/20.7683103640237;
20668  +Clus10 = Clus10+0.53279724233879 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
20669  +Clus15 = Clus15+0.53532885078822 * (DOLLARQ11 - 4.15352411974561)/20.8177653006881;
20670  +Clus6 = Clus6+0.3683415196646 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
20671  +Clus26 = Clus26+0.54383527719424 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
20672  +Clus20 = Clus20+0.54398954027119 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
20673  +Clus8 = Clus8+0.53531614157592 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
20674  +Clus18 = Clus18+0.53714970024584 * (DOLLARQ16 - 7.79008624166278)/31.0104071776129;
20675  +Clus3 = Clus3+0.44436827521592 * (DOLLARQ17 - 5.57017403443462)/26.1415799982751;
20676  +Clus19 = Clus19+0.53306278493927 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
20677  +Clus14 = Clus14+0.53462067704059 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
20678  +Clus9 = Clus9+0.37631589198989 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
20679  +Clus21 = Clus21+0.53908041935557 * (DOLLARQ21 - 4.74636513106871)/24.2680885720031;
20680  +Clus12 = Clus12+0.53808320116509 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
20681  +Clus4 = Clus4+0.41538876032442 * (DOLNETDA - 45.411597554134)/36.1502695431938;
20682  +Clus1 = Clus1+0.22085514615169 * (DOLNETDT - 189.18095548317)/303.615750735173;
20683  +Clus1 = Clus1+0.19970567328905 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
20684  +Clus7 = Clus7+0.36779707552659 * (MONLAST - 38.7579959671164)/40.2783526824403;
20685  +Clus35 = Clus35+1 * (TENURE - 83.4682798200713)/60.0499642836247;
20686  +Clus24 = Clus24+0.53431022831305 * (TOTORDQ01 - 0.07833100666976)/0.31375640071534;
20687  +Clus23 = Clus23+0.53635920804358 * (TOTORDQ02 - 0.07383279044516)/0.30498525646648;
20688  +Clus11 = Clus11+0.53251837592187 * (TOTORDQ03 - 0.05841476655808)/0.25663649019308;
20689  +Clus16 = Clus16+0.53398718553838 * (TOTORDQ04 - 0.09058476810919)/0.33923460400983;
20690  +Clus17 = Clus17+0.53548666653293 * (TOTORDQ05 - 0.08766868310842)/0.32373427535999;
20691  +Clus13 = Clus13+0.53337003658551 * (TOTORDQ06 - 0.08068869241507)/0.31127041208068;
20692  +Clus25 = Clus25+0.53620252678703 * (TOTORDQ07 - 0.08583837443772)/0.3225455818214;
20693  +Clus27 = Clus27+0.54119921647341 * (TOTORDQ08 - 0.11782224290367)/0.39692742169452;
20694  +Clus22 = Clus22+0.5349541071483 * (TOTORDQ09 - 0.09120521172638)/0.32676782706381;
20695  +Clus10 = Clus10+0.53279724233879 * (TOTORDQ10 - 0.07501163331782)/0.2991488551838;
20696  +Clus15 = Clus15+0.53532885078822 * (TOTORDQ11 - 0.08630370715061)/0.31791570298113;
20697  +Clus6 = Clus6+0.38864318218989 * (TOTORDQ12 - 0.12619823173569)/0.4074226605598;
20698  +Clus26 = Clus26+0.54383527719424 * (TOTORDQ13 - 0.10832945556072)/0.35251925488707;
20699  +Clus20 = Clus20+0.54398954027119 * (TOTORDQ14 - 0.08894059252365)/0.31938115502111;
20700  +Clus8 = Clus8+0.53531614157592 * (TOTORDQ15 - 0.09821622460058)/0.342400248125;
20701  +Clus18 = Clus18+0.53714970024584 * (TOTORDQ16 - 0.14620753838994)/0.42506049526083;
20702  +Clus3 = Clus3+0.42389042465751 * (TOTORDQ17 - 0.108267411199)/0.35925036974258;
20703  +Clus19 = Clus19+0.53306278493927 * (TOTORDQ18 - 0.09319063130138)/0.32753587031264;
20704  +Clus14 = Clus14+0.53462067704059 * (TOTORDQ19 - 0.08217775709632)/0.30645832771871;
20705  +Clus9 = Clus9+0.40129080124664 * (TOTORDQ20 - 0.15985729796804)/0.46170113594525;
20706  +Clus21 = Clus21+0.53908041935557 * (TOTORDQ21 - 0.09182565534357)/0.32980785722872;
20707  +Clus12 = Clus12+0.53808320116509 * (TOTORDQ22 - 0.08611757406545)/0.31443413012517;
20708  +Clus1 = Clus1+0.21191459192951 * (UNITSIDD - 10.9602916085)/17.1055734908767;
20709  +Clus4 = Clus4+0.30018376965081 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
20710  +Clus30 = Clus30+1 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
20711  +Clus5 = Clus5+-0.33333333333333 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
20712  +Clus5 = Clus5+0.33333333333333 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
20713  +Clus2 = Clus2+-0.33333333333333 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
20714  +Clus2 = Clus2+0.33333333333333 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
20715  +Clus28 = Clus28+-0.33333333333333 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
20716  +Clus28 = Clus28+0.33333333333333 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
20717  +Clus2 = Clus2+0.33333333333333 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
20718  +Clus28 = Clus28+0.33333333333333 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
20719  +Clus7 = Clus7+0.32661485207285 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
20720  +Clus5 = Clus5+0.33333333333333 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
NOTE: %INCLUDE (level 1) ending.
20721   run;
 
NOTE: DATA STEP view saved on file EMWS3.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.03 seconds
 
 
20722   quit;
20723   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
20725   *------------------------------------------------------------*;
20726   * VarClus: Computing metadata for TRAIN data;
20727   *------------------------------------------------------------*;
 
NOTE: View EMWS3.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS3.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS3.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 25, 2020
Time:                11:48:30
*------------------------------------------------------------*
21130   %let EMEXCEPTIONSTRING=;
21131   *------------------------------------------------------------*;
21132   * REPORT: VarClus;
21133   *------------------------------------------------------------*;
21134   %let EM_ACTION = REPORT;
21135   %let syscc = 0;
21136
21137   %macro main;
21138
21139      filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
21140      %include temp;
21141      filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
21142      %include temp;
21143      filename temp;
21144
21145     %SetProperties;
21146
21147      %if %upcase(&EM_ACTION) = CREATE %then %do;
21148          filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
21149          %include temp;
21150          filename temp;
21151          %create;
21152      %end;
21153      %else
21154      %if %upcase(&EM_ACTION) = TRAIN %then %do;
21155           filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
21156              %include temp;
21157              filename temp;
21158              %train;
21159      %end;
21160      %else
21161      %if %upcase(&EM_ACTION) = SCORE %then %do;
21162              filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
21163              %include temp;
21164              filename temp;
21165              %score;
21166      %end;
21167      %else
21168      %if %upcase(&EM_ACTION) = REPORT %then %do;
21169              filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
21170              %include temp;
21171              filename temp;
21172              %report;
21173      %end;
21174      /*
21175      %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
21176          %put 'OPENING TABLE';
21177      %end;
21178      %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
21179          %put 'CLOSE TABLE';
21180      %end;
21181      */
21182   %mend main;
21183   %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
21184  +
21185  +/* Initialize property macro variables */
21186  +%macro SetProperties;
21187  +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
21188  +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
21189  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
21190  +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
21191  +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
21192  +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
21193  +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
21194  +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
21195  +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
21196  +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
21197  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
21198  +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
21199  +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
21200  +
21201  +%mend SetProperties;
21202  +
21203  +%Macro MakeDummyVariables(indata=,
21204  +                          outvar=,
21205  +                          outdata=,
21206  +                          fileref=,
21207  +                          recreatecmeta=N, /* optional */
21208  +                          incmeta=,     /* optional */
21209  +                          outcmeta=,    /* optional */
21210  +                          ndummyvars=_ndummyvars
21211  +                          );
21212  +    %global &ndummyvars;
21213  +
21214  +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
21215  +       class
21216  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
21217  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
21218  +    ;
21219  +    run;
21220  +    %let &ndummyvars = 0;
21221  +    data _null_;
21222  +    %let dsid = %sysfunc(open(work._classout));
21223  +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
21224  +    %let dsid = %sysfunc(close(&dsid));
21225  +    run;
21226  +
21227  +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
21228  +       input
21229  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
21230  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
21231  +        / level=nominal stdize=no;
21232  +       make outvar = &outvar;
21233  +       score data = &indata out =&outdata;
21234  +       code  file=  "&fileref";
21235  +    run;
21236  +    %if &recreatecmeta eq Y %then %do;
21237  +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
21238  +    data _tmpds;
21239  +        set _tmpds;
21240  +           ROLE = 'INPUT';
21241  +           LEVEL = 'INTERVAL';
21242  +           CREATOR='DMZIP';
21243  +           if NAME = '_TYPE_' then delete;
21244  +    run;
21245  +    data &outcmeta;
21246  +         set &incmeta _tmpds;
21247  +    run;
21248  +    %end;
21249  +    proc datasets lib=work nolist;
21250  +      delete  _dmdbdat _dmdbcat _classout
21251  +    %if &recreatecmeta eq Y %then %do;
21252  +    _tmpds
21253  +    %end;
21254  +    ;
21255  +    quit;
21256  +%Mend MakeDummyVariables;
21257  +
21258  +/*--- Determine Optimal Number of Cluster ----
21259  +%macro FindClusNum(statds=, groupds=, minvariation=);
21260  +   %global optnclus;
21261  +   data varclus_tmp(drop=_NAME_);
21262  +      set &statDs;
21263  +      where _type_ ='PROPOR';
21264  +   run;
21265  +   proc sort data=varclus_tmp;
21266  +      by _NCL_;
21267  +   run;
21268  +   proc transpose data=varclus_tmp out=varclus_tmp;
21269  +      by _NCL_;
21270  +      var %EM_INTERVAL_INPUT
21271  +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21272  +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21273  +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
21274  +          %do i = 2 %to &nvar;
21275  +          %let varname = %sysfunc(varname(&dsid, &i));
21276  +          &varname
21277  +          %end;
21278  +      %end;
21279  +   ;
21280  +   run;
21281  +
21282  +   %if &minVariation eq %then %do;
21283  +       %let minVariation = &EM_PROPERTY_MINVARIATION;
21284  +   %end;
21285  +   %if ^(0<&minVariation<100) %then %do;
21286  +       %let minVariation = 90;
21287  +   %end;
21288  +
21289  +   data _null_;
21290  +      set varclus_tmp end=eof;
21291  +      by _NCL_;
21292  +      retain flag 0;
21293  +      if first._ncl_ then flag=0;
21294  +      if .<col1 < &minVariation then flag=1;
21295  +      if last._ncl_ and ^flag then do;
21296  +         call symput('OPTNCL', _ncl_);
21297  +         stop;
21298  +      end;
21299  +     if eof then call symput('OPTNCL', _ncl_);
21300  +   run;
21301  +
21302  +   %let optnclus = &OPTNCL;
21303  +
21304  +   data varclus_tmp(drop=_NCL_ _NAME_);
21305  +      set &statDs;
21306  +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
21307  +   run;
21308  +   proc sort data=varclus_tmp;
21309  +      by _TYPE_;
21310  +   run;
21311  +   proc transpose data=varclus_tmp out=varclus_tmp;
21312  +      by _TYPE_;
21313  +   run;
21314  +   proc sort data=varclus_tmp;
21315  +      by _name_ _type_;
21316  +   run;
21317  +
21318  +  proc transpose data=varclus_tmp out=&groupds;
21319  +      by _NAME_;
21320  +   run;
21321  +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
21322  +      by Cluster descending Rsquare;
21323  +      where Cluster ne 0;
21324  +   run;
21325  +   proc datasets lib=work nolist mt=(DATA VIEW);
21326  +      delete varclus_tmp;
21327  +   run;
21328  +   quit;
21329  +%mend findClusNum;
21330  +*/
21331  +
21332  +%macro getNclusfromTrain(inoutstat=, nc=);
21333  +%global &nc;
21334  +data _null_;
21335  +    set &inoutstat end=eof;
21336  +    if eof then do;
21337  +    call symput("&nc", _ncl_);
21338  +    end;
21339  +run;
21340  +%mend  getNclusfromTrain;
21341  +
21342  +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
21343  +
21344  +     *--- Build Code to Modify Metadata ---*;
21345  +     filename X "&deltacodefile";
21346  +     data _null_;
21347  +        FILE X;
21348  +        set &groupds end=eof;
21349  +        /*by Cluster;*/
21350  +         if _N_=1 then do;
21351  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21352  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
21353  +           %end;
21354  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
21355  +           put "if upcase(strip(NAME)) in (";
21356  +        end;
21357  +        if Strip(upcase(Selected)) eq 'YES' then do;
21358  +           string = '"'!!trim(left(VARIABLE))!!'"';
21359  +           put string;
21360  +        end;
21361  +        if eof then do;
21362  +           put ') then ROLE="INPUT";';
21363  +           put 'else ROLE="REJECTED";';
21364  +           put 'end;';
21365  +
21366  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
21367  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
21368  +           %end;
21369  +        end;
21370  +     run;
21371  +     quit;
21372  +
21373  +     filename X;
21374  +
21375  +     quit;
21376  +%mend MakeDeltaCode;
21377  +
21378  +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
21379  +    %if ^%sysfunc(exist(&statds)) %then %do;
21380  +         %goto doendc;
21381  +    %end;
21382  +
21383  +    data &corrds(drop=_TYPE_ _NCL_) ;
21384  +       set &statds;
21385  +       where _type_ eq 'CORR' ;
21386  +    run ;
21387  +    proc sort data=&corrds;
21388  +       by _NAME_ ;
21389  +    run ;
21390  +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
21391  +      BY _NAME_ ;
21392  +    run ;
21393  +    data &corrplotds;
21394  +       length _Y_ $100;
21395  +       set &corrplotDs;
21396  +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
21397  +    run ;
21398  +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
21399  +       set &corrplotds;
21400  +       where _LABEL_ ne '' ;
21401  +       keep _TMP_ _LABEL_ ;
21402  +    run ;
21403  +    data _null_;
21404  +       nobs=0;
21405  +       dsid = open('varclus_match');
21406  +       if dsid then do;
21407  +          nobs = attrn(dsid, 'NOBS');
21408  +          dsid = close(dsid);
21409  +       end;
21410  +       call symput ('CORR_NOBS', nobs);
21411  +    run;
21412  +    %if &corr_nobs %then %do;
21413  +        proc sort data=varclus_match;
21414  +           by _name_;
21415  +        run ;
21416  +        proc sort data=&corrplotds;
21417  +           by _name_;
21418  +        run ;
21419  +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
21420  +           merge varclus_match &corrplotds;
21421  +           by _NAME_ ;
21422  +           if _X_ eq '' then _X_=_NAME_ ;
21423  +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21424  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21425  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21426  +
21427  +       run ;
21428  +    %end;
21429  +    %else %do;
21430  +        proc sort data=&corrplotds;
21431  +           by _name_;
21432  +        run ;
21433  +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
21434  +           set &corrplotds;
21435  +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21436  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21437  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21438  +
21439  +        run ;
21440  +    %end;
21441  +    proc sort data=&corrplotds;
21442  +       by _X_ _Y_;
21443  +    run ;
21444  +    proc datasets lib=work nolist mt=(DATA VIEW);
21445  +       delete varclus_match;
21446  +    run;
21447  +    quit;
21448  +
21449  +%doendc:
21450  +
21451  +%mend MakeVarClusCorrData;
21452  +
21453  +%macro MakeStatPlotData(statds= , outstatplotds=);
21454  +   %if %sysfunc(exist(&statds)) %then %do;
21455  +
21456  +       data varclus_tmp(drop=_NAME_ _NCL_) ;
21457  +          set &statDs;
21458  +          where _type_ in('MEAN', 'STD', 'N');
21459  +       run ;
21460  +       proc transpose data=varclus_tmp out=&outstatplotds;
21461  +          id _TYPE_ ;
21462  +       run ;
21463  +       data &outstatplotds;
21464  +          set &outstatplotds(obs=1000);
21465  +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
21466  +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21467  +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
21468  +          else SCALEDSTD= STD ;
21469  +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
21470  +       run ;
21471  +       proc sort data=&outstatplotds;
21472  +          by descending SCALEDSTD ;
21473  +       run ;
21474  +       proc datasets lib=work nolist mt=(DATA VIEW);
21475  +          delete varclus_tmp;
21476  +       run;
21477  +       quit;
21478  +    %end;
21479  +
21480  +%mend MakeStatPlotData;
21481  +
21482  +
21483  +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
21484  +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
21485  +    data &EM_USER_OUTSTATSCORE;
21486  +          set &indata;
21487  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
21488  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21489  +          if _TYPE_ = 'STD' then _NAME_='STD';
21490  +          DROP _TYPE_ _NCL_;
21491  +     run;
21492  +
21493  +     filename _file_  "&fileRef";
21494  +
21495  +     data _null_;
21496  +        FILE _file_ MOD;
21497  +        put ' ';
21498  +        put '/*-------------------------------------------------*/';
21499  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
21500  +        put '/*-------------------------------------------------*/';
21501  +        put ' ';
21502  +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
21503  +
21504  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21505  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21506  +
21507  +        %let k = 1;
21508  +        %do %while(^%sysfunc(fetch(&dsid)));
21509  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21510  +                %if &k > 2 %then %do;
21511  +                 %let cn = %eval(&k-2);
21512  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
21513  +                %end;
21514  +                %let k = %eval(&k+1);
21515  +        %end;
21516  +
21517  +        %let rc = %sysfunc(rewind(&dsid));
21518  +
21519  +        %do i= 2 %to &nvar;
21520  +            %let _varname =  %sysfunc(varname(&dsid, &i));
21521  +            %do %while(^%sysfunc(fetch(&dsid)));
21522  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21523  +                %if &_name = MEAN %then
21524  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
21525  +                %else %if &_name = STD %then
21526  +                %let _std = %sysfunc(getvarn(&dsid, &i));
21527  +                %else %do;
21528  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
21529  +                      %let abscoeff = %sysfunc(abs(&coeff));
21530  +                          %if &abscoeff >  0 %then %do;
21531  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21532  +                           %end;
21533  +                 %end;
21534  +             %end;
21535  +             %let rc = %sysfunc(rewind(&dsid));
21536  +         %end;
21537  +
21538  +        %let dsid= %sysfunc(close(&dsid));
21539  +       run;
21540  +%mend CreateScoreCode;
21541  +
21542  +
21543  +
21544  +/*----------------------------------------------------------
21545  +    Instead of using %MakeRSquareData,
21546  +    %MakeVarClusResultTable at macro2.source is used
21547  + +----------------------------------------------------------*/
21548  +
21549  +
21550  +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
21551  +
21552  +/* modifying  from ods rsquare = data */
21553  +
21554  +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
21555  +    Length Cluster $16;
21556  +    length Variable $32;
21557  +    Length VariableLabel $64;
21558  +    set &indata; retain CurrentCluster;
21559  +    if NumberOfClusters ^= &ncluster then delete;
21560  +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
21561  +    CurrentCluster = Cluster;
21562  +   run;
21563  +proc sort data =&outdata ;
21564  +     by Cluster RsquareRatio;
21565  +run;
21566  +data _tmprsq(drop=index);
21567  +     set &outdata; by Cluster;
21568  +     if first.Cluster then do;
21569  +     index = strip(scan(Cluster,2 ));
21570  +     Variable = "Clus"||index;
21571  +     VariableLabel = "Cluster Component "||index;
21572  +     OwnCluster = 1;
21573  +     NextClosest = .;
21574  +     RsquareRatio = 0;
21575  +     output;
21576  +     end;
21577  +run;
21578  +
21579  +proc sort data = _tmprsq ;
21580  +     by Cluster RsquareRatio;
21581  +run;
21582  +data &outdata;
21583  +     set &outdata _tmprsq;
21584  +by Cluster;
21585  +run;
21586  +
21587  +
21588  +/* Just create the Selected variable with all YES */
21589  +
21590  +data &outdata;
21591  +    set &outdata; by cluster;
21592  +    length Selected $8;
21593  +    Selected = 'YES';
21594  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21595  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21596  +    rename OwnCluster = RSqWithClusterComp;
21597  +    rename NextClosest = RSqWithNextClusComp;
21598  +run;
21599  +
21600  +
21601  +/* Selected = Y/N will be done %score section -----
21602  +
21603  +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
21604  +data &outdata;
21605  +    set &outdata; by cluster;
21606  +    length Selected $8;
21607  +    if first.Cluster then Selected = 'YES';
21608  +    else Selected = 'NO';
21609  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21610  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21611  +    rename OwnCluster = RSqWithClusterComp;
21612  +    rename NextClosest = RSqWithNextClusComp;
21613  +run;
21614  +%end;
21615  +%else %do;
21616  +data &outdata;
21617  +    set &outdata; by cluster;
21618  +    if last.Cluster then Selected = 'YES';
21619  +    else Selected = 'NO';
21620  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21621  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21622  +    rename OwnCluster = RSqWithClusterComp;
21623  +    rename NextClosest = RSqWithNextClusComp;
21624  +run;
21625  +%end;
21626  +---------------------------------------------------------------*/
21627  +
21628  +%if %sysfunc(exist(&inClusRSquare)) %then %do;
21629  +/* to calculate NextClosestClusRsq */
21630  +proc transpose data = &inClusRSquare  out=_clusRsq;
21631  +      by cluster;
21632  +      run;
21633  +data _clusRsq;
21634  +     set _clusRsq;
21635  +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
21636  +run;
21637  +
21638  +proc sort data=_clusRsq;
21639  +    by cluster col1;
21640  +    run;
21641  +data _clusRsq(drop=_NAME_ _LABEL_);
21642  +     set _clusRsq; by cluster;
21643  +     if last.Cluster then output;
21644  +     label  COL1 = 'R-Sqaure with Next Cluster Component';
21645  +     rename COL1 = RSqWithNextClusComp;
21646  +     rename Cluster = Variable;
21647  +     label  Cluster = "Variable";
21648  +run;
21649  +
21650  +proc sort data =&outdata;
21651  +     by Variable;
21652  +run;
21653  +data &outdata;
21654  +    merge &outdata _clusRsq;
21655  +    by Variable;
21656  +run;
21657  +proc sort data =&outdata;
21658  +by Cluster  RsquareRatio;
21659  +run;
21660  +quit;
21661  +%end;
21662  +
21663  +proc datasets lib = work nolist;
21664  +     delete _tmprsq _clusRsq;
21665  +     run;
21666  +quit;
21667  +
21668  +%mend MakeRSquareData;
21669  +
21670  +
21671  +/*-------------------------------------------------------------------------*/
21672  +
21673  +
21674  +
21675  +%macro ModifyCorr(indata=,
21676  +                  outdata=,
21677  +                  rsquare = Y
21678  +                  );
21679  +    data corr_tmp;
21680  +        set &indata;
21681  +    run;
21682  +     proc sql;
21683  +           update &indata
21684  +           set
21685  +     %let dsid = %sysfunc(open(work.corr_tmp));
21686  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21687  +          %do i = 4 %to &nvar;
21688  +          %let _name = %sysfunc(varname(&dsid, &i));
21689  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21690  +            %else  %let _name_md = &_name;
21691  +            %if &i < &nvar %then %do;
21692  +               &_name = 1- &_name_md ,
21693  +            %end;
21694  +            %else %do;
21695  +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
21696  +            %end;
21697  +          %end;
21698  +      %let dsid= %sysfunc(close(&dsid));
21699  +
21700  +      select * from &indata;
21701  +      run;
21702  +      proc datasets lib = work nolist;
21703  +           delete corr_tmp;
21704  +      run;
21705  +      quit;
21706  +
21707  + %mend ModifyCorr;
21708  +
21709  + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
21710  +    data &outdata(drop= _NCL_  _TYPE_);
21711  +       set &indata;
21712  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21713  +       rename _NAME_ = Cluster;
21714  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21715  +    run;
21716  +    %if &RSquare eq Y %then %do;
21717  +     data corr_tmp;
21718  +        set &outdata;
21719  +     run;
21720  +
21721  +     data &outdata(drop=i);
21722  +          set &outdata;
21723  +          %let dsid = %sysfunc(open(work.corr_tmp));
21724  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21725  +          %do i = 2 %to &nvar;
21726  +            %let _name = %sysfunc(varname(&dsid, &i));
21727  +            %let _name_md = &_name.**2;
21728  +                &_name = &_name_md;
21729  +          %end;
21730  +      %let dsid= %sysfunc(close(&dsid));
21731  +      run;
21732  +      proc datasets lib = work nolist;
21733  +           delete corr_tmp;
21734  +      run;
21735  +
21736  +    %end;
21737  +     quit;
21738  +%mend MakeClusStructCorrData;
21739  +
21740  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
21741  +    data &outdata(drop= _NCL_  _TYPE_);
21742  +       set &indata;
21743  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21744  +       rename _NAME_ = Cluster;
21745  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21746  +    run;
21747  +    data corr_tmp;
21748  +        set &outdata;
21749  +    run;
21750  +
21751  +    %let dsid = %sysfunc(open(work.corr_tmp));
21752  +    %let nclus2= %eval(&ncluster+1);
21753  +    data &outdata;
21754  +         set &outdata;
21755  +          %do i = 2 %to &nclus2;
21756  +          %let i_1 = %eval(&i-1);
21757  +            %let _name = %sysfunc(varname(&dsid, &i));
21758  +            %let _newName = Clus&i_1;
21759  +                rename &_name = &_newName; ;
21760  +                *label &_name ="Cluster &i_1";
21761  +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21762  +          %end;
21763  +          keep Cluster
21764  +          %do i = 2 %to &nclus2;
21765  +                %let _name = %sysfunc(varname(&dsid, &i));
21766  +                &_name
21767  +          %end;
21768  +          ;
21769  +    %let dsid= %sysfunc(close(&dsid));
21770  +     run;
21771  +     quit;
21772  +
21773  +    %if &RSquare eq Y %then %do;
21774  +
21775  +       data corr_tmp;
21776  +        set &outdata;
21777  +     run;
21778  +
21779  +     data &outdata(drop=i);
21780  +          set &outdata;
21781  +          %let dsid = %sysfunc(open(work.corr_tmp));
21782  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21783  +          %do i = 2 %to &nvar;
21784  +            %let _name = %sysfunc(varname(&dsid, &i));
21785  +            %let _name_md = &_name.**2;
21786  +                &_name = &_name_md;
21787  +          %end;
21788  +      %let dsid= %sysfunc(close(&dsid));
21789  +      run;
21790  +    %end;
21791  +
21792  +    %if &makeplotds eq Y %then %do;
21793  +     proc transpose data = &outdata
21794  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21795  +          by cluster;
21796  +     run;
21797  +     data &plotds;
21798  +          set  &plotds;
21799  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21800  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21801  +     run;
21802  +     %end;
21803  +     proc datasets lib = work nolist;
21804  +           delete corr_tmp;
21805  +     run;
21806  +     quit;
21807  +%mend MakeInterClusCorrData;
21808  +
21809  +
21810  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21811  +
21812  +data &outlink(drop = Selected);
21813  +     set &indata;
21814  +     LINKID = _N_;
21815  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21816  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21817  +run;
21818  +data &outnode(keep=NODEID TYPE LABEL);
21819  +    set &indata;
21820  +    length TYPE $16;
21821  +    rename Variable = NODEID;
21822  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21823  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21824  +    then  TYPE = "CLUSTER";
21825  +    else  TYPE="VARIABLE";
21826  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21827  +run;
21828  +quit;
21829  +%mend MakeClusConstellData;
21830  +
21831  +
21832  +
21833  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21834  +
21835  +data &outlink(drop = Selected);
21836  +     set &indata;
21837  +     LINKID = _N_;
21838  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21839  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21840  +run;
21841  +data &outnode(keep=NODEID TYPE LABEL);
21842  +    set &indata;
21843  +    length TYPE $16;
21844  +    rename Variable = NODEID;
21845  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21846  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21847  +    then  TYPE = "CLUSTER";
21848  +    else  TYPE="VARIABLE";
21849  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21850  +run;
21851  +quit;
21852  +%mend MakeClusConstellData;
21853  +
21854  +
21855  +/*--- This will work only when inds is not a view data -------
21856  +
21857  +%macro getNVarNObs(inds=, nvar=, nobs=);
21858  +
21859  +    %global &nvar;
21860  +    %global &nobs;
21861  +    data _null_;
21862  +         dsid = open("&inds");
21863  +         nv = attrn(dsid, 'NVAR');
21864  +         no = attrn(dsid, 'NOBS');
21865  +         dsid = close(dsid);
21866  +         call symput("&nvar", nv);
21867  +         call symput("&nobs", no);
21868  +    run;
21869  +    quit;
21870  +%mend  getNVarNObs;
21871  +
21872  ++---------------------------------------------------------------*/
21873  +
21874  +
21875  +%macro getNVar(inds=, nvar=);
21876  +    %global &nvar;
21877  +    data _null_;
21878  +         dsid = open("&inds");
21879  +         nv = attrn(dsid, 'NVAR');
21880  +         dsid = close(dsid);
21881  +         call symput("&nvar", nv);
21882  +    run;
21883  +    quit;
21884  +%mend  getNVar;
21885  +
21886  +
21887  +
21888  +%macro getNObs(inds=, nobs=);
21889  +    %global &nobs;
21890  +    data _null_;
21891  +        set &inds end=eof;
21892  +        if eof then call symput("&nobs", _N_);
21893  +    run;
21894  +    quit;
21895  +%mend  getNObs;
21896  +
21897  +%Macro CreateVarclusMeta(trainnum=);
21898  +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21899  +    data &EM_USER_VARCLUSMETA;
21900  +         length TrainNum 8.;
21901  +         length NewTrain $8;
21902  +         length NGCluster 8.;
21903  +         length ExportedComp $16;
21904  +         length HideVariable $8;
21905  +         TrainNum = &trainnum;
21906  +         NewTrain = "Y";
21907  +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
21908  +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
21909  +         NGCluster = 0; /* zero means no twostage */
21910  +   run;
21911  +   quit;
21912  +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
21913  +
21914  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
21915  +    data &outdata(drop= _NCL_  _TYPE_);
21916  +       set &indata;
21917  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21918  +       %if &globalclusid ne %then %do;
21919  +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21920  +       rename _NAME_ = Cluster;
21921  +       %end;
21922  +       %else %do;
21923  +        _NAME_ = upcase(_NAME_);
21924  +       rename _NAME_ = Cluster;
21925  +       %end;
21926  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21927  +    run;
21928  +    data corr_tmp;
21929  +        set &outdata;
21930  +    run;
21931  +
21932  +    %let dsid = %sysfunc(open(work.corr_tmp));
21933  +    %let nclus2= %eval(&ncluster+1);
21934  +    data &outdata;
21935  +         set &outdata;
21936  +          %do i = 2 %to &nclus2;
21937  +          %let i_1 = %eval(&i-1);
21938  +            %let _name = %sysfunc(varname(&dsid, &i));
21939  +            %if &globalclusid ne %then
21940  +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
21941  +                     rename &_name = &_newName;
21942  +                     *label &_name ="GC &globalclusid : Cluster &i_1";
21943  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
21944  +                %end;
21945  +            %else
21946  +                %do; %let _newName = CLUS&i_1;
21947  +                     rename &_name = &_newName;
21948  +                     *label &_name ="Cluster &i_1";
21949  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21950  +                %end;
21951  +          %end;
21952  +          keep Cluster
21953  +          %do i = 2 %to &nclus2;
21954  +                %let _name = %sysfunc(varname(&dsid, &i));
21955  +                &_name
21956  +          %end;
21957  +          ;
21958  +    %let dsid= %sysfunc(close(&dsid));
21959  +     run;
21960  +     quit;
21961  +
21962  +    %if &RSquare eq Y %then %do;
21963  +
21964  +       data corr_tmp;
21965  +        set &outdata;
21966  +     run;
21967  +
21968  +     data &outdata;
21969  +          set &outdata;
21970  +          %let dsid = %sysfunc(open(work.corr_tmp));
21971  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21972  +          %do i = 2 %to &nvar;
21973  +            %let _name = %sysfunc(varname(&dsid, &i));
21974  +            %let _name_md = &_name.**2;
21975  +                &_name = &_name_md;
21976  +          %end;
21977  +      %let dsid= %sysfunc(close(&dsid));
21978  +      run;
21979  +    %end;
21980  +
21981  +    %if &makeplotds eq Y %then %do;
21982  +     proc transpose data = &outdata
21983  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21984  +          by cluster;
21985  +     run;
21986  +     data &plotds;
21987  +          set  &plotds;
21988  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21989  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21990  +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21991  +     run;
21992  +     %end;
21993  +     proc datasets lib = work nolist;
21994  +           delete corr_tmp;
21995  +     run;
21996  +     quit;
21997  +%mend MakeInterClusCorrData;
21998  +
21999  +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
22000  +    data _tmpds(drop= _NCL_);
22001  +       set &indata;
22002  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
22003  +       %if &globalclusid ne %then %do;
22004  +           _NAME_ = "GC&globalclusid.";
22005  +       rename _NAME_ = Cluster;
22006  +       %end;
22007  +       %else %do;
22008  +        _NAME_ = "CLUS";
22009  +        rename _NAME_ = Cluster;
22010  +       %end;
22011  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
22012  +    run;
22013  +    proc transpose data =_tmpds out =&outdata;
22014  +    run;
22015  +
22016  +    data &outdata(drop=COL1);
22017  +        %if &globalclusid ne %then %do;
22018  +        length GCluster $16;
22019  +        %end;
22020  +        length Cluster $32;
22021  +        length _NAME_ $32;
22022  +         set &outdata;
22023  +         _NAME_ = upcase(_NAME_);
22024  +         rename _NAME_=Variable;
22025  +         *label _NAME_="Variable";
22026  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22027  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22028  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22029  +
22030  +         %if &globalclusid ne %then %do;
22031  +          GCluster = "GC&globalclusid";
22032  +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
22033  +         %end;
22034  +         %else %do;
22035  +         Cluster = "CLUS"||strip(COL1);
22036  +        %end;
22037  +         rename COL2 = RSqWithOwnClusComp;
22038  +         *label COL2 = "R-Square With Own Cluster Component";
22039  +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
22040  +
22041  +   run;
22042  +   proc sort data =&outdata;
22043  +        by Cluster RSqWithOwnClusComp;
22044  +   run;
22045  +   proc datasets lib = work nolist;
22046  +           delete _tmpds;
22047  +   run;
22048  +   quit;
22049  +%mend MakeOwnRSquare;
22050  +
22051  +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
22052  +    data &outdata(drop= _NCL_  _TYPE_);
22053  +       %if &globalclusid ne %then %do;
22054  +        length GCluster $16;
22055  +        %end;
22056  +       set &indata;
22057  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
22058  +       %if &globalclusid ne %then %do;
22059  +         GCluster = "GC&globalclusid";
22060  +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
22061  +         rename _NAME_ = Cluster;
22062  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22063  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22064  +
22065  +       %end;
22066  +       %else %do;
22067  +         _NAME_ = upcase(_NAME_);
22068  +         rename _NAME_ = Cluster;
22069  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22070  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22071  +
22072  +       %end;
22073  +     run;
22074  +    %if &RSquare eq Y %then %do;
22075  +     data corr_tmp;
22076  +          set &outdata;
22077  +     run;
22078  +     %let istart = 2;
22079  +     %if &globalclusid ne %then %let istart = 3;
22080  +     data &outdata;
22081  +          set &outdata;
22082  +          %let dsid = %sysfunc(open(work.corr_tmp));
22083  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
22084  +          %do i =&istart %to &nvar;
22085  +            %let _name = %sysfunc(varname(&dsid, &i));
22086  +            %let _name_md = &_name.**2;
22087  +                &_name = &_name_md;
22088  +          %end;
22089  +      %let dsid= %sysfunc(close(&dsid));
22090  +      run;
22091  +      proc datasets lib = work nolist;
22092  +           delete corr_tmp;
22093  +      run;
22094  +    %end;
22095  +     quit;
22096  +%mend MakeClusStructCorrData;
22097  +
22098  +/*
22099  +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
22100  +*/
22101  +
22102  +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
22103  +
22104  +     /* The indata should be the outdata
22105  +        from %MakeClusStructCorrData(indata=, outdata=, ); */
22106  +
22107  +     proc sort data =&indata out=_tmpclusRsq;
22108  +     by cluster;
22109  +     run;
22110  +
22111  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
22112  +      by cluster;
22113  +     run;
22114  +
22115  +     proc sort data=_tmpclusRsq;
22116  +        by _NAME_ COL1;
22117  +     run;
22118  +
22119  +     data _tmpclusRsq;
22120  +         length _NAME_ $32;
22121  +         set _tmpclusRsq; by _NAME_;
22122  +          _NAME_ = upcase(_NAME_);
22123  +          %if &ncluster ne 1 %then %do;
22124  +             if last._NAME_ then delete;
22125  +          %end;
22126  +          %else %do;
22127  +             COL1 = 0;
22128  +          %end;
22129  +     run;
22130  +     /* need to sort again */
22131  +     proc sort data=_tmpclusRsq;
22132  +        by _NAME_ COL1;
22133  +     run;
22134  +
22135  +     data &outdata;
22136  +         set _tmpclusRsq; by _NAME_;
22137  +         Cluster = upcase(Cluster);
22138  +         if last._NAME_ then output;
22139  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
22140  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
22141  +         rename COL1 = RSqWithNextClusComp;
22142  +         Cluster = upcase(Cluster);
22143  +         rename Cluster = ClosestCluster;
22144  +         *label  Cluster = "Next Closest Cluster";
22145  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
22146  +         rename _NAME_ = Variable;
22147  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22148  +    run;
22149  +
22150  +
22151  +    %if &globalclusid ne %then %do;
22152  +    data &outdata;
22153  +       length GCluster $16;
22154  +       set &outdata;
22155  +       GCluster = "GC&globalclusid";
22156  +       run;
22157  +    %end;
22158  +    proc datasets lib = work nolist;
22159  +           delete _tmpclusRsq;
22160  +    run;
22161  +    quit;
22162  +%mend FindNextClosestClusByVar;
22163  +
22164  +
22165  +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
22166  +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
22167  +     proc sort data =&indata out=_tmpclusRsq;
22168  +     by cluster;
22169  +     run;
22170  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
22171  +     by cluster;
22172  +     run;
22173  +     proc sort data=_tmpclusRsq;
22174  +        by _NAME_ col1;
22175  +     run;
22176  +     data _tmpclusRsq;
22177  +         length _NAME_ $32;
22178  +         set _tmpclusRsq; by _NAME_;
22179  +          _NAME_ = upcase(_NAME_);
22180  +          %if &ncluster ne 1 %then %do;
22181  +             if last._NAME_ then delete;
22182  +          %end;
22183  +          %else %do;
22184  +             COL1 = 0;
22185  +          %end;
22186  +     run;
22187  +     data &outdata;
22188  +         set _tmpclusRsq; by _NAME_;
22189  +         Cluster = upcase(Cluster);
22190  +         if last._NAME_ then output;
22191  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
22192  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
22193  +         rename COL1 = RSqWithNextClusComp;
22194  +         Cluster = upcase(Cluster);
22195  +         rename Cluster = ClosestCluster;
22196  +         *label  Cluster = "Next Closest Cluster";
22197  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
22198  +         rename _NAME_ = Variable;
22199  +         *label  _NAME_ = "Variable";
22200  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22201  +
22202  +    run;
22203  +    %if &globalclusid ne %then %do;
22204  +    data &outdata;
22205  +       length GCluster $16;
22206  +       set &outdata;
22207  +       GCluster = "GC&globalclusid";
22208  +       run;
22209  +    %end;
22210  +
22211  +    proc datasets lib = work nolist;
22212  +           delete _tmpclusRsq;
22213  +    run;
22214  +
22215  +    quit;
22216  +%mend FindNextClosestClusByCluster;
22217  +
22218  +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
22219  +/*----
22220  +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
22221  +-----------*/
22222  +
22223  +proc sort data =&indata1;
22224  +    by Variable;
22225  +run;
22226  +proc sort data =&indata2;
22227  +    by Variable;
22228  +run;
22229  +data &outdata;
22230  +    merge &indata1 &indata2;
22231  +    by Variable;
22232  +    length Type $16;
22233  +    Type = 'Variable';
22234  +    *label Type ='Type';
22235  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
22236  +run;
22237  +
22238  +
22239  +data &indata3;
22240  +    set  &indata3 ;
22241  +    length RSqWithOwnClusComp 8.;
22242  +    Cluster = Variable;
22243  +    RSqWithOwnClusComp = 1;
22244  +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
22245  +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
22246  +    length Type $16;
22247  +    Type = 'ClusterComp';
22248  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
22249  +
22250  +;
22251  +run;
22252  +
22253  +proc sort data=&outdata;
22254  +    by Cluster;
22255  +run;
22256  +proc sort data =&indata3;
22257  +    by Cluster;
22258  +run;
22259  +
22260  +data &outdata;
22261  +     set &outdata &indata3;
22262  +     by Cluster;
22263  +run;
22264  +
22265  +
22266  +/* Create the Selected variable with all YES */
22267  +
22268  +data &outdata;
22269  +     set &outdata;
22270  +     length RsqRatio 8.;
22271  +     length Selected $8;
22272  +     *label RSqRatio = "1-R**2 Ratio";
22273  +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
22274  +     *label Selected = "Variable Selected";
22275  +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
22276  +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
22277  +     Selected ='YES';
22278  +     rename _LABEL_ = Label;
22279  +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
22280  +run;
22281  +
22282  +
22283  +/*----  Selected = Y/N will be assigened at the %score                   -------+
22284  +        Just create the Selected variable with all YES at the step above
22285  + +------------------------------------------------------------------------------+
22286  +
22287  +proc sort data=&outdata;
22288  +    by Cluster RsqRatio;
22289  +run;
22290  +
22291  +%if &selectedcomp eq CLUSTERCOMP %then %do;
22292  +data &outdata;
22293  +     set &outdata; by Cluster;
22294  +     length Selected $8;
22295  +     label Selected = "Variable Selected";
22296  +     if  first.Cluster then Selected ='Yes';
22297  +     else Selected = 'No';
22298  +    run;
22299  +%end;
22300  +%else %do;
22301  +data &outdata(drop = _var _varchange);
22302  +     set &outdata; retain _var 0; by Cluster;
22303  +     length Selected $8;
22304  +     label Selected = "Variable Selected";
22305  +     if first.Cluster then  _varchange = 0;
22306  +     else _varchange =1;
22307  +     if _var ne _varchange then  Selected  = 'Yes';
22308  +     else Selected = 'No';
22309  +     if last.cluster then  _var = 0;
22310  +     else _var = _varchange;
22311  +run;
22312  +%end;
22313  +
22314  +--------------------------------------------------------------*/
22315  +
22316  +quit;
22317  +%mend MakeVarClusResultTable;
22318  +
22319  +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
22320  +     proc sort data =&indata;
22321  +        by cluster;
22322  +     run;
22323  +     proc transpose data =&indata
22324  +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
22325  +          by cluster;
22326  +     run;
22327  +     data &outdata;
22328  +          set  &outdata;
22329  +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22330  +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22331  +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
22332  +     run;
22333  +     %if &globalclusid ne %then %do;
22334  +     data &outdata;
22335  +          Length GCluster $16;
22336  +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22337  +          set  &outdata;
22338  +          GCluster ="GC&globalclusid.";
22339  +          run;
22340  +     %end;
22341  +
22342  +%Mend MakePlotDataFromCorrTable;
22343  +
22344  +
22345  +%macro MakeCorrelation(indata=,
22346  +                       outstat=_tmpoutstat,
22347  +                       corrmatrix=N,
22348  +                       outcorr=_tmpoutcorr,
22349  +                       includeclassvar=N,
22350  +                       target=,
22351  +                       freq=,
22352  +                       weight=);
22353  +   %if &target eq  %then %do;
22354  +
22355  +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
22356  +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
22357  +       %if &includeclassvar eq Y %then %do;
22358  +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
22359  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
22360  +          %do i = 2 %to &nvar;
22361  +          %let varname = %sysfunc(varname(&dsid, &i));
22362  +          &varname
22363  +          %end;
22364  +       %end;
22365  +       ;
22366  +      %if &freq ne  %then %do;
22367  +          freq &freq;
22368  +      %end;
22369  +      %if &weight ne  %then %do;
22370  +          weight &weight;
22371  +      %end;
22372  +
22373  +      run;
22374  +      %if &corrmatrix eq Y %then %do;
22375  +      data  &outcorr (drop = _NCL_ _TYPE_);
22376  +           set  &outstat ;
22377  +           if _TYPE_ ='CORR' then output;
22378  +      run;
22379  +      %end;
22380  +    %end;
22381  +    %else %do;
22382  +       proc corr data=&indata outp=&outstat noprint;
22383  +            var
22384  +       %let dsid = %sysfunc(open(&indata));
22385  +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
22386  +          %do i = 1 %to &nvar;
22387  +              %let _name = %sysfunc(varname(&dsid, &i));
22388  +              %if &_name ne &target %then;
22389  +              &_name
22390  +           %end;
22391  +        %let dsid= %sysfunc(close(&dsid));
22392  +        ;
22393  +        with &target;
22394  +        run;
22395  +    %end;
22396  +    quit;
22397  +%mend MakeCorrelation;
22398  +
22399  +
22400  +%macro MakeCorrelationDistance(indata=,
22401  +                               outdata=,
22402  +                               rsquare = N
22403  +                               );
22404  +    data corr_tmp;
22405  +        set &indata;
22406  +        if _N_ = 1 then do;
22407  +           output;
22408  +           stop;
22409  +         end;
22410  +    run;
22411  +    %if &outdata ne  %then %let  _outdata = &outdata;
22412  +    %else %let _outdata = &indata;
22413  +
22414  +    data &_outdata;
22415  +         set &indata;
22416  +
22417  +         %let dsid = %sysfunc(open(work.corr_tmp));
22418  +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
22419  +          %do i = 2 %to &nvar;
22420  +              %let _name = %sysfunc(varname(&dsid, &i));
22421  +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
22422  +              %else  %let _name_md = &_name;
22423  +              &_name = 1- &_name_md;
22424  +          %end;
22425  +      %let dsid= %sysfunc(close(&dsid));
22426  +      run;
22427  +      proc datasets lib = work nolist;
22428  +           delete corr_tmp;
22429  +      run;
22430  +      quit;
22431  +  %mend MakeCorrelationDistance;
22432  +
22433  +
22434  +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
22435  +                                   rsquare = N
22436  +                                   );
22437  +    data corr_tmp;
22438  +        set &indata;
22439  +    run;
22440  +    proc sql noprint;
22441  +           update &indata
22442  +           set
22443  +     %let dsid = %sysfunc(open(work.corr_tmp));
22444  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
22445  +          %do i = 4 %to &nvar;
22446  +          %let _name = %sysfunc(varname(&dsid, &i));
22447  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
22448  +            %else  %let _name_md = &_name;
22449  +            %if &i < &nvar %then %do;
22450  +               &_name = 1- &_name_md ,
22451  +            %end;
22452  +            %else %do;
22453  +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
22454  +            %end;
22455  +          %end;
22456  +      %let dsid= %sysfunc(close(&dsid));
22457  +
22458  +      select * from &indata;
22459  +      run;
22460  +     data &indata( drop = _NCL_);
22461  +           set &indata;
22462  +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
22463  +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
22464  +     run;
22465  +     data &indata(DROP = _NCL_);
22466  +           set &indata;
22467  +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
22468  +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
22469  +           rename _NAME_ = _VAR_;
22470  +     run;
22471  +     proc datasets lib = work nolist;
22472  +           delete corr_tmp;
22473  +     run;
22474  +     quit;
22475  + %mend UpdateOutStatCorrToDistance;
22476  +
22477  +
22478  +%macro HierClusWithCorr(indata= ,
22479  +                        ncluster=,
22480  +                        method = Ward,
22481  +                        outtree = _outtree,
22482  +                        idvar =_VAR_,
22483  +                        outdata=,
22484  +                        rescore = N,
22485  +                        newncluster=
22486  +                        );
22487  +      %global &newncluster;
22488  +      %if &rescore ne Y %then %do;
22489  +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
22490  +                   method=&method outtree=&outtree noprint;
22491  +           id &idvar;
22492  +      run;
22493  +      %end;
22494  +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
22495  +      run;
22496  +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
22497  +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
22498  +      run;
22499  +      data _outcontent;
22500  +          set _outcontent;
22501  +          if NAME in ('_TYPE_' , '_VAR_') then delete;
22502  +          index = 1;
22503  +          rename NAME = _NAME_;
22504  +      run;
22505  +      proc sort data=_outcontent;
22506  +          by _NAME_;
22507  +      run;
22508  +      proc sort data =&outdata;
22509  +           by _NAME_;
22510  +      run;
22511  +      data &outdata(drop=index);
22512  +          merge &outdata _outcontent;
22513  +          by _NAME_;
22514  +          if index = . then delete;
22515  +      run;
22516  +      /*-----------------------------------------------------------*/
22517  +      data &outdata;
22518  +           length CLUSNAME $16;
22519  +           set &outdata;
22520  +           if CLUSTER > &ncluster then delete;
22521  +           CLUSNAME='GC'||strip(CLUSTER);
22522  +           *label CLUSNAME = "Cluster Name";
22523  +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
22524  +           rename _NAME_ = VARIABLE ;
22525  +           *label _NAME_ = "Variable";
22526  +           *label CLUSTER = "Cluster";
22527  +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22528  +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22529  +      run;
22530  +      proc sort data=&outdata out=&outdata;
22531  +           by CLUSTER;
22532  +      run;
22533  +      proc means data =&outdata noprint;
22534  +           output out=_meanout;
22535  +      run;
22536  +      data _null_;
22537  +            set _meanout;
22538  +            if strip(_STAT_) eq 'MAX' then do;
22539  +            call symput("&newncluster", CLUSTER);
22540  +            stop;
22541  +            end;
22542  +      run;
22543  +
22544  +      proc datasets lib = work nolist;
22545  +           delete _outcontent _meanout;
22546  +      run;
22547  +      quit;
22548  +%mend  HierClusWithCorr;
22549  +
22550  +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
22551  +
22552  +     data _tmpindata;
22553  +          set &indata;
22554  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
22555  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22556  +          if _TYPE_ = 'STD' then _NAME_='STD';
22557  +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
22558  +          DROP _TYPE_ _NCL_;
22559  +     run;
22560  +
22561  +     filename _file_  "&fileRef";
22562  +
22563  +     data _null_;
22564  +        FILE _file_ MOD;
22565  +        put ' ';
22566  +        put "/*-------------------------------------------------*/";
22567  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
22568  +        put "/*-------------------------------------------------*/";
22569  +        put ' ';
22570  +        %let dsid = %sysfunc(open(work._tmpindata));
22571  +
22572  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22573  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22574  +        %let k = 1;
22575  +        %do %while(^%sysfunc(fetch(&dsid)));
22576  +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22577  +               %if &k > 2 %then %do;
22578  +                %let cn = %eval(&k-2);
22579  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
22580  +                %end;
22581  +                %let k = %eval(&k+1);
22582  +
22583  +        %end;
22584  +        %let rc = %sysfunc(rewind(&dsid));
22585  +
22586  +        %do j= 2 %to &nvar;
22587  +            %let _varname = %sysfunc(varname(&dsid, &j));
22588  +            %do %while(^%sysfunc(fetch(&dsid)));
22589  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22590  +                %if &_name = MEAN %then
22591  +                %let _mean = %sysfunc(getvarn(&dsid, &j));
22592  +                %else %if &_name = STD %then
22593  +                %let _std = %sysfunc(getvarn(&dsid, &j));
22594  +                %else %do;
22595  +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
22596  +                      %let abscoeff = %sysfunc(abs(&coeff));
22597  +                          %if &abscoeff >  0 %then %do;
22598  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22599  +                           %end;
22600  +                 %end;
22601  +             %end;
22602  +             %let rc = %sysfunc(rewind(&dsid));
22603  +         %end;
22604  +
22605  +        %let dsid= %sysfunc(close(&dsid));
22606  +
22607  +     run;
22608  +
22609  +     filename _file_;
22610  +     proc datasets lib = work nolist;
22611  +           delete _tmpindata;
22612  +     run;
22613  +     quit;
22614  +%mend CreateScoreCode2;
22615  +
22616  +
22617  +%macro MakeDeltaCode2(groupds=,deltacodefile=);
22618  +
22619  +     /*--- Build Code to Modify Metadata ---*/
22620  +     filename X "&deltacodefile";
22621  +     data _null_;
22622  +        FILE X;
22623  +        set &groupds end=eof;
22624  +        if _N_=1 then do;
22625  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
22626  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
22627  +           %end;
22628  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
22629  +           put "if upcase(strip(NAME)) in (";
22630  +        end;
22631  +        if Strip(upcase(Selected)) eq 'YES' then do;
22632  +           string = '"'!!trim(left(VARIABLE))!!'"';
22633  +           put string;
22634  +        end;
22635  +        if eof then do;
22636  +           put ') then ROLE="INPUT";';
22637  +           put 'else ROLE="REJECTED";';
22638  +           put 'end;';
22639  +
22640  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
22641  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
22642  +           %end;
22643  +        end;
22644  +     run;
22645  +     quit;
22646  +
22647  +     filename X;
22648  +     quit;
22649  +%mend MakeDeltaCode2;
22650  +
22651  +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
22652  +  %global &ngc;
22653  +  data _null_;
22654  +  %if &indata ne %then %do;
22655  +      %let dsid = %sysfunc(open(&indata));
22656  +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
22657  +      %let dsid = %sysfunc(close(&dsid));
22658  +  %end;
22659  +  %else %do;
22660  +       %let nvar = %eval(&ninput+&ndummy); ;
22661  +  %end;
22662  +  %let numgc = %eval(&nvar/&div+2);
22663  +  %let &ngc = &numgc;
22664  +   run;
22665  +  quit;
22666  +%mend getInitialGClusterNumber;
22667  +
22668  +
22669  +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
22670  +data &outlink(drop = Selected);
22671  +     set &indata;
22672  +     LINKID = _N_;
22673  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
22674  +run;
22675  +data &outnode(keep=NODEID TYPE LABEL);
22676  +    set &indata;
22677  +    length TYPE $16;
22678  +    rename VARIABLE = NODEID;
22679  +    *label  CLUSNAME="Node ID";
22680  +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22681  +    TYPE = "VARIABLE";
22682  +    *label TYPE = "Node Type";
22683  +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22684  +    run;
22685  +data _tmp(keep=NODEID TYPE LABEL);
22686  +    set &indata;
22687  +    length TYPE $16;
22688  +    rename CLUSNAME = NODEID;
22689  +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22690  +    TYPE = "GCLUSTER";
22691  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22692  +    run;
22693  +proc sort data=_tmp;
22694  +    by NODEID;
22695  +run;
22696  +data _tmp;
22697  +    set _tmp; by NODEID;
22698  +    if first.NODEID then output;
22699  +run;
22700  +proc sort data=&outnode;
22701  +    by NODEID;
22702  +run;
22703  +data  &outnode;
22704  +    set _tmp &outnode;
22705  +run;
22706  +proc datasets lib = work nolist;
22707  +     delete _tmp;
22708  +run;
22709  +quit;
22710  +%mend MakeGobalConstellData;
22711  +
22712  +/* Make contellation plot data among GCLUSTERS */
22713  +
22714  +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
22715  +
22716  +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
22717  +     set &indata;
22718  +     LINKID = _N_;
22719  +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
22720  +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
22721  +     end;
22722  +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
22723  +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
22724  +     end;
22725  +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
22726  +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
22727  +    end;
22728  +run;
22729  +
22730  +data _tmp_outrsquare;
22731  +        set &inoutrsq;
22732  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22733  +run;
22734  +
22735  +proc freq data =_tmp_outrsquare noprint;
22736  +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
22737  +run;
22738  +
22739  +data &outnode(keep=_NAME_ TYPE LABEL);
22740  +    set &outlink;
22741  +    length TYPE $16;
22742  +    length LABEL $100;
22743  +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
22744  +
22745  +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22746  +    TYPE = "GCLUSTER";
22747  +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22748  +    end;
22749  +    else do;
22750  +    TYPE= "ROOT";
22751  +    LABEL= _NAME_;
22752  +    end;
22753  +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22754  +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
22755  +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22756  +    run;
22757  +
22758  +proc sort data=&outnode;
22759  +     by _NAME_;
22760  +proc sort data=_tmp_GCLUSFREQ;
22761  +     by _NAME_;
22762  +run;
22763  +
22764  +data  &outnode;
22765  +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
22766  +     if COUNT=. then COUNT=1;
22767  +run;
22768  +
22769  +proc datasets lib = work nolist;
22770  +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
22771  +run;
22772  +
22773  +quit;
22774  +%Mend MakeGClusterConstData;
22775  +
22776  +
22777  +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
22778  +
22779  +    data _gscoretmpds;
22780  +          set &indata;
22781  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
22782  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22783  +          if _TYPE_ = 'STD' then _NAME_='STD';
22784  +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
22785  +          DROP _TYPE_ _NCL_;
22786  +     run;
22787  +
22788  +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
22789  +        GCluster Component &globalclusid ------ */
22790  +
22791  +    filename _file_  "&fileref";
22792  +
22793  +    data _null_;
22794  +        %if &globalclusid eq 1 %then %do;
22795  +          FILE _file_;
22796  +        %end;
22797  +        %else %do;
22798  +          FILE _file_ MOD;
22799  +        %end;
22800  +
22801  +        %let dsid = %sysfunc(open(work._gscoretmpds));
22802  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22803  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22804  +
22805  +        %let k = 1;
22806  +        %do %while(^%sysfunc(fetch(&dsid)));
22807  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22808  +                %if &k > 2 %then %do;
22809  +                put "&_name = 0 ; ";
22810  +                %end;
22811  +                %let k = %eval(&k+1);
22812  +        %end;
22813  +
22814  +        %let rc = %sysfunc(rewind(&dsid));
22815  +        %do i= 2 %to &nvar;
22816  +            %let _varname =  %sysfunc(varname(&dsid, &i));
22817  +            %do %while(^%sysfunc(fetch(&dsid)));
22818  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22819  +                %if &_name = MEAN %then
22820  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
22821  +                %else %if &_name = STD %then
22822  +                %let _std = %sysfunc(getvarn(&dsid, &i));
22823  +                %else %do;
22824  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
22825  +                      %let abscoeff = %sysfunc(abs(&coeff));
22826  +                          %if &abscoeff >  0 %then %do;
22827  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22828  +                           %end;
22829  +                 %end;
22830  +             %end;
22831  +             %let rc = %sysfunc(rewind(&dsid));
22832  +
22833  +         %end;
22834  +
22835  +        %let dsid= %sysfunc(close(&dsid));
22836  +       run;
22837  +
22838  +
22839  +       proc datasets lib=work nolist;
22840  +            delete _gscoretmpds;
22841  +       run;
22842  +      quit;
22843  +
22844  +%mend CreateGClusterScoreCode;
22845  +
22846  +
22847  +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
22848  +
22849  +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
22850  +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
22851  +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
22852  +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
22853  +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
22854  +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
22855  +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
22856  +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
22857  +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
22858  +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
22859  +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
22860  +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
22861  +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
22862  +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
22863  +
22864  +   filename gsfile "&gscorecode";
22865  +
22866  +   data &EM_USER_GSCORE;
22867  +             set &indata;
22868  +             %include  gsfile;
22869  +        keep
22870  +        %do i=1 %to &ngcluster;
22871  +         %let gcvarname = GC&i;
22872  +         &gcvarname
22873  +        %end;
22874  +     ;
22875  +   run;
22876  +
22877  +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
22878  +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
22879  +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
22880  +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
22881  +    noprint  ;
22882  +     var
22883  +       %do i=1 %to &ngcluster;
22884  +         %let gcvarname = GC&i;
22885  +         &gcvarname
22886  +        %end;
22887  +   ;
22888  +   run;
22889  +
22890  +
22891  +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
22892  +   data &EM_USER_GSCORECORRPLOT ;
22893  +        set &EM_USER_GSCORECORRPLOT;
22894  +        rename _X_ = X;
22895  +        rename _Y_ = Y;
22896  +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22897  +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22898  +   run;
22899  +
22900  +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
22901  +
22902  +   data &EM_USER_GSCORETREE;
22903  +        length _NAME_ $32;
22904  +        length _LABEL_ $100;
22905  +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
22906  +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22907  +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22908  +        end;else do;
22909  +         _LABEL_ = _NAME_;
22910  +        end;
22911  +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
22912  +
22913  +   run;
22914  +
22915  +   quit;
22916  +
22917  +%mend MakeGClusterCorrelation;
22918  +
22919  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
22920  +%macro report;
22921  +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
22922  +
22923  +    data _null_;
22924  +         set &EM_USER_VARCLUSMETA;
22925  +         if _N_=1 then
22926  +         call symput('_trainnum', TrainNum);
22927  +    run;
22928  +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
22929  +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
22930  +           %include temp;
22931  +           filename temp;
22932  +           %report1;
22933  +       %end;
22934  +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
22935  +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
22936  +           %include temp;
22937  +           filename temp;
22938  +           %report2;
22939  +    %end;
22940  +
22941  +   /* End of all runs, change the flag of newtrain to N */
22942  +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
22943  +    data &EM_USER_VARCLUSMETA;
22944  +         set &EM_USER_VARCLUSMETA;
22945  +         NewTrain = "N";
22946  +    run;
22947  +    quit;
22948  +%mend report;
22949  +
22950  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      107045:166
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
22951  +%macro report1;
22953  +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
22954  +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
22955  +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
22957  +   data &EM_USER_OUTVARSEL;
22958  +        set &EM_USER_OUTRSQUARE;
22959  +        if upcase(strip(SELECTED)) = 'YES' then output;
22960  +   run;
22962  +   data _tmp_outrsquare;
22963  +        set &EM_USER_OUTRSQUARE;
22964  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22965  +   run;
22967  +   proc freq data =_tmp_outrsquare noprint;
22968  +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
22969  +   run;
22971  +   proc datasets lib = work nolist;
22972  +     delete _tmp_outrsquare;
22973  +   run;
22975  +   data &EM_USER_CLUSFREQ;
22976  +       set &EM_USER_CLUSFREQ;
22977  +       label
22978  +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
22979  +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
22980  +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
22981  +       ;
22982  +   run;
22984  +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
22985  +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
22986  +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
22988  +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
22989  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
22990  +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
22991  +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
22992  +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
22993  +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
22994  +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
22995  +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
22997  +   /*
22998  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
22999  +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
23000  +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
23003  +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTVARSEL has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 96 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 96 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_CLUSFREQ has 35 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.13 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS3.VARCLUS_CLUSFREQ has 35 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS3.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.00 seconds
 
 
23006   *------------------------------------------------------------*;
23007   * End REPORT: VarClus;
23008   *------------------------------------------------------------*;
23009
 
23010   /* Reset EM Options */
23011   options formchar="|----|+|---+=|-/\<>*";
23012   options nocenter ls=256 ps=10000;
23013   goptions reset=all device=GIF NODISPLAY;
 
23014   proc sort data=WORK.EM_USER_REPORT;
23015   by ID VIEW;
23016   run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
