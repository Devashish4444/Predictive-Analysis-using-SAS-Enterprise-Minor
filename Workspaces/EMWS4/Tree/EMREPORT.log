*------------------------------------------------------------*
* Report Log
Date:                April 25, 2020
Time:                11:02:10
*------------------------------------------------------------*
18619  data EMWS4.Tree_EMOUTFIT;
18620  set EMWS4.Tree_EMOUTFIT;
18621  length TargetLabel $200;
18622  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18623  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18624  run;

NOTE: There were 1 observations read from the data set EMWS4.TREE_EMOUTFIT.
NOTE: The data set EMWS4.TREE_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.00 seconds
      

18625  proc sort data=EMWS4.Tree_EMREPORTFIT nothreads;
18626  by TARGET;
18627  run;

NOTE: There were 8 observations read from the data set EMWS4.TREE_EMREPORTFIT.
NOTE: The data set EMWS4.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.21 seconds
      cpu time            0.00 seconds
      

18628  %let _EMwarndup = 0;
18629  %let _EMtargetdup =;
18630  %let _EMASEtargetdup =;
18631  data _null_;
18632  set EMWS4.Tree_EMOUTFIT;
18633  if .<_ASE_<0.000001 then do;
18634  call symput('_EMwarndup', '1');
18635  call symput('_EMtargetdup', target);
18636  call symput('_EMASEtargetdup', put(_ASE_, best.));
18637  end;
18638  run;

NOTE: There were 1 observations read from the data set EMWS4.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18639  %let EMEXCEPTIONSTRING=;
18640  *------------------------------------------------------------*;
18641  * REPORT: Tree;
18642  *------------------------------------------------------------*;
18643  %let EM_ACTION = REPORT;
18644  %let syscc = 0;
18645  %macro main;
18646  
18647    %if %upcase(&EM_ACTION) = CREATE %then %do;
18648      filename temp catalog 'sashelp.emmodl.tree_create.source';
18649      %include temp;
18650      filename temp;
18651  
18652      %em_tree_create;
18653    %end;
18654  
18655     %else
18656     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18657  
18658         filename temp catalog 'sashelp.emmodl.tree_train.source';
18659         %include temp;
18660         filename temp;
18661         %em_tree_train;
18662     %end;
18663  
18664    %else
18665    %if %upcase(&EM_ACTION) = SCORE %then %do;
18666      filename temp catalog 'sashelp.emmodl.tree_score.source';
18667      %include temp;
18668      filename temp;
18669  
18670      %em_tree_score;
18671  
18672    %end;
18673  
18674    %else
18675    %if %upcase(&EM_ACTION) = REPORT %then %do;
18676  
18677         filename temp catalog 'sashelp.emmodl.tree_report.source';
18678         %include temp;
18679         filename temp;
18680  
18681         %em_tree_report;
18682     %end;
18683  
18684    %else
18685    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18686  
18687         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18688         %include temp;
18689         filename temp;
18690         %EM_TREE_OPENTREEVIEWER;
18691  
18692     %end;
18693  
18694    %else
18695    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18696  
18697         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18698         %include temp;
18699         filename temp;
18700         %EM_TREE_CLOSETREEVIEWER;
18701  
18702     %end;
18703  
18704  
18705     %doendm:
18706  %mend main;
18707  
18708  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18710 +%macro em_tree_makePlotDs( multipleTar= );
18712 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18713 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18714 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18715 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18717 +  /* determine if validation statistics will be displayed */
18718 +  %let validflag=N;
18719 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18720 +    /* determine if validation data exists */
18721 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18722 +      %let validflag=Y;
18723 +    %end;
18724 +  %end;
18726 +   /* retrieve name of decmeta even in presence of multiple targets */
18727 +   %let decmeta = ;
18728 +   %if &EM_DEC_DECMETA eq %then %do;
18729 +     data _Target;
18730 +       set &em_data_variableset;
18731 +       where ROLE='TARGET' and USE in('D', 'Y');
18732 +       keep NAME;
18733 +     run;
18734 +     proc sort data=_Target;
18735 +       by NAME;
18736 +     run;
18737 +     proc sort data=EM_TARGETDECINFO;
18738 +       by TARGET;
18739 +     run;
18740 +     data _Target;
18741 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18742 +       by NAME;
18743 +       if _a then do;
18744 +         call symput('decmeta', trim(DECMETA));
18745 +       end;
18746 +     run;
18747 +     proc delete data=_Target;run;
18748 +   %end;
18749 +   %else %let decmeta = &EM_DEC_DECMETA;
18752 +  /* retrieve targetEvent from decmeta */
18753 +  %let targetEvent=;
18754 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18755 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18756 +      data _null_;
18757 +       set &DECMETA(where=(_TYPE_="TARGET"));
18758 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18759 +      run;
18760 +    %end;
18761 +  %end;
18763 +  /* retrieve predicted var for targetEvent from decmeta */
18764 +  %let predTarget=;
18765 +  %let predLvl=;
18766 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18767 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18768 +      data _null_;
18769 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18770 +       call symput('predTarget', strip(VARIABLE));
18771 +       call symput('predLvl', strip(LEVEL));
18772 +      run;
18773 +    %end;
18774 +  %end;
18775 +  %else %do;
18776 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18777 +      data _null_;
18778 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18779 +       call symput('predTarget', strip(VARIABLE));
18780 +      run;
18781 +    %end;
18782 +  %end;
18784 +  /* create BelowText value */
18785 +  data belowtext;
18786 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18787 +    keep node belowtext;
18788 +  run;
18790 +  /* replace belowtext with variable label if it exists */
18791 +  data belowtext2;
18792 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18793 +    keep node belowtextlbl;
18794 +  run;
18796 +  proc sort data=belowtext; by node; run;
18797 +  proc sort data=belowtext2; by node; run;
18799 +  data belowtext;
18800 +    merge belowtext belowtext2(in=_a);
18801 +    by node;
18802 +    if _a then belowtext=belowtextlbl;
18803 +    keep node belowtext;
18804 +  run;
18806 +  /* create AboveText value */
18807 +  data abovetext;
18808 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18809 +  run;
18810 +  proc sort data=abovetext; by node numeric_value; run;
18812 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18813 +  data abovetext;
18814 +    set abovetext(rename=(node=parent));
18815 +    by parent numeric_value;
18816 +    retain abovetext tempstring flag branch origval origchar ;
18817 +    length abovetext $256;
18818 +    length tempstring origchar $64;
18820 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18821 +      if first.parent then do;
18822 +        if missing(character_value) then do;
18823 +          numeric_value = round(numeric_value, &sp_precision);
18824 +          abovetext = "< "||strip(NUMERIC_VALUE);
18825 +          branch = 1;
18826 +          origval = numeric_value;
18827 +          output;
18828 +        end;
18829 +        else do;
18830 +          abovetext = "< "||strip(CHARACTER_VALUE);
18831 +          branch = 1;
18832 +          origchar = character_value;
18833 +          output;
18834 +        end;
18836 +        if first.parent AND last.parent then do;
18837 +          if missing(character_value) then do;
18838 +            numeric_value = round(numeric_value, &sp_precision);
18839 +            branch = branch + 1;
18840 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18841 +            output;
18842 +          end;
18843 +          else do;
18844 +            branch = branch + 1;
18845 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18846 +            output;
18847 +          end;
18848 +        end;
18849 +      end;
18850 +      else if last.parent then do;
18851 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18852 +          if missing(character_value) then do;
18853 +            numeric_value = round(numeric_value, &sp_precision);
18854 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18855 +          end;
18856 +          else do;
18857 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18858 +          end;
18859 +          branch = branch + 1;
18860 +          output;
18862 +          if missing(character_value) then do;
18863 +            numeric_value = round(numeric_value, &sp_precision);
18864 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18865 +          end;
18866 +          else do;
18867 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18868 +          end;
18869 +          branch = branch + 1;
18870 +          output;
18871 +        end;
18872 +        else do;
18873 +          if missing(character_value) then do;
18874 +            numeric_value = round(numeric_value, &sp_precision);
18875 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18876 +          end;
18877 +          else do;
18878 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18879 +          end;
18880 +          branch = branch + 1;
18881 +          output;
18882 +        end;
18883 +      end;
18884 +      else do;
18885 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18886 +          if missing(character_value) then do;
18887 +            numeric_value = round(numeric_value,&sp_precision);
18888 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18889 +            origval = numeric_value;
18890 +          end;
18891 +          else do;
18892 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18893 +            origchar = character_value;
18894 +          end;
18895 +          branch = branch + 1;
18896 +          output;
18898 +        end;
18899 +        else do;
18900 +          if missing(character_value) then do;
18901 +            numeric_value = round(numeric_value, &sp_precision);
18902 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18903 +            origval = numeric_value;
18904 +          end;
18905 +          else do;
18906 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18907 +            origval = character_value;
18908 +          end;
18909 +          branch = branch + 1;
18910 +          output;
18911 +        end;
18912 +      end;
18913 +    end;
18914 +    else do;
18915 +       if first.numeric_value then do;
18916 +         flag = 0;
18917 +         abovetext = strip(CHARACTER_VALUE);
18918 +         branch = numeric_value;
18919 +         if first.numeric_value AND last.numeric_value then do;
18920 +           output;
18921 +         end;
18922 +       end;
18923 +       else if last.numeric_value then do;
18924 +         if flag=0 then do;
18925 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18926 +           length = length(strip(tempstring));
18927 +           if length < 32 then do;
18928 +             abovetext = strip(tempstring);
18929 +           end;
18930 +           else do;
18931 +             abovetext = strip(abovetext)||", ...";
18932 +             flag = 1;
18933 +           end;
18934 +         end;
18935 +         branch = numeric_value;
18936 +         output;
18937 +       end;
18938 +       else do;
18939 +         if flag=0 then do;
18940 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18941 +           length = length(strip(tempstring));
18942 +           if length < 32 then do;
18943 +             abovetext = strip(tempstring);
18944 +           end;
18945 +           else do;
18946 +             abovetext = strip(abovetext)||", ...";
18947 +             flag=1;
18948 +           end;
18949 +         end;
18950 +         branch = numeric_value;
18951 +       end;
18952 +    end;
18953 +    keep parent branch abovetext;
18954 +  run;
18956 +  /* Missing value to abovetext */
18957 +  data tempmissing;
18958 +    set &EM_USER_OUTRULES;
18959 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18960 +    rename node=parent numeric_value=branch character_value=misschar;
18961 +  run;
18964 +  proc sort data=abovetext; by parent branch; run;
18965 +  proc sort data=tempmissing; by parent branch; run;
18966 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18968 +  data tempoutnodes;
18969 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18970 +    by parent branch;
18971 +    length traintotal validtotal 8;
18972 +    retain traintotal validtotal;
18974 +    if _a then do;
18975 +      if ^MISSING(abovetext) then do;
18976 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18977 +      end;
18978 +      else do;
18979 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18980 +      end;
18981 +    end;
18982 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18984 +    if node=1 then do;
18985 +      traintotal = N;
18986 +      validtotal=VN;
18987 +    end;
18989 +    drop role rank stat misschar belowtext;
18990 +  run;
18991 +  proc sort data=tempoutnodes; by node; run;
18992 +  proc sort data=belowtext; by node; run;
18994 +  data tempoutnodes;
18995 +    merge tempoutnodes belowtext;
18996 +    by node;
18998 +  run;
19000 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19001 +  %let adjusted = N;
19002 +  %let npriors = 0;
19003 +  data _null_ ;
19004 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19005 +    if eof then do ;
19006 +      call symput("npriors" , strip(put(_N_,best.))) ;
19007 +    end;
19008 +  run;
19009 +  %if &npriors gt 0 %then %let adjusted=Y;
19012 +  /* create a table with targetUsed and targetLevel columns for each node */
19013 +  data temptarmeta;
19014 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19015 +    %if &multipleTar eq N %then %do;
19016 +      AND USE in ('D', 'Y')
19017 +    %end;
19018 +    ));
19019 +    length TARGET $32;
19020 +    Target=name;
19021 +    keep target level;
19022 +  run;
19024 +  %if &multipleTar eq Y %then %do;
19025 +    data temptargetused;
19026 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19027 +      keep node target;
19028 +    run;
19029 +    proc sort data=temptargetused; by target; run;
19030 +    proc sort data=temptarmeta; by target; run;
19031 +    data temptargetused;
19032 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19033 +      by target;
19034 +      if _a and _b;
19035 +    run;
19036 +  %end;
19037 +  %else %do;
19038 +    data temptargetused;
19039 +      set &EM_USER_OUTSTATS;
19040 +      length target $32 tarlevel $10;
19041 +      target="%EM_TARGET";
19042 +      tarlevel="%EM_TARGET_LEVEL";
19043 +      keep node target tarlevel;
19044 +    run;
19045 +    proc sort data=temptargetused nodupkey; by node; run;
19046 +  %end;
19048 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19049 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19050 +  proc sort data=temptargetused; by node; run;
19053 +  /* create tables for all interval targets as well as all class targets */
19054 +  data tempinterval tempclass;
19055 +    merge tempoutstats temptargetused( rename=(target=targetused));
19056 +    by node;
19057 +    %if "&multipleTar" eq "Y" %then %do;
19058 +      if ((missing(Target)) OR (target=targetused ));
19059 +    %end;
19061 +    if tarlevel="INTERVAL" then output tempinterval;
19062 +    else output tempclass;
19063 +  run;
19065 +  /* initialize intTarget and classTarget flags */
19066 +  %let em_intNobs =0;
19067 +  %let em_classNobs = 0;
19068 +  %let em_intTarget= N;
19069 +  %let em_classTarget= N;
19071 +  proc sql;
19072 +    reset noprint;
19073 +    select count(*) into :em_intNobs from tempinterval;
19074 +  quit;
19075 +  proc sql;
19076 +    reset noprint;
19077 +    select count(*) into :em_classNobs from tempclass;
19078 +  quit;
19080 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19081 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19083 +  /* retrieve all information for interval targets */
19084 +  %if &em_intTarget eq Y %then %do;
19086 +    /* determine if leaf variable exists */
19087 +    %let dsid=%sysfunc(open(tempinterval,i));
19088 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19089 +    %let rc=%sysfunc(close(&dsid));
19091 +    proc transpose data=tempinterval
19092 +      %if &leafexists %then %do;
19093 +        (drop=leaf)
19094 +      %end;
19095 +      %if &validexist %then %do;
19096 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19097 +      %end;
19098 +      %else %do;
19099 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19100 +      %end;
19101 +      by node;
19102 +      id statname;
19103 +    run;
19104 +    data tempinterval;
19105 +      set tempinterval;
19106 +      if missing(N) then delete;
19107 +    run;
19108 +  %end;
19110 +  /* retrieve all information for class targets */
19111 +  %if &em_classTarget eq Y %then %do;
19112 +    proc sort data=tempclass; by node category; run;
19113 +    %if &validflag eq N %then %do;
19114 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19115 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19116 +    %end;
19117 +    %else %do;
19118 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19119 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19120 +    %end;
19121 +      set tempclass;
19123 +      %if &validflag eq N %then %do;
19124 +        %if "&adjusted" eq "N" %then %do;
19125 +          if statname="N" then output tempn;
19126 +        %end;
19127 +        %else %do;
19128 +          if statname="NPRIORS" then output tempn;
19129 +        %end;
19130 +        else if statname="PREDICTION" then output temppredict;
19131 +        else if statname="PROBABILITY" then output tempprob;
19132 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19133 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19134 +      %end;
19135 +      %else %do;
19136 +        %if "&adjusted" eq "N" %then %do;
19137 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19138 +        %end;
19139 +        %else %do;
19140 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19141 +        %end;
19142 +        else if statname="PREDICTION" then output temppredict;
19143 +        else if statname="PROBABILITY" then output tempprob;
19144 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19145 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19146 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19147 +      %end;
19148 +    run;
19151 +    /* determine if profit/loss exists in tempprofit */
19152 +    %let em_profitflag=0;
19153 +    %let em_lossflag=0;
19154 +    proc sql;
19155 +      reset noprint;
19156 +      select count(*) into :em_profitflag from tempprofit;
19157 +    quit;
19158 +    proc sql;
19159 +      reset noprint;
19160 +      select count(*) into :em_lossflag from temploss;
19161 +    quit;
19163 +    %if &validFlag eq Y %then %do;
19164 +      proc transpose data=tempn
19165 +        %if "&adjusted" eq "N" %then %do;
19166 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19167 +        %end;
19168 +        %else %do;
19169 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19170 +        %end;
19171 +        by node;
19172 +        id statname;
19173 +      run;
19174 +      %if &em_profitflag ne 0 %then %do;
19175 +        proc transpose data=tempprofit out=tempprofit;
19176 +          by node category;
19177 +          id statname ;
19178 +        run;
19179 +      %end;
19180 +      %if &em_lossflag ne 0 %then %do;
19181 +        proc transpose data=temploss out=temploss;
19182 +          by node category;
19183 +          id statname ;
19184 +        run;
19185 +      %end;
19186 +      data tempprob;
19187 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19188 +        by node
19189 +        %if &multipleTar eq Y %then %do;
19190 +          target
19191 +        %end;
19192 +        category;
19193 +      run;
19194 +    %end;
19196 +    /* store percentcorrect value */
19197 +    data temppredict;
19198 +      merge tempprob temppredict(in=_a);
19199 +      by node category;
19200 +      if _a then do;
19201 +        percentCorrect = statvalue;
19202 +        %if &validFlag eq Y %then %do;
19203 +          vpercentCorrect= vstatvalue;
19204 +        %end;
19205 +      end;
19206 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19207 +      %if &validFlag eq Y %then %do;
19208 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19209 +      %end;
19210 +      ;
19211 +      if missing(percentCorrect) then delete;
19212 +      drop target;
19213 +    run;
19215 +    /* build profittext */
19216 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19217 +      data tempprofittext(keep= node profittext profitloss);
19218 +        length profittext $800 profitloss 8.;
19219 +        retain profittext profitloss;
19221 +        merge tempprob
19222 +        %if &em_profitflag ne 0 %then %do;
19223 +          tempprofit
19224 +        %end;
19225 +        %else %if &em_lossflag ne 0 %then %do;
19226 +          temploss
19227 +        %end;
19228 +        ;
19229 +        by node category;
19231 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19232 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19233 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19234 +          %let profittype = ALL;
19235 +        %end;
19237 +        /* create the profitloss variable for nodecolor if selected */
19238 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19240 +        %if "&profittype" eq "ALL" %then %do;
19241 +          if strip(CATEGORY)="&targetEvent" then do;
19242 +            profitloss=statvalue;
19243 +          end;
19244 +          if first.node then do;
19245 +            %if &validFlag eq N %then %do;
19246 +             %if &em_profitflag ne 0 %then %do;
19247 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19248 +             %end;
19249 +             %if &em_lossflag ne 0 %then %do;
19250 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19251 +             %end;
19252 +            %end;
19253 +            %else %do;
19254 +             %if &em_profitflag ne 0 %then %do;
19255 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19255!+;
19256 +             %end;
19257 +             %if &em_lossflag ne 0 %then %do;
19258 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19259 +             %end;
19260 +            %end;
19261 +          end;
19262 +          else if last.node then do;
19263 +            %if &validFlag eq N %then %do;
19264 +             %if &em_profitflag ne 0 %then %do;
19265 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19266 +             %end;
19267 +             %if &em_lossflag ne 0 %then %do;
19268 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19269 +             %end;
19270 +             /*if CATEGORY="&targetEvent" then do;
19271 +               profitloss=statvalue;
19272 +             end;*/
19273 +            %end;
19274 +            %else %do;
19275 +             %if &em_profitflag ne 0 %then %do;
19276 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19276!+14.&EM_PROPERTY_SPLITPRECISION);
19277 +                if CATEGORY="&targetEvent" then do;
19278 +                 profitloss=ALTERNATIVE_PROFIT;
19279 +                end;
19280 +             %end;
19281 +             %if &em_lossflag ne 0 %then %do;
19282 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19282!+14.&EM_PROPERTY_SPLITPRECISION);
19283 +                if CATEGORY="&targetEvent" then do;
19284 +                  profitloss=ALTERNATIVE_LOSS;
19285 +                end;
19286 +             %end;
19287 +            %end;
19288 +            output;
19289 +          end;
19290 +          else do;
19291 +            %if &validFlag eq N %then %do;
19292 +             %if &em_profitflag ne 0 %then %do;
19293 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19294 +             %end;
19295 +             %if &em_lossflag ne 0 %then %do;
19296 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19297 +             %end;
19298 +            %end;
19299 +            %else %do;
19300 +             %if &em_profitflag ne 0 %then %do;
19301 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19301!+14.&EM_PROPERTY_SPLITPRECISION);
19302 +             %end;
19303 +             %if &em_lossflag ne 0 %then %do;
19304 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19304!+14.&EM_PROPERTY_SPLITPRECISION);
19305 +             %end;
19306 +            %end;
19307 +          end;
19308 +        %end;
19309 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19310 +          if strip(CATEGORY) = "&targetevent" then do;
19311 +            %if &validFlag eq N %then %do;
19312 +             %if &em_profitflag ne 0 %then %do;
19313 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19314 +             %end;
19315 +             %if &em_lossflag ne 0 %then %do;
19316 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19317 +             %end;
19318 +             profitloss=statvalue;
19319 +            %end;
19320 +            %else %do;
19321 +             %if &em_profitflag ne 0 %then %do;
19322 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19322!+;
19323 +                profitloss=ALTERNATIVE_PROFIT;
19324 +             %end;
19325 +             %if &em_lossflag ne 0 %then %do;
19326 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19327 +                profitloss=ALTERNATIVE_LOSS;
19328 +             %end;
19329 +            %end;
19330 +            output;
19331 +          end;
19332 +        %end;
19333 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19334 +          if strip(CATEGORY) = "&targetevent" then do;
19335 +            %if &validFlag eq N %then %do;
19336 +             profitloss=statvalue;
19337 +            %end;
19338 +            %else %do;
19339 +             %if &em_profitflag ne 0 %then %do;
19340 +                profitloss=ALTERNATIVE_PROFIT;
19341 +             %end;
19342 +             %if &em_lossflag ne 0 %then %do;
19343 +                profitloss=ALTERNATIVE_LOSS;
19344 +             %end;
19345 +            %end;
19346 +            output;
19347 +          end;
19348 +        %end;
19349 +      run;
19350 +    %end;
19352 +    data tempprob(keep= node probtext);
19353 +      length probtext $800;
19354 +      retain probtext;
19355 +      set tempprob ;
19356 +      by node;
19358 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19359 +      %let probtype = &EM_PROPERTY_TARGET;
19360 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19361 +        %let probtype = ALL;
19362 +      %end;
19364 +      %if "&probtype" eq "ALL" %then %do;
19365 +        if first.node then do;
19366 +          %if &validFlag eq N %then %do;
19367 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19368 +          %end;
19369 +          %else %do;
19370 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19371 +          %end;
19372 +        end;
19373 +        else if last.node then do;
19374 +          %if &validFlag eq N %then %do;
19375 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19376 +          %end;
19377 +          %else %do;
19378 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19379 +          %end;
19380 +          output;
19381 +        end;
19382 +        else do;
19383 +          %if &validFlag eq N %then %do;
19384 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19385 +          %end;
19386 +          %else %do;
19387 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19388 +          %end;
19389 +        end;
19390 +      %end;
19391 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19392 +        if strip(CATEGORY) = "&targetevent" then do;
19393 +          %if &validFlag eq N %then %do;
19394 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19395 +          %end;
19396 +          %else %do;
19397 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19398 +          %end;
19399 +          output;
19400 +        end;
19401 +      %end;
19402 +      %else %if "&probtype" eq "NONE" %then %do;
19403 +        if last.node then do;
19404 +          output;
19405 +        end;
19406 +      %end;
19407 +    run;
19408 +  %end;
19410 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19412 +  %let oldexists=0;
19413 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19414 +     data old_tree_plot;
19415 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19416 +        rename nodecolor=oldnodecolor;
19417 +     run;
19419 +     proc sort data=old_tree_plot;
19420 +        by node;
19421 +     run;
19423 +     %let oldexists=1;
19424 +  %end;
19426 +  data &EM_USER_TREE_PLOT;
19427 +    length textall $800;
19428 +    merge tempoutnodes temptargetused
19430 +    %if &em_intTarget eq Y %then %do;
19431 +      tempinterval
19432 +    %end;
19434 +    %if &em_classTarget eq Y %then %do;
19436 +      %if &validFlag eq N %then %do;
19437 +        tempn(rename=(statvalue=N))
19438 +      %end;
19439 +      %else %do;
19440 +        tempn
19441 +      %end;
19443 +      temppredict tempprob
19445 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19446 +        tempprofittext
19447 +      %end;
19448 +    %end;
19449 +    ;
19450 +    by node;
19452 +    /* build nodetext based on user selection */
19453 +    textall="";
19455 +    %if &em_intTarget eq Y %then %do;
19456 +    if tarlevel="INTERVAL" then do;
19457 +      /* Nodeid */
19458 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19459 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19460 +      %end;
19462 +      /* Target identifier if multiple targets are used */
19463 +      %if "&multipleTar" eq "Y" %then %do;
19464 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19465 +      %end;
19467 +      %if &validFlag eq Y %then %do;
19468 +         /* Column labels displayed in validflag eq Y only */
19469 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19470 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19470!+noquote ))";
19471 +         %end;
19473 +         /* Average values */
19474 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19475 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19476 +         %end;
19478 +         /* RASE */
19479 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19480 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19481 +         %end;
19483 +         /* Count */
19484 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19485 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19486 +         %end;
19487 +      %end;
19488 +      %else %do;
19489 +         /* Average values */
19490 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19491 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19492 +         %end;
19494 +         /* RASE */
19495 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19496 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19497 +         %end;
19499 +         /* Count */
19500 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19501 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19502 +         %end;
19503 +      %end;
19505 +      /* nodecolor */
19506 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19507 +        nodecolor=PREDICTION;
19508 +      %end;
19509 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19510 +        nodecolor=RASE;
19511 +      %end;
19512 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19513 +        nodecolor=1;
19514 +      %end;
19516 +    end;
19517 +    %end;
19518 +    %if &em_classTarget eq Y %then %do;
19519 +    if tarlevel^="INTERVAL" then  do;
19521 +      /* Nodeid */
19522 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19523 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19524 +      %end;
19525 +      /* Target identifier if multiple targets are used */
19526 +      %if "&multipleTar" eq "Y" %then %do;
19527 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19528 +      %end;
19530 +      /* Predicted values */
19531 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19532 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19533 +      %end;
19535 +      /* Column labels displayed in validflag eq Y only */
19536 +      %if "&ValidFlag" eq "Y" %then %do;
19537 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19538 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19538!+noquote ))";
19539 +        %end;
19540 +      %end;
19542 +      /* Target Values */
19543 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19544 +        textall=strip(textall)||"0A"x||strip(probtext);
19545 +      %end;
19547 +      /* include profit or loss for all target levels */
19548 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19549 +        textall=strip(textall)||"0A"x||strip(profittext);
19550 +      %end;
19552 +      %if &validFlag eq N %then %do;
19553 +        /* Percent Correct */
19554 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19555 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19556 +        %end;
19558 +         /* Count */
19559 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19560 +          %if "&adjusted" eq "N" %then %do;
19561 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19562 +          %end;
19563 +          %else %do;
19564 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19565 +          %end;
19566 +         %end;
19567 +      %end;
19568 +      %else %do;
19569 +        /* Percent Correct */
19570 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19571 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19572 +        %end;
19574 +         /* Count */
19575 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19576 +          %if "&adjusted" eq "N" %then %do;
19577 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19578 +          %end;
19579 +          %else %do;
19580 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19581 +          %end;
19582 +         %end;
19583 +      %end;
19585 +      /* nodecolor */
19586 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19587 +       %if &multipleTar ne Y %then %do;
19588 +        nodecolor=&predTarget;
19589 +       %end;
19590 +       %else %do;
19591 +         nodecolor=percentcorrect;
19592 +       %end;
19593 +      %end;
19594 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19595 +        nodecolor=percentcorrect;
19596 +      %end;
19597 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19598 +        nodecolor=1;
19599 +      %end;
19600 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19601 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19602 +          nodecolor=percentcorrect;
19603 +        %end;
19604 +        %else %do;
19605 +          nodecolor=profitloss;
19606 +        %end;
19607 +      %end;
19609 +    end;
19610 +    %end;
19611 +    %if &em_intTarget eq Y %then %do;
19612 +     drop  PREDICTION  TARGET TARLEVEL
19613 +     %if &ValidFlag eq Y %then %do;
19614 +         VPREDICTION
19615 +     %end;
19616 +     ;
19617 +    %end;
19618 +    %if &em_classTarget eq Y %then %do;
19619 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19620 +     %if &ValidFlag eq Y %then %do;
19621 +         VSTATVALUE
19622 +     %end;
19623 +     ;
19624 +    %end;
19626 +  run;
19628 +  /* add leaf index information to plotds - based on primary target only*/
19629 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19630 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19631 +      set &EM_USER_OUTSTATS;
19632 +      if ((statname="PROBABILITY"
19633 +      %if &validexist %then %do;
19634 +       or statname="VALID: PROBABILITY"
19635 +      %end;
19636 +      ) AND (CATEGORY="&TARGETEVENT")
19637 +      %if "&multipleTar" eq "Y" %then %do;
19638 +        AND (Target="%EM_TARGET")
19639 +      %end;
19640 +      );
19641 +    run;
19643 +    %if &validexist %then %do;
19644 +      proc sort data=tempprob; by node; run;
19645 +      %let vpredTarget = V%substr(&predTarget, 2);
19646 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19647 +         by node;
19648 +         id statname;
19649 +      run;
19650 +    %end;
19651 +  %end;
19652 +  %else %do;
19653 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19654 +      set &EM_USER_OUTSTATS;
19655 +      if ((statname="PREDICTION"
19656 +      %if &validexist %then %do;
19657 +       or statname="VALID: PREDICTION"
19658 +      %end;
19659 +      )
19660 +      %if "&multipleTar" eq "Y" %then %do;
19661 +        AND (Target="%EM_TARGET")
19662 +      %end;
19663 +      );
19664 +    run;
19665 +    %if &validexist %then %do;
19666 +      proc sort data=tempprob; by node; run;
19667 +      %let vpredTarget = V%substr(&predTarget, 2);
19668 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19669 +         by node;
19670 +         id statname;
19671 +      run;
19672 +    %end;
19673 +  %end;
19675 +  proc sort data=tempprob; by node; run;
19676 +  data tempoutnodes;
19677 +    merge tempoutnodes tempprob;
19678 +    by node;
19679 +  run;
19681 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19682 +  data tempnodes;
19683 +    retain traintotal validtotal;
19684 +    set tempnodes(where=(leaf ne . ));
19685 +    tprob=round(&predTarget, .01);
19686 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19687 +      percevent_train=round(tprob*100, .01);
19688 +    %end;
19689 +    %else %do;
19690 +      percevent_train=tprob;
19691 +    %end;
19693 +    perc_train=round((n/traintotal)*100, 0.01);
19694 +    /* leafwidth already has a *10 multiplier */
19695 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19697 +    %if &validexist %then %do;
19698 +      %let vpredTarget = V%substr(&predTarget,2);
19699 +      vprob=round(&vpredTarget, .01);
19700 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19701 +        percevent_valid=round(vprob*100, .01);
19702 +      %end;
19703 +      %else %do;
19704 +        percevent_valid=vprob;
19705 +      %end;
19706 +      perc_valid=round((vn/validtotal)*100, .01);
19707 +    %end;
19709 +    index=_N_;
19710 +    keep node index tprob perc_train percevent_train
19711 +    %if &validexist %then %do;
19712 +        vprob percevent_valid perc_valid
19713 +    %end;
19714 +    ;
19715 +  run;
19716 +  proc sort data=tempnodes; by node; run;
19717 +  data &EM_USER_TREE_PLOT;
19718 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19719 +    by node;
19720 +    if missing(node) then delete;
19721 +    %if &oldexists %then %do;
19722 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19723 +      drop oldnodecolor;
19724 +    %end;
19725 +    abovetext = compbl(abovetext);
19727 +    /* add variable labels */
19728 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19729 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19730 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19731 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19732 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19733 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19735 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19736 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19737 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19738 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19739 +          %end;
19740 +          %else %do;
19741 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19742 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19743 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19744 +          %end;
19745 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19747 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19748 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19749 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19750 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19751 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19752 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19753 +          %end;
19754 +          %else %do;
19755 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19756 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19757 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19758 +          %end;
19759 +    ;
19760 +  run;
19762 +  /* delete temporary tables */
19763 +  proc datasets lib=work nolist;
19764 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19765 +  run;
19767 +%mend em_tree_makePlotDs;
19771 +%macro em_tree_report;
19773 +   /* report properties */
19774 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19775 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19776 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19777 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19778 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19779 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19780 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19781 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19782 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19783 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19784 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19785 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19786 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19788 +   %let validexist=0;
19789 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19790 +     %let validexist=1;
19791 +   %end;
19793 +   /* determine if multiple targets will be processed */
19794 +   %let em_tree_multipleTargets=N;
19795 +   %let em_tree_numTarget=1;
19796 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19797 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19798 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19799 +         %let em_tree_multipleTargets=N;
19800 +      %end;
19801 +      %else %do;
19802 +        data _null_;
19803 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19804 +          if eof then
19805 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19806 +        run;
19808 +        %if &em_tree_numTarget gt 1 %then %do;
19809 +           %let em_tree_multipleTargets=Y;
19810 +        %end;
19811 +     %end;
19812 +   %end;
19814 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19816 +   /* variable importance */
19817 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19818 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19820 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19821 +     /* and the columns may not be generated                                                                                 */
19822 +     %let em_tree_cvexists=;
19823 +     %let em_tree_surrexists=.;
19824 +     data _null_;
19825 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19826 +       if eof then do ;
19827 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19828 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19829 +       end;
19830 +     run;
19832 +     data &EM_USER_OUTIMPORT;
19833 +         set &EM_USER_OUTIMPORT;
19834 +         /* format columns based on Precison value specified */
19835 +         format importance 15.&EM_PROPERTY_PRECISION
19836 +              %if &validexist %then %do;
19837 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19838 +              %end;
19839 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19840 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19841 +              %end;
19842 +         ;
19843 +     run;
19845 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19846 +     proc print data=&EM_USER_OUTIMPORT
19847 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19848 +          (where=((nrules>0) OR (nsurrogates>0)))
19849 +        %end;
19850 +        %else %do;
19851 +           (where=(nrules>0))
19852 +        %end;
19853 +        label noobs
19854 +        ;
19855 +     run;
19856 +     title10;
19858 +   %end;
19860 +   /* Sequence */
19861 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19862 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19863 +   data _null_ ;
19864 +      set &EM_USER_outseq (obs=2) end=eof ;
19865 +      if eof then do ;
19866 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19867 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19868 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19869 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19870 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19871 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19872 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19873 +      end;
19874 +    run;
19876 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19877 +      data &EM_USER_OUTSEQ;
19878 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19879 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19880 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19881 +           _XMISC_=_VMISC_
19882 +        %end;
19883 +        %if "&em_tree_aprof" ne "."  %then %do;
19884 +           _XAPROF_=_VAPROF_
19885 +           _XPROF_ = _VPROF_
19886 +        %end;
19887 +        %if "&em_tree_aloss" ne "."  %then %do;
19888 +           _XALOSS_=_VALOSS_
19889 +        %end;
19890 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19891 +           _XPASE_ = _VPASE_
19892 +           _XPMISC_ = _VPMISC_
19893 +        %end;
19895 +        ));
19896 +     %end;
19897 +     %else %do;
19898 +        set &EM_USER_OUTSEQ;
19899 +     %end;
19901 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19902 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19903 +            _MISC_   15.&EM_PROPERTY_PRECISION
19904 +         %end;
19905 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19906 +            _PASE_  15.&EM_PROPERTY_PRECISION
19907 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19908 +         %end;
19909 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19910 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19911 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19912 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19913 +            %end;
19914 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19915 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19916 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19917 +            %end;
19918 +         %end;
19919 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19920 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19921 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19922 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19923 +            %end;
19924 +         %end;
19925 +         %if "&em_tree_seq" ne "." %then %do;
19926 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19927 +         %end;
19928 +         %if "&em_tree_vseq" ne "." %then %do;
19929 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19930 +         %end;
19931 +         %if "&em_tree_aprof" ne "." %then %do;
19932 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19933 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19934 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19935 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19936 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19937 +           %end;
19938 +         %end;
19939 +         %else %if "&em_tree_aloss" ne "." %then %do;
19940 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19941 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19942 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19943 +           %end;
19944 +         %end;
19945 +      ;
19946 +    run;
19947 +   %end;
19949 +   /* Observation Based Importance */
19950 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19952 +      /* need to check for 0 obs */
19953 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19954 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19955 +      %let rc=%sysfunc(close(&dsid));
19957 +      %if &onobs %then %do;
19958 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19959 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19961 +         data &EM_USER_OUTOBSIMP;
19962 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19963 +           if _a;
19964 +           by _INPUT1_;
19965 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19966 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19967 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19968 +                   %end;
19969 +                   ;
19970 +         run;
19971 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19972 +      %end;
19973 +   %end;
19975 +  %end;
19977 +  /* create dataset to support tree diagram and icicle plot */
19978 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19979 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19981 +  /* display tree diagram */
19982 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19983 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19985 +  /* display icicle diagram */
19986 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19987 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19989 +  /* Leaf Statistics Plot */
19990 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19992 +  /* print leaf information to output window */
19993 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19995 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19996 +       by descending N;
19997 +     run;
19999 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20000 +     %local vn;
20001 +     data _null_;
20002 +       set t (obs=2) end=eof;
20003 +       if eof then do;
20004 +         call symput("vn", strip(put(vn, best.)));
20005 +       end;
20006 +     run;
20008 +     data t;
20009 +       set t;
20010 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20011 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20012 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20013 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20014 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20015 +       %end;
20016 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20017 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20018 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20019 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20020 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20021 +          %end;
20022 +       %end;
20023 +       ;
20024 +     run;
20026 +     /* determine if rase is found in t */
20027 +    %let dsid=%sysfunc(open(t,i));
20028 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20029 +    %let rc=%sysfunc(close(&dsid));
20031 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20032 +     proc print data=t noobs label;
20033 +       where tprob ne .;
20034 +       var node depth N tprob
20035 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20036 +         %if "&vn" ne "." %then %do;
20037 +           VN
20038 +         %end;
20039 +         vprob
20040 +       %end;
20041 +       %if &raseexists %then %do;
20042 +            RASE
20043 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20044 +              VRASE
20045 +            %end;
20046 +       %end;
20047 +       ;
20048 +     run;
20049 +     title10;
20050 +  %end;
20052 +  /* create plots that are done during training of node */
20053 +  /* display iterative plot, including reference line */
20054 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20055 +   /* %if &nleaves eq  %then %do; */
20056 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20057 +      data _null_;
20058 +        set &EM_USER_OUTTOPOLOGY end=eof;
20059 +        if eof then do;
20060 +          call symput('nleaves', LEAF);
20061 +        end;
20062 +      run;
20063 +   /* %end; */
20065 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20066 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20067 +  %end;
20069 +  /* display leaf statistics */
20070 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20072 +  /* stats by node if multiple targets = Y */
20073 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20074 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20075 +    data &EM_USER_OUTSTATS;
20076 +      set &EM_USER_OUTSTATS;
20078 +     * if STATNAME="TARGET" then delete;
20079 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20080 +      drop leaf;
20081 +    run;
20082 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20084 +  %end;
20085 +  %else %do;
20086 +    /* add outstats and outdescribe to spk but not results */
20087 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20088 +  %end;
20090 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set EMWS4.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 29 observations read from the data set EMWS4.TREE_OUTSEQ.
NOTE: The data set EMWS4.TREE_OUTSEQ has 29 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 11 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 16 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 16 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 16 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 16 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 16 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 21 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 293 observations read from the data set EMWS4.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 0 observations read from the data set EMWS4.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 161 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 161 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 161 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 138 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 161 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 161 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 161 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 161 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 161 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 161 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 161 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 46 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 23 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 46 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 46 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 23 observations read from the data set WORK.TEMPN.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS4.TREE_TREE_PLOT has 23 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.06 seconds
      


NOTE: There were 161 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 23 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set EMWS4.TREE_TREE_PLOT.
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS4.TREE_TREE_PLOT has 23 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.00 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 23 observations read from the data set EMWS4.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 23 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 23 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 12 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 23 observations read from the data set EMWS4.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

20091  
20092  *------------------------------------------------------------*;
20093  * End REPORT: Tree;
20094  *------------------------------------------------------------*;

20095  /* Reset EM Options */
20096  options formchar="|----|+|---+=|-/\<>*";
20097  options nocenter ls=256 ps=10000;
20098  goptions reset=all device=GIF NODISPLAY;

20099  proc sort data=WORK.EM_USER_REPORT;
20100  by ID VIEW;
20101  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20102  proc sort data=EMWS4.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20103  by NAME;
20104  run;

NOTE: There were 14 observations read from the data set EMWS4.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20105  proc sort data=EMWS4.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20106  by NAME;
20107  run;

NOTE: There were 14 observations read from the data set EMWS4.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20108  data WORK.ASSESS_META;
20109  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20110  by NAME;
20111  run;

NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20112  data EM_temp_assessMeta;
20113  set EMWS4.Tree_CMeta_TRAIN;
20114  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20115  run;

NOTE: There were 12 observations read from the data set EMWS4.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

20116  data EM_temp_assessdata;
20117  set EMWS4.Tree_TRAIN(keep=
20118  F_TargetBuy
20119  I_TargetBuy
20120  P_TargetBuy0
20121  P_TargetBuy1
20122  Q_TargetBuy0
20123  Q_TargetBuy1
20124  R_TargetBuy0
20125  R_TargetBuy1
20126  U_TargetBuy
20127  V_TargetBuy0
20128  V_TargetBuy1
20129  _WARN_
20130  TargetBuy
20131  );
20132  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS4.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 11112 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
















24414   data EM_temp_assessMeta;
24415   set EMWS4.Tree_CMeta_TRAIN;
24416   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24417   run;

NOTE: There were 12 observations read from the data set EMWS4.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24418   data EM_temp_assessdata;
24419   set EMWS4.Tree_VALIDATE(keep=
24420   F_TargetBuy
24421   I_TargetBuy
24422   P_TargetBuy0
24423   P_TargetBuy1
24424   Q_TargetBuy0
24425   Q_TargetBuy1
24426   R_TargetBuy0
24427   R_TargetBuy1
24428   U_TargetBuy
24429   V_TargetBuy0
24430   V_TargetBuy1
24431   _WARN_
24432   TargetBuy
24433   );
24434   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 5983 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 5983 observations read from the data set EMWS4.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 5983 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
















28725   %let _cn = %sysfunc(getoption(CENTER));
28726   options nocenter;
28727   proc print data=EMWS4.Tree_EMREPORTFIT noobs label;
28728   var STAT LABEL TRAIN
28729   VALIDATE
28730   TEST
28731   ;
28732   by TARGET TARGETLABEL;
28733   title9 ' ';
28734   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28735   run;

NOTE: There were 8 observations read from the data set EMWS4.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28736   title10;
28737   options &_cn;

28738   proc sort data=EMWS4.Tree_EMCLASSIFICATION nothreads;
28739   by DATAROLE TARGET TARGETLABEL;
28740   run;

NOTE: There were 8 observations read from the data set EMWS4.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS4.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.18 seconds
      cpu time            0.00 seconds
      

28741   %let _cn = %sysfunc(getoption(CENTER));
28742   options nocenter;
28743   proc print data=EMWS4.Tree_EMCLASSIFICATION noobs label;
28744   var from into pct_row pct_col count percent
28745   ;
28746   by DATAROLE TARGET TARGETLABEL;
28747   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28748   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28749   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28750   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28751   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28752   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28753   where _TYPE_='PREDICTION';
28754   title9 ' ';
28755   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28756   run;

NOTE: There were 8 observations read from the data set EMWS4.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

28757   title9;
28758   title10;
28759   options &_cn;

28760   %let _cn = %sysfunc(getoption(CENTER));
28761   options nocenter;
28762   data EMWS4.Tree_EMEVENTREPORT;
28763   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
28764   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28764 ! FALSEEVENT
28765   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28766      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28767   FALSEEVENT=0;
28768   FALSENEVENT=0;
28769   TRUEEVENT=0;
28770   TRUENEVENT=0;
28771   set EMWS4.Tree_EMEVENTREPORT;
28772   run;

NOTE: There were 2 observations read from the data set EMWS4.TREE_EMEVENTREPORT.
NOTE: The data set EMWS4.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.01 seconds
      

28773   proc print data=EMWS4.Tree_EMEVENTREPORT noobs label;
28774   title9 ' ';
28775   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28776   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28777   run;

NOTE: There were 2 observations read from the data set EMWS4.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

28778   title10;
28779   options &_cn;

28780   proc datasets library=EMWS4 nolist;
28781   modify Tree_EMRANK;
28782   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28783   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28784   run;

NOTE: MODIFY was successful for EMWS4.TREE_EMRANK.DATA.
28785   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

28786   %let _cn = %sysfunc(getoption(CENTER));
28787   options nocenter;
28788   proc print data=EMWS4.Tree_EMRANK label noobs;
28789   var
28790   decile gain lift liftc resp respc N _meanP_;
28791   by
28792   notsorted DATAROLE
28793   notsorted TARGET
28794   notsorted TARGETLABEL
28795   ;
28796   title9 ' ';
28797   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28798   run;

NOTE: There were 40 observations read from the data set EMWS4.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

28799   title10;
28800   options &_cn;

28801   proc datasets library=EMWS4 nolist;
28802   modify Tree_EMSCOREDIST;
28803   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28804   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28805   run;

NOTE: MODIFY was successful for EMWS4.TREE_EMSCOREDIST.DATA.
28806   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

