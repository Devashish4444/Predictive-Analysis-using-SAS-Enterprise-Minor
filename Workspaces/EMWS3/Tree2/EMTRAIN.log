*------------------------------------------------------------*
* Training Log
Date:                April 24, 2020
Time:                19:40:44
*------------------------------------------------------------*
15208  proc freq data=EMWS3.Tree2_VariableSet noprint;
15209  table ROLE*LEVEL/out=WORK.Tree2META;
15210  run;

NOTE: There were 99 observations read from the data set EMWS3.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

15211  proc print data=WORK.Tree2META label noobs;
15212  var ROLE LEVEL COUNT;
15213  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15214  title9 ' ';
15215  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15216  run;

NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

15217  title10;

15218  %let EMNORLEN = %DMNORLEN;
EMWS3.Part_TRAIN EMWS3.Part_TRAIN 
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN 
EMWS3.Part_TRAIN EMWS3.Part_TRAIN 
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
15247  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15248  length ORDER $20;
15249  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15250     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15251  set EMWS3.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
15252  NumLevels=2;
15253  select(upcase(ORDER));
15254  when('DESC') ORDER = 'Descending';
15255  when('ASC') ORDER = 'Ascending';
15256  when('FMTDESC') ORDER = 'Formatted Descending';
15257  when('FMTASC') ORDER = 'Formatted Ascending';
15258  otherwise ORDER = 'Descending';
15259  end;
15260  output;
15261  run;

NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

15262  title9 ' ';
15263  proc print data=WORK.Tree2_EVENT noobs label;
15264  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15265  title9 ' ';
15266  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15267  run;

NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15268  title10;

"No decisions defined for target "RESPOND"." 
15269  proc print data = EMWS3.Ids_RESPOND_DM noobs label;
15270  var _type_ variable label;
15271  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15272  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15273  title9 ' ';
15274  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15275  run;

NOTE: There were 7 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

15276  title10;

15277  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15823  *------------------------------------------------------------*;
15824  * Tree2: Generation of macros and macro variables;
15825  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15826  *------------------------------------------------------------*;

15827  %let EMEXCEPTIONSTRING=;
15828  *------------------------------------------------------------*;
15829  * TRAIN: Tree2;
15830  *------------------------------------------------------------*;
15831  %let EM_ACTION = TRAIN;
15832  %let syscc = 0;
15833  %macro main;
15834  
15835    %if %upcase(&EM_ACTION) = CREATE %then %do;
15836      filename temp catalog 'sashelp.emmodl.tree_create.source';
15837      %include temp;
15838      filename temp;
15839  
15840      %em_tree_create;
15841    %end;
15842  
15843     %else
15844     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15845  
15846         filename temp catalog 'sashelp.emmodl.tree_train.source';
15847         %include temp;
15848         filename temp;
15849         %em_tree_train;
15850     %end;
15851  
15852    %else
15853    %if %upcase(&EM_ACTION) = SCORE %then %do;
15854      filename temp catalog 'sashelp.emmodl.tree_score.source';
15855      %include temp;
15856      filename temp;
15857  
15858      %em_tree_score;
15859  
15860    %end;
15861  
15862    %else
15863    %if %upcase(&EM_ACTION) = REPORT %then %do;
15864  
15865         filename temp catalog 'sashelp.emmodl.tree_report.source';
15866         %include temp;
15867         filename temp;
15868  
15869         %em_tree_report;
15870     %end;
15871  
15872    %else
15873    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15874  
15875         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15876         %include temp;
15877         filename temp;
15878         %EM_TREE_OPENTREEVIEWER;
15879  
15880     %end;
15881  
15882    %else
15883    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15884  
15885         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15886         %include temp;
15887         filename temp;
15888         %EM_TREE_CLOSETREEVIEWER;
15889  
15890     %end;
15891  
15892  
15893     %doendm:
15894  %mend main;
15895  
15896  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15898 +%macro em_tree_train;
15900 +   %if &EM_IMPORT_DATA eq %then %do;
15901 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15902 +       %put &em_codebar;
15903 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15904 +       %put &errormsg;
15905 +       %put &em_codebar;
15906 +       %goto doendm;
15907 +   %end;
15908 +   %else
15909 +       %let EMEXCEPTIONSTRING =;
15911 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15912 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15913 +        %put &em_codebar;
15914 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15915 +        %put &errormsg;
15916 +        %put &em_codebar;
15917 +        %goto doendm;
15918 +   %end;
15920 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15921 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15922 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15923 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15924 +        %put &em_codebar;
15925 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15926 +        %put &errormsg;
15927 +        %put &em_codebar;
15928 +        %goto doendm;
15929 +   %end;
15931 +   /* Initialize property macro variables */
15932 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15933 +   %include temp;
15934 +   filename temp;
15936 +   %EM_SetProperties;
15938 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15939 +   %EM_GETNAME(key=EMTREE, type=DATA);
15940 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15941 +     /* if import eq Y and no importtable defined, throw an exception */
15942 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15943 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15944 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15945 +         %put &em_codebar;
15946 +         %put &errmsg;
15947 +         %put &em_codebar;
15948 +         %goto doendm;
15949 +      %end;
15950 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15951 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15952 +         %put &em_codebar;
15953 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15954 +         %put &errormsg;
15955 +         %put &em_codebar;
15956 +         %goto doendm;
15957 +      %end;
15958 +      %else %do;
15959 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15960 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15961 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15962 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15963 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15964 +         %let dsid = %sysfunc(close(&dsid));
15965 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15966 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15967 +            %put &em_codebar;
15968 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15969 +            %put &errormsg;
15970 +            %put &em_codebar;
15971 +            %goto doendm;
15972 +         %end;
15973 +      %end;
15974 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15975 +         proc delete data=&EM_USER_EMTREE;
15976 +         run;
15977 +      %end;
15978 +   %end;
15979 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15980 +      proc delete data=&EM_USER_EMTREE;
15981 +      run;
15982 +   %end;
15984 +   /* load tree macros */
15985 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15986 +   %include temp;
15987 +   filename temp;
15989 +   /* data sets */
15990 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15991 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15992 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15994 +   /* files */
15995 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15997 +   /* check actual num of target levels */
15998 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15999 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16000 +                              nLevel=_nTargetLevel );
16001 +      %if &_nTargetLevel  > 2 %then %do;
16002 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16003 +        %put &em_codebar;
16004 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16005 +        %put &errormsg;
16006 +        %put &em_codebar;
16007 +        %goto doendm;
16008 +      %end;
16009 +   %end;
16011 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16012 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16013 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16014 +        %let costflag=0;
16015 +        data _null_;
16016 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16017 +          if eof then call symput("costflag", _N_);
16018 +        run;
16019 +        %if &costflag gt 0 %then %do;
16020 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16021 +          %put &em_codebar;
16022 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16023 +          %put &errormsg;
16024 +          %put &em_codebar;
16025 +          %goto doendm;
16026 +       %end;
16027 +     %end;
16028 +   %end;
16030 +   /* determine if multiple targets will be processed */
16031 +   %let em_tree_multipleTargets=N;
16032 +   %let em_tree_numTarget = 1;
16033 +   %let em_tree_targetVars=;
16035 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16036 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16037 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16038 +         %let em_tree_multipleTargets=N;
16039 +      %end;
16040 +      %else %do;
16041 +         /* create macro array of targets  */
16042 +         data _null_;
16043 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16044 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16045 +           if eof then
16046 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16047 +        run;
16049 +        %if &em_tree_numTarget gt 1 %then %do;
16050 +           %let em_tree_multipleTargets=Y;
16051 +        %end;
16052 +      %end;
16053 +   %end;
16055 +   /* create view of only necessary variable for performance reasons */
16056 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16057 +   data &tempData / view=&tempData;
16058 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16059 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16060 +       %EM_TARGET
16061 +     %end;
16062 +     %else %do;
16063 +       %if &em_tree_numTarget ne 0 %then %do;
16064 +         %do i=1 %to &em_tree_numTarget;
16065 +            &&em_tree_targetVars&i
16066 +         %end;
16067 +       %end;
16068 +     %end;
16069 +     );
16070 +   run;
16072 +   /* run Tree procedure */
16073 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16075 +   /* Check return code and throw exception if error is detected */
16076 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16077 +   %if &syserr %then %do;
16078 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16079 +     %goto doendm;
16080 +   %end;
16082 +   /* add decision score code if multiple targets are processed */
16083 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16084 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16085 +   %end;
16087 +   /* create outfit dataset if multiple score statements have been executed */
16088 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16090 +   /* create English Rules */
16091 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16092 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16093 +       %em_tree_makeEnglishRules;
16095 +       /* English Rules */
16096 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16098 +     %end;
16099 +   filename x;
16101 +   %doendm:
16102 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16103 +%macro EM_SetProperties;
16105 +   /* train properties */
16106 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16107 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16108 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16109 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16110 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16111 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16112 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16113 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16114 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16115 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16116 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16117 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16118 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16119 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16120 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16148 +   /* properties for interactive sample */
16149 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16154 +   /* report properties */
16155 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16169 +   /* score properties */
16170 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16173 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16175 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16176 +  %global &nLevel;
16177 +  proc dmdb batch data=&indata
16178 +    classout=_tmp_dmdbout;
16179 +    class &target;
16180 +  run;
16181 +  data _tmp_dmdbout;
16182 +    set _tmp_dmdbout;
16183 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16184 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16185 +  run;
16186 +  data _null_;
16187 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16188 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16189 +    %let dsid = %sysfunc(close(&dsid));
16190 +     call symput("&nLevel", put(&_obs, Best12.));
16191 +  run;
16193 +  proc datasets lib=work nolist;
16194 +     delete _tmp_dmdbout;
16195 +  run;
16196 +  quit;
16197 +%Mend EM_CheckBinaryTargetLevel;
16200 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16202 +  /* determine the number of obs in training data */
16203 +  proc sql;
16204 +    reset noprint;
16205 +    select count(*) into :em_nobs from &indata;
16206 +  quit;
16208 +  /* determine the number of input variables */
16209 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16210 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16212 +  /* retrieve targetEvent from decmeta */
16213 +  %let targetEvent=;
16214 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16215 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16216 +      data _null_;
16217 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16218 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16219 +      run;
16220 +    %end;
16221 +  %end;
16223 +  /* create targetTable if multipleTar eq Y */
16224 +  data temptarget;
16225 +    set &EM_DATA_VARIABLESET;
16226 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16227 +  run;
16229 + /* data sets */
16230 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16231 + %EM_GETNAME(key=EMTREE,        type=DATA);
16232 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16233 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16234 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16235 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16236 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16237 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16238 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16239 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16241 + /* files */
16242 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16243 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16245 + /* turn on pmml if requested */
16246 + %let nnpmml=0;
16247 + %if %symexist(EM_PMML) %then %do;
16248 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16249 +       %let nnpmml=1;
16251 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16252 +   %end;
16253 +%end;
16255 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16257 +%if &nnpmml or &numClassTarget %then %do;
16259 +    /* create dmdb needed for pmml generation */
16260 +    %let tree_maxlevel = 512;
16261 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16262 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16263 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16264 +      %end;
16265 +    %end;
16266 +    %if &tree_maxlevel gt 0 %then %do;
16267 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16268 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16269 +    %end;
16271 +    %let targetOrderString =;
16272 +    %let targetString = ;
16273 +    data _null_;
16274 +       length orderString nameString $10000;
16275 +       retain orderString nameString;
16276 +       set &em_data_variableset end=eof;
16277 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16278 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16279 +       %end;
16280 +       %else %do;
16281 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16282 +       %end;          select(order);
16283 +         when('')        order ='DESC';
16284 +         when('FMTASC')  order='ASCFMT';
16285 +         when('FMTDESC') order='DESFMT';
16286 +         otherwise;
16287 +       end;
16288 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16289 +       nameString = trim(nameString)!!' '!!trim(NAME);
16291 +       if eof then do;
16292 +          call symput('targetOrderString', trim(orderString));
16293 +          call symput('targetString', trim(nameString));
16294 +       end;
16295 +    run;
16297 +    %let arborkluge= "work._treeDMDB";
16299 +    proc dmdb batch data=&indata
16300 +    %if &nnpmml %then %do;
16301 +        PMML
16302 +    %end;
16303 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16305 +      %if &nnpmml %then %do;
16306 +           %if "%EM_ID" ne "" %then %do;
16307 +             id %EM_ID;
16308 +           %end;
16309 +           %if &EM_NUM_CLASS gt 0 %then %do;
16310 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16311 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16312 +                  &targetOrderString;
16313 +           %end;
16314 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16315 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16316 +           %end;
16317 +           target &targetString %EM_INTERVAL_TARGET;
16318 +           %if "%EM_FREQ" ne "" %then %do;
16319 +             freq %EM_FREQ;
16320 +           %end;
16321 +      %end;
16322 +      %else %do;
16323 +         class  &targetOrderString;
16324 +         target &targetString %EM_INTERVAL_TARGET;
16325 +      %end;
16326 +    run;
16327 +    quit;
16329 +    proc datasets lib=work nolist;
16330 +       delete classout varout;
16331 +    run;
16332 +    quit;
16334 + %end;
16337 + /* run Arbor procedure */
16338 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16339 +  proc arbor data=&INDATA
16341 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16342 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16343 +  %end;
16345 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16346 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16347 +  %end;
16349 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16350 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16351 +  %end;
16353 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16354 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16355 +  %end;
16357 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16358 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16359 +  %end;
16361 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16362 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16363 +  %end;
16364 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16365 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16366 +  %end;
16367 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16368 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16369 +  %end;
16371 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16372 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16373 +      alpha = &EM_PROPERTY_SIGLEVEL
16374 +    %end;
16375 +  %end;
16377 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16378 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16379 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16380 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16381 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16383 +        padjust =
16384 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16385 +          &chaid
16386 +        %end;
16387 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16388 +          DEPTH
16389 +        %end;
16390 +      %end;
16391 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16392 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16393 +         pvars = &num_inputs
16394 +      %end;
16395 +    %end;
16396 +  %end;
16397 +  %else %do;
16398 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16399 +         padjust = NONE
16400 +      %end;
16401 +  %end;
16403 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16404 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16405 +    Maxrules = &num_nrules
16406 +  %end;
16408 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16409 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16410 +    Maxsurrs = &num_nsurrs
16411 +  %end;
16413 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16414 +     Missing=&EM_PROPERTY_MISSINGVALUE
16415 +  %end;
16417 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16418 +     USEVARONCE
16419 +  %end;
16421 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16422 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16423 +  %end;
16426 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16427 +    event = "&targetEvent"
16428 +  %end;
16430 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16431 +     DECSEARCH
16432 +  %end;
16434 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16435 +     PRIORSSEARCH
16436 +  %end;
16438 +  %if &arbor_1 ne %then %do;
16439 +    &arbor_1
16440 +  %end;
16442 +  %if &em_arbor ne %then %do;
16443 +     &em_arbor
16444 +  %end;
16445 +  ;
16446 + %end;
16447 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16448 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16449 +       Performance &EM_PROPERTY_PERFORMANCE
16450 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16451 +         nodesize=&EM_PROPERTY_NODESAMPLE
16452 +       %end;
16453 +       ;
16454 +       interact;
16455 + %end;
16456 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16457 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16458 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16459 +    %put &em_codebar;
16460 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16461 +    %put &errormsg;
16462 +    %put &em_codebar;
16463 +    %goto doendm;
16464 +   %end;
16465 +   %else %do;
16466 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16467 +       Performance &EM_PROPERTY_PERFORMANCE
16468 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16469 +         nodesize=&EM_PROPERTY_NODESAMPLE
16470 +       %end;
16471 +       ;
16472 +       interact;
16473 +   %end;
16474 + %end;
16476 + %else %do;
16477 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16478 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16479 +    %put &em_codebar;
16480 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16481 +    %put &errormsg;
16482 +    %put &em_codebar;
16483 +    %goto doendm;
16484 +   %end;
16485 +   %else %do;
16486 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16487 +       Performance &EM_PROPERTY_PERFORMANCE
16488 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16489 +         nodesize=&EM_PROPERTY_NODESAMPLE
16490 +       %end;
16491 +       ;
16492 +        interact;
16493 +   %end;
16494 + %end;
16496 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16497 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16498 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16499 +    %end;
16501 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16502 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16503 +    %end;
16505 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16506 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16507 +    %end;
16509 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16510 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16511 +    %end;
16513 +    %if "%EM_FREQ" ne "" %then %do;
16514 +       freq %EM_FREQ;
16515 +    %end;
16517 +    %if "&multipleTar" eq "Y" %then %do;
16518 +       /* cycle through all target vars in variableset */
16519 +       %let tdsid = %sysfunc(open(temptarget));
16520 +       %if &tdsid %then %do;
16521 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16522 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16523 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16524 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16525 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16526 +             target &var / level = &lvl
16527 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16528 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16529 +             %end;
16530 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16531 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16532 +             %end;
16533 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16534 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16535 +             %end;
16536 +          %end;
16537 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16538 +       %end;
16539 +       useTarget variable = %EM_TARGET;
16540 +    %end;
16541 +    %else %do;
16542 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16543 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16544 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16545 +      %end;
16546 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16547 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16548 +      %end;
16549 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16550 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16551 +      %end;
16552 +    %end;
16554 +    %if "&multipleTar" eq "N" %then %do;
16555 +      &EM_DEC_STATEMENT;
16556 +    %end;
16558 +    Performance &EM_PROPERTY_PERFORMANCE
16559 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16560 +      nodesize=&EM_PROPERTY_NODESAMPLE
16561 +    %end;
16562 +    ;
16564 +    %if "&intFlag" eq "Y" %then %do;
16565 +       INTERACT Largest;
16566 +       Train maxnewdepth=0;
16567 +    %end;
16569 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16570 +         Assess
16571 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16572 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16573 +              %put &em_codebar;
16574 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16575 +              %put &errormsg;
16576 +              %put &em_codebar;
16577 +            %end;
16578 +            %else %do;
16579 +               Validata=&EM_IMPORT_VALIDATE
16580 +            %end;
16581 +         %end;
16582 +         %else %do;
16583 +           NoValidata
16584 +         %end;
16585 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16586 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16587 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16588 +               %if &dsid %then %do;
16589 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16590 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16591 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16592 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16593 +                   %else %do;
16594 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16595 +                      %else %let measure= MISC;
16596 +                   %end;
16597 +                 %end;
16598 +               %end;
16599 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16600 +            %end;
16601 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16602 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16603 +                 %let measure=ASE;
16604 +              %end;
16605 +              %else %do;
16606 +                 %let measure=MISC;
16607 +              %end;
16608 +            %end;
16609 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16610 +              %let measure=ASE;
16611 +            %end;
16612 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16613 +               %let measure = LIFT;
16614 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16615 +               %if &dsid %then %do;
16616 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16617 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16618 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16619 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16620 +                 %end;
16621 +               %end;
16622 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16623 +            %end;
16624 +            measure=&measure
16625 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16626 +               event = "&targetEvent"
16627 +            %end;
16628 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16629 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16630 +            %end;
16631 +         %end;
16632 +         %if "&multipleTar" eq "N" %then %do;
16633 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16634 +               CV
16635 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16636 +                 CVNITer = &EM_PROPERTY_CVNITER
16637 +               %end;
16638 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16639 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16640 +               %end;
16641 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16642 +                 CVSeed = &EM_PROPERTY_CVSEED
16643 +               %end;
16644 +            %end;
16645 +         %end;
16646 +       %end;
16647 +      ;
16649 +      %if "&intFlag" ne "Y" %then %do;
16650 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16651 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16652 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16653 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16655 +          SUBTREE &subtree
16656 +          %if "&subtree" eq "NLEAVES" %then %do;
16657 +            =&EM_PROPERTY_NSUBTREE
16658 +          %end;
16659 +          ;
16660 +        %end;
16662 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16663 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16664 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16665 +          %end;
16666 +       %end;
16667 +      %end;
16668 + %end;
16671 + MakeMacro nleaves = nleaves;
16672 + save
16673 + %if "&EM_USER_EMTREE" ne "" %then %do;
16674 +   MODEL=&EM_USER_EMTREE
16675 + %end;
16676 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16677 +   SEQUENCE=&EM_USER_OUTSEQ
16678 + %end;
16679 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16680 +   IMPORTANCE=&EM_USER_OUTIMPORT
16681 + %end;
16682 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16683 +   NODESTAT=&EM_USER_OUTNODES
16684 + %end;
16685 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16686 +   SUMMARY=&EM_USER_OUTSUMMARY
16687 + %end;
16688 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16689 +   STATSBYNODE=&EM_USER_OUTSTATS
16690 + %end;
16691 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16692 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16693 + %end;
16694 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16695 +   Pathlistnonmissing=&EM_USER_OUTPATH
16696 + %end;
16697 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16698 +   RULES = &EM_USER_OUTRULES
16699 + %end;
16700 + ;
16702 + %if "&intFlag" ne "Y" %then %do;
16704 +   %let lookupString = ;
16705 +   %if ^%symexist(EM_OPTION) %then
16706 +      %let EM_OPTION=;
16708 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16709 +      %let lookupString = LOOKUP=SELECT;
16710 +   %end;
16712 +   %let codetext=;
16713 +   %let norescodetxt=;
16715 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16716 +     %let codetext=&codetext DUMMY;
16717 +     %let norescodetxt=&norescodetxt DUMMY;
16718 +   %end;
16719 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16720 +     %let codetext=&codetext NOLEAFID;
16721 +     %let norescodetxt=&norescodetxt NOLEAFID;
16722 +   %end;
16723 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16724 +     %let norescodetxt=&norescodetxt NOPRED;
16725 +   %end;
16727 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16728 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16730 +   %if &nnpmml %then %do;
16731 +     code pmml;
16732 +   %end;
16734 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16735 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16736 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16737 +   %end;
16738 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16739 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16740 +   %end;
16741 + %end;
16743 + run;
16744 + quit;
16746 + /*%em_checkerror(); */
16747 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16748 +   /* Delete DMDB catalog */
16749 +   proc datasets lib=work nolist;
16750 +       delete _treeDMDB / mt=cat;
16751 +  run;
16752 +  %end;
16754 + %if &nnpmml %then %do;
16755 +    ods pmml close;
16756 + %end;
16758 +  %doendm:
16760 +%mend em_tree_runTreeProcedure;
16762 +%macro em_tree_createFitStats( multipleTar= );
16765 +  /* create targetTable is multipleTar eq Y */
16766 +  data temptarget;
16767 +    set &EM_DATA_VARIABLESET;
16768 +    where ROLE="TARGET";
16769 +  run;
16771 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16772 +   data &EM_USER_EMOUTFIT;
16773 +     length target $32;
16774 +     merge work.fit_train
16775 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16776 +       work.fit_valid
16777 +     %end;
16778 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16779 +       work.fit_test
16780 +     %end;
16781 +     ;
16782 +     %if "&multipleTar" eq "N" %then %do;
16783 +       target="%EM_TARGET";
16784 +     %end;
16785 +     %else %do;
16786 +       target = _TARGET_;
16787 +     %end;
16788 +     drop _NW_ _SUMW_
16789 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16790 +        _VSUMW_
16791 +     %end;
16792 +     ;
16793 +   run;
16795 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16796 +     proc datasets library=work nolist;
16797 +       delete fit_valid;
16798 +     run;
16799 +   %end;
16800 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16801 +     proc datasets library=work nolist;
16802 +       delete fit_test;
16803 +     run;
16804 +   %end;
16806 +%mend em_tree_createFitStats;
16809 +%macro em_tree_makeEnglishRules;
16811 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16812 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16814 +  /* verify that necessary tables exist and if not, skip processing */
16815 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16816 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16817 +    %goto doendm;
16818 +  %end;
16819 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16820 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16821 +    %goto doendm;
16822 +  %end;
16824 +  /* determine length of variable in outpath dataset */
16825 +  %let vlength= ;
16826 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16827 +  %if &dsid ne %then %do;
16828 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16829 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16830 +  %end;
16831 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16833 +  data tempoutpath;
16834 +    length varname $&vlength;
16835 +    retain varname;
16836 +    set &EM_USER_OUTPATH;
16838 +    if ^missing(variable) then varname=variable;
16839 +    else if ^missing(var_name) then varname=var_name;
16840 +    output;
16841 +  run;
16843 +  /* create an array of generated predicted variable names */
16844 +  %let tree_pred_vars = ;
16845 +  %let tree_pred_label = ;
16846 +  %let numpred= 0;
16847 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16849 +    data _null_;
16850 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16851 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16852 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16853 +     if eof then
16854 +       call symput('numpred', strip(put(_N_, BEST.)));
16855 +    run;
16856 +  %end;
16858 +  /* determine if NPRIORS exists in outnodes  */
16859 +  %local nprior_flag;
16860 +  data _null_;
16861 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16862 +    if eof then do;
16863 +      call symput('nprior_flag', strip(put(npriors, best.)));
16864 +    end;
16865 +  run;
16867 +  proc sort data=tempoutpath; by node; run;
16868 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16870 +  data tempoutpath;
16871 +    merge tempoutpath(in=_a) outnodes(keep= node
16872 +    %if "&nprior_flag" ne "." %then %do;
16873 +      NPRIORS
16874 +    %end;
16875 +    %else %do;
16876 +      N
16877 +    %end;
16878 +    %if &numpred gt 0 %then %do;
16879 +      %do i=1 %to &numpred;
16880 +        &&tree_pred_vars&i
16881 +      %end;
16882 +    %end;
16883 +    );
16884 +    by node;
16885 +    if _a;
16886 +  run;
16888 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16890 +  data _null_;
16891 +    file x;
16892 +    set tempoutpath;
16893 +    by node descending varname;
16894 +    retain origvar oldnode string;
16895 +    length origvar $32 oldnode 8 string $200;
16897 +    if _N_ = 1 then do;
16898 +      origvar = varname;
16899 +      oldnode = node;
16900 +    end;
16902 +    if first.node then do;
16903 +       put "&EM_CODEBAR";
16904 +       put " Node = " node;
16905 +       put "&EM_CODEBAR";
16906 +    end;
16908 +      if first.varname then do;
16909 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16910 +            if MISSING(CHARACTER_VALUE) then do;
16911 +             if NUMERIC_VALUE ne .  then do;
16912 +              if ^first.node then do;
16913 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16914 +              end;
16915 +              else do;
16916 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16917 +              end;
16918 +             end;
16919 +            end;
16920 +            else do;
16921 +              if ^first.node then do;
16922 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16923 +              end;
16924 +              else do;
16925 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16926 +              end;
16927 +             end;
16928 +         end;
16929 +         else if RELATION in ("=") then do;
16930 +            if ^first.node then do;
16931 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16932 +            end;
16933 +            else do;
16934 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16935 +            end;
16936 +         end;
16937 +         else if RELATION in ("ISMISSING") then do;
16938 +            if ^first.node then do;
16939 +              string = " AND "|| strip(varname) || " equals Missing";
16940 +            end;
16941 +            else do;
16942 +              string = "if "|| strip(varname) ||" equals Missing";
16943 +            end;
16944 +         end;
16945 +         else if RELATION in ("ISNOTMISSING") then do;
16946 +            if ^first.node then do;
16947 +              string = " AND "|| strip(varname) || " equals All Values";
16948 +            end;
16949 +            else do;
16950 +              string = "if "|| strip(varname) ||" equals All Values";
16951 +            end;
16952 +         end;
16953 +         if ^missing(varname) then origvar = varname;
16954 +         oldnode=node;
16956 +      end;
16957 +      else do;
16958 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16959 +          if MISSING(CHARACTER_VALUE) then do;
16960 +           if  NUMERIC_VALUE ne .  then do;
16961 +            if ^MISSING(string) then
16962 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16963 +            else
16964 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16965 +           end;
16966 +          end;
16967 +          else do;
16968 +            if ^MISSING(string) then
16969 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16970 +            else
16971 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16972 +          end;
16974 +         end;
16975 +         else if RELATION in ("=") then do;
16976 +           string = strip(string)||", "||strip(character_value);
16977 +         end;
16978 +         else if RELATION in ("ISMISSING") then do;
16980 +         end;
16981 +         if ^missing(varname) then origvar = varname;
16982 +         oldnode=node;
16983 +      end;
16984 +      if last.varname then do;
16985 +         if RELATION in ("ISMISSING") then do;
16986 +           if ^first.varname then do;
16987 +             string = strip(string) || " or MISSING";
16988 +           end;
16989 +         end;
16990 +         put string;
16991 +         if ^missing(varname) then origvar = varname;
16992 +         oldnode=node;
16993 +      end;
16995 +      if last.node then do;
16996 +         put "then ";
16997 +         put " Tree Node Identifier   = " node;
16999 +         %if "&nprior_flag" ne "." %then %do;
17000 +           put " Number of Observations = " NPRIORS;
17001 +         %end;
17002 +         %else %do;
17003 +           put " Number of Observations = " N;
17004 +         %end;
17006 +         %if &numpred gt 0 %then %do;
17007 +           %do i=1 %to &numpred;
17008 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17009 +           %end;
17010 +         %end;
17012 +         put " ";
17013 +         if ^missing(varname) then origvar = varname;
17014 +         oldnode=node;
17015 +      end;
17017 +  run;
17019 +  proc datasets lib=work nolist;
17020 +    delete tempoutpath outnodes;
17021 +  run;
17023 +  %doendm:
17024 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: DATA STEP view saved on file EMWS3.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      


NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: 1596258 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633519616 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 70699408 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Created macro variable NLEAVES equal to 8.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_EMTREE has 2275 observations and 4 variables.
NOTE: The data set EMWS3.TREE2_OUTNODES has 15 observations and 24 variables.
NOTE: The data set EMWS3.TREE2_OUTPATH has 55 observations and 7 variables.
NOTE: The data set EMWS3.TREE2_OUTRULES has 386 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS3.TREE2_OUTSTATS has 105 observations and 5 variables.
NOTE: The data set EMWS3.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_OUTTOPOLOGY has 15 observations and 5 variables.
NOTE: External file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\TREEFLOW.sas opened.
NOTE: External file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\TREEPUBLISH.sas opened.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.


NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           4.35 seconds
      cpu time            3.12 seconds
      
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           4.35 seconds
      cpu time            3.12 seconds
      


NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS3.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 55 observations read from the data set EMWS3.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 15 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=24Apr2020:19:40:51,
      Create Time=24Apr2020:19:40:51

NOTE: 94 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: Fileref X has been deassigned.
17026  
17027  *------------------------------------------------------------*;
17028  * End TRAIN: Tree2;
17029  *------------------------------------------------------------*;

17030  *------------------------------------------------------------*;
17031  * Close any missing semi colons;
17032  *------------------------------------------------------------*;
17033  ;
17034  ;
17035  ;
17036  ;
17037  quit;
17038  *------------------------------------------------------------*;
17039  * Close any unbalanced quotes;
17040  *------------------------------------------------------------*;
17041  /*; *"; *'; */
17042  ;
17043  run;
17044  quit;
17045  /* Reset EM Options */
17046  options formchar="|----|+|---+=|-/\<>*";
17047  options nocenter ls=256 ps=10000;
17048  goptions reset=all device=GIF NODISPLAY;

17049  proc sort data=WORK.EM_USER_REPORT;
17050  by ID VIEW;
17051  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

