*------------------------------------------------------------*
* Report Log
Date:                April 25, 2020
Time:                11:48:30
*------------------------------------------------------------*
21130   %let EMEXCEPTIONSTRING=;
21131   *------------------------------------------------------------*;
21132   * REPORT: VarClus;
21133   *------------------------------------------------------------*;
21134   %let EM_ACTION = REPORT;
21135   %let syscc = 0;
21136   
21137   %macro main;
21138   
21139      filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
21140      %include temp;
21141      filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
21142      %include temp;
21143      filename temp;
21144   
21145     %SetProperties;
21146   
21147      %if %upcase(&EM_ACTION) = CREATE %then %do;
21148          filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
21149          %include temp;
21150          filename temp;
21151          %create;
21152      %end;
21153      %else
21154      %if %upcase(&EM_ACTION) = TRAIN %then %do;
21155           filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
21156              %include temp;
21157              filename temp;
21158              %train;
21159      %end;
21160      %else
21161      %if %upcase(&EM_ACTION) = SCORE %then %do;
21162              filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
21163              %include temp;
21164              filename temp;
21165              %score;
21166      %end;
21167      %else
21168      %if %upcase(&EM_ACTION) = REPORT %then %do;
21169              filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
21170              %include temp;
21171              filename temp;
21172              %report;
21173      %end;
21174      /*
21175      %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
21176          %put 'OPENING TABLE';
21177      %end;
21178      %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
21179          %put 'CLOSE TABLE';
21180      %end;
21181      */
21182   %mend main;
21183   %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
21184  +
21185  +/* Initialize property macro variables */
21186  +%macro SetProperties;
21187  +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
21188  +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
21189  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
21190  +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
21191  +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
21192  +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
21193  +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
21194  +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
21195  +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
21196  +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
21197  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
21198  +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
21199  +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
21200  +
21201  +%mend SetProperties;
21202  +
21203  +%Macro MakeDummyVariables(indata=,
21204  +                          outvar=,
21205  +                          outdata=,
21206  +                          fileref=,
21207  +                          recreatecmeta=N, /* optional */
21208  +                          incmeta=,     /* optional */
21209  +                          outcmeta=,    /* optional */
21210  +                          ndummyvars=_ndummyvars
21211  +                          );
21212  +    %global &ndummyvars;
21213  +
21214  +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
21215  +       class
21216  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
21217  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
21218  +    ;
21219  +    run;
21220  +    %let &ndummyvars = 0;
21221  +    data _null_;
21222  +    %let dsid = %sysfunc(open(work._classout));
21223  +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
21224  +    %let dsid = %sysfunc(close(&dsid));
21225  +    run;
21226  +
21227  +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
21228  +       input
21229  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
21230  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
21231  +        / level=nominal stdize=no;
21232  +       make outvar = &outvar;
21233  +       score data = &indata out =&outdata;
21234  +       code  file=  "&fileref";
21235  +    run;
21236  +    %if &recreatecmeta eq Y %then %do;
21237  +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
21238  +    data _tmpds;
21239  +        set _tmpds;
21240  +           ROLE = 'INPUT';
21241  +           LEVEL = 'INTERVAL';
21242  +           CREATOR='DMZIP';
21243  +           if NAME = '_TYPE_' then delete;
21244  +    run;
21245  +    data &outcmeta;
21246  +         set &incmeta _tmpds;
21247  +    run;
21248  +    %end;
21249  +    proc datasets lib=work nolist;
21250  +      delete  _dmdbdat _dmdbcat _classout
21251  +    %if &recreatecmeta eq Y %then %do;
21252  +    _tmpds
21253  +    %end;
21254  +    ;
21255  +    quit;
21256  +%Mend MakeDummyVariables;
21257  +
21258  +/*--- Determine Optimal Number of Cluster ----
21259  +%macro FindClusNum(statds=, groupds=, minvariation=);
21260  +   %global optnclus;
21261  +   data varclus_tmp(drop=_NAME_);
21262  +      set &statDs;
21263  +      where _type_ ='PROPOR';
21264  +   run;
21265  +   proc sort data=varclus_tmp;
21266  +      by _NCL_;
21267  +   run;
21268  +   proc transpose data=varclus_tmp out=varclus_tmp;
21269  +      by _NCL_;
21270  +      var %EM_INTERVAL_INPUT
21271  +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21272  +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21273  +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
21274  +          %do i = 2 %to &nvar;
21275  +          %let varname = %sysfunc(varname(&dsid, &i));
21276  +          &varname
21277  +          %end;
21278  +      %end;
21279  +   ;
21280  +   run;
21281  +
21282  +   %if &minVariation eq %then %do;
21283  +       %let minVariation = &EM_PROPERTY_MINVARIATION;
21284  +   %end;
21285  +   %if ^(0<&minVariation<100) %then %do;
21286  +       %let minVariation = 90;
21287  +   %end;
21288  +
21289  +   data _null_;
21290  +      set varclus_tmp end=eof;
21291  +      by _NCL_;
21292  +      retain flag 0;
21293  +      if first._ncl_ then flag=0;
21294  +      if .<col1 < &minVariation then flag=1;
21295  +      if last._ncl_ and ^flag then do;
21296  +         call symput('OPTNCL', _ncl_);
21297  +         stop;
21298  +      end;
21299  +     if eof then call symput('OPTNCL', _ncl_);
21300  +   run;
21301  +
21302  +   %let optnclus = &OPTNCL;
21303  +
21304  +   data varclus_tmp(drop=_NCL_ _NAME_);
21305  +      set &statDs;
21306  +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
21307  +   run;
21308  +   proc sort data=varclus_tmp;
21309  +      by _TYPE_;
21310  +   run;
21311  +   proc transpose data=varclus_tmp out=varclus_tmp;
21312  +      by _TYPE_;
21313  +   run;
21314  +   proc sort data=varclus_tmp;
21315  +      by _name_ _type_;
21316  +   run;
21317  +
21318  +  proc transpose data=varclus_tmp out=&groupds;
21319  +      by _NAME_;
21320  +   run;
21321  +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
21322  +      by Cluster descending Rsquare;
21323  +      where Cluster ne 0;
21324  +   run;
21325  +   proc datasets lib=work nolist mt=(DATA VIEW);
21326  +      delete varclus_tmp;
21327  +   run;
21328  +   quit;
21329  +%mend findClusNum;
21330  +*/
21331  +
21332  +%macro getNclusfromTrain(inoutstat=, nc=);
21333  +%global &nc;
21334  +data _null_;
21335  +    set &inoutstat end=eof;
21336  +    if eof then do;
21337  +    call symput("&nc", _ncl_);
21338  +    end;
21339  +run;
21340  +%mend  getNclusfromTrain;
21341  +
21342  +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
21343  +
21344  +     *--- Build Code to Modify Metadata ---*;
21345  +     filename X "&deltacodefile";
21346  +     data _null_;
21347  +        FILE X;
21348  +        set &groupds end=eof;
21349  +        /*by Cluster;*/
21350  +         if _N_=1 then do;
21351  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21352  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
21353  +           %end;
21354  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
21355  +           put "if upcase(strip(NAME)) in (";
21356  +        end;
21357  +        if Strip(upcase(Selected)) eq 'YES' then do;
21358  +           string = '"'!!trim(left(VARIABLE))!!'"';
21359  +           put string;
21360  +        end;
21361  +        if eof then do;
21362  +           put ') then ROLE="INPUT";';
21363  +           put 'else ROLE="REJECTED";';
21364  +           put 'end;';
21365  +
21366  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
21367  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
21368  +           %end;
21369  +        end;
21370  +     run;
21371  +     quit;
21372  +
21373  +     filename X;
21374  +
21375  +     quit;
21376  +%mend MakeDeltaCode;
21377  +
21378  +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
21379  +    %if ^%sysfunc(exist(&statds)) %then %do;
21380  +         %goto doendc;
21381  +    %end;
21382  +
21383  +    data &corrds(drop=_TYPE_ _NCL_) ;
21384  +       set &statds;
21385  +       where _type_ eq 'CORR' ;
21386  +    run ;
21387  +    proc sort data=&corrds;
21388  +       by _NAME_ ;
21389  +    run ;
21390  +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
21391  +      BY _NAME_ ;
21392  +    run ;
21393  +    data &corrplotds;
21394  +       length _Y_ $100;
21395  +       set &corrplotDs;
21396  +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
21397  +    run ;
21398  +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
21399  +       set &corrplotds;
21400  +       where _LABEL_ ne '' ;
21401  +       keep _TMP_ _LABEL_ ;
21402  +    run ;
21403  +    data _null_;
21404  +       nobs=0;
21405  +       dsid = open('varclus_match');
21406  +       if dsid then do;
21407  +          nobs = attrn(dsid, 'NOBS');
21408  +          dsid = close(dsid);
21409  +       end;
21410  +       call symput ('CORR_NOBS', nobs);
21411  +    run;
21412  +    %if &corr_nobs %then %do;
21413  +        proc sort data=varclus_match;
21414  +           by _name_;
21415  +        run ;
21416  +        proc sort data=&corrplotds;
21417  +           by _name_;
21418  +        run ;
21419  +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
21420  +           merge varclus_match &corrplotds;
21421  +           by _NAME_ ;
21422  +           if _X_ eq '' then _X_=_NAME_ ;
21423  +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21424  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21425  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21426  +
21427  +       run ;
21428  +    %end;
21429  +    %else %do;
21430  +        proc sort data=&corrplotds;
21431  +           by _name_;
21432  +        run ;
21433  +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
21434  +           set &corrplotds;
21435  +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21436  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21437  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21438  +
21439  +        run ;
21440  +    %end;
21441  +    proc sort data=&corrplotds;
21442  +       by _X_ _Y_;
21443  +    run ;
21444  +    proc datasets lib=work nolist mt=(DATA VIEW);
21445  +       delete varclus_match;
21446  +    run;
21447  +    quit;
21448  +
21449  +%doendc:
21450  +
21451  +%mend MakeVarClusCorrData;
21452  +
21453  +%macro MakeStatPlotData(statds= , outstatplotds=);
21454  +   %if %sysfunc(exist(&statds)) %then %do;
21455  +
21456  +       data varclus_tmp(drop=_NAME_ _NCL_) ;
21457  +          set &statDs;
21458  +          where _type_ in('MEAN', 'STD', 'N');
21459  +       run ;
21460  +       proc transpose data=varclus_tmp out=&outstatplotds;
21461  +          id _TYPE_ ;
21462  +       run ;
21463  +       data &outstatplotds;
21464  +          set &outstatplotds(obs=1000);
21465  +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
21466  +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21467  +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
21468  +          else SCALEDSTD= STD ;
21469  +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
21470  +       run ;
21471  +       proc sort data=&outstatplotds;
21472  +          by descending SCALEDSTD ;
21473  +       run ;
21474  +       proc datasets lib=work nolist mt=(DATA VIEW);
21475  +          delete varclus_tmp;
21476  +       run;
21477  +       quit;
21478  +    %end;
21479  +
21480  +%mend MakeStatPlotData;
21481  +
21482  +
21483  +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
21484  +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
21485  +    data &EM_USER_OUTSTATSCORE;
21486  +          set &indata;
21487  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
21488  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21489  +          if _TYPE_ = 'STD' then _NAME_='STD';
21490  +          DROP _TYPE_ _NCL_;
21491  +     run;
21492  +
21493  +     filename _file_  "&fileRef";
21494  +
21495  +     data _null_;
21496  +        FILE _file_ MOD;
21497  +        put ' ';
21498  +        put '/*-------------------------------------------------*/';
21499  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
21500  +        put '/*-------------------------------------------------*/';
21501  +        put ' ';
21502  +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
21503  +
21504  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21505  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21506  +
21507  +        %let k = 1;
21508  +        %do %while(^%sysfunc(fetch(&dsid)));
21509  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21510  +                %if &k > 2 %then %do;
21511  +                 %let cn = %eval(&k-2);
21512  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
21513  +                %end;
21514  +                %let k = %eval(&k+1);
21515  +        %end;
21516  +
21517  +        %let rc = %sysfunc(rewind(&dsid));
21518  +
21519  +        %do i= 2 %to &nvar;
21520  +            %let _varname =  %sysfunc(varname(&dsid, &i));
21521  +            %do %while(^%sysfunc(fetch(&dsid)));
21522  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21523  +                %if &_name = MEAN %then
21524  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
21525  +                %else %if &_name = STD %then
21526  +                %let _std = %sysfunc(getvarn(&dsid, &i));
21527  +                %else %do;
21528  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
21529  +                      %let abscoeff = %sysfunc(abs(&coeff));
21530  +                          %if &abscoeff >  0 %then %do;
21531  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21532  +                           %end;
21533  +                 %end;
21534  +             %end;
21535  +             %let rc = %sysfunc(rewind(&dsid));
21536  +         %end;
21537  +
21538  +        %let dsid= %sysfunc(close(&dsid));
21539  +       run;
21540  +%mend CreateScoreCode;
21541  +
21542  +
21543  +
21544  +/*----------------------------------------------------------
21545  +    Instead of using %MakeRSquareData,
21546  +    %MakeVarClusResultTable at macro2.source is used
21547  + +----------------------------------------------------------*/
21548  +
21549  +
21550  +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
21551  +
21552  +/* modifying  from ods rsquare = data */
21553  +
21554  +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
21555  +    Length Cluster $16;
21556  +    length Variable $32;
21557  +    Length VariableLabel $64;
21558  +    set &indata; retain CurrentCluster;
21559  +    if NumberOfClusters ^= &ncluster then delete;
21560  +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
21561  +    CurrentCluster = Cluster;
21562  +   run;
21563  +proc sort data =&outdata ;
21564  +     by Cluster RsquareRatio;
21565  +run;
21566  +data _tmprsq(drop=index);
21567  +     set &outdata; by Cluster;
21568  +     if first.Cluster then do;
21569  +     index = strip(scan(Cluster,2 ));
21570  +     Variable = "Clus"||index;
21571  +     VariableLabel = "Cluster Component "||index;
21572  +     OwnCluster = 1;
21573  +     NextClosest = .;
21574  +     RsquareRatio = 0;
21575  +     output;
21576  +     end;
21577  +run;
21578  +
21579  +proc sort data = _tmprsq ;
21580  +     by Cluster RsquareRatio;
21581  +run;
21582  +data &outdata;
21583  +     set &outdata _tmprsq;
21584  +by Cluster;
21585  +run;
21586  +
21587  +
21588  +/* Just create the Selected variable with all YES */
21589  +
21590  +data &outdata;
21591  +    set &outdata; by cluster;
21592  +    length Selected $8;
21593  +    Selected = 'YES';
21594  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21595  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21596  +    rename OwnCluster = RSqWithClusterComp;
21597  +    rename NextClosest = RSqWithNextClusComp;
21598  +run;
21599  +
21600  +
21601  +/* Selected = Y/N will be done %score section -----
21602  +
21603  +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
21604  +data &outdata;
21605  +    set &outdata; by cluster;
21606  +    length Selected $8;
21607  +    if first.Cluster then Selected = 'YES';
21608  +    else Selected = 'NO';
21609  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21610  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21611  +    rename OwnCluster = RSqWithClusterComp;
21612  +    rename NextClosest = RSqWithNextClusComp;
21613  +run;
21614  +%end;
21615  +%else %do;
21616  +data &outdata;
21617  +    set &outdata; by cluster;
21618  +    if last.Cluster then Selected = 'YES';
21619  +    else Selected = 'NO';
21620  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21621  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21622  +    rename OwnCluster = RSqWithClusterComp;
21623  +    rename NextClosest = RSqWithNextClusComp;
21624  +run;
21625  +%end;
21626  +---------------------------------------------------------------*/
21627  +
21628  +%if %sysfunc(exist(&inClusRSquare)) %then %do;
21629  +/* to calculate NextClosestClusRsq */
21630  +proc transpose data = &inClusRSquare  out=_clusRsq;
21631  +      by cluster;
21632  +      run;
21633  +data _clusRsq;
21634  +     set _clusRsq;
21635  +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
21636  +run;
21637  +
21638  +proc sort data=_clusRsq;
21639  +    by cluster col1;
21640  +    run;
21641  +data _clusRsq(drop=_NAME_ _LABEL_);
21642  +     set _clusRsq; by cluster;
21643  +     if last.Cluster then output;
21644  +     label  COL1 = 'R-Sqaure with Next Cluster Component';
21645  +     rename COL1 = RSqWithNextClusComp;
21646  +     rename Cluster = Variable;
21647  +     label  Cluster = "Variable";
21648  +run;
21649  +
21650  +proc sort data =&outdata;
21651  +     by Variable;
21652  +run;
21653  +data &outdata;
21654  +    merge &outdata _clusRsq;
21655  +    by Variable;
21656  +run;
21657  +proc sort data =&outdata;
21658  +by Cluster  RsquareRatio;
21659  +run;
21660  +quit;
21661  +%end;
21662  +
21663  +proc datasets lib = work nolist;
21664  +     delete _tmprsq _clusRsq;
21665  +     run;
21666  +quit;
21667  +
21668  +%mend MakeRSquareData;
21669  +
21670  +
21671  +/*-------------------------------------------------------------------------*/
21672  +
21673  +
21674  +
21675  +%macro ModifyCorr(indata=,
21676  +                  outdata=,
21677  +                  rsquare = Y
21678  +                  );
21679  +    data corr_tmp;
21680  +        set &indata;
21681  +    run;
21682  +     proc sql;
21683  +           update &indata
21684  +           set
21685  +     %let dsid = %sysfunc(open(work.corr_tmp));
21686  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21687  +          %do i = 4 %to &nvar;
21688  +          %let _name = %sysfunc(varname(&dsid, &i));
21689  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21690  +            %else  %let _name_md = &_name;
21691  +            %if &i < &nvar %then %do;
21692  +               &_name = 1- &_name_md ,
21693  +            %end;
21694  +            %else %do;
21695  +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
21696  +            %end;
21697  +          %end;
21698  +      %let dsid= %sysfunc(close(&dsid));
21699  +
21700  +      select * from &indata;
21701  +      run;
21702  +      proc datasets lib = work nolist;
21703  +           delete corr_tmp;
21704  +      run;
21705  +      quit;
21706  +
21707  + %mend ModifyCorr;
21708  +
21709  + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
21710  +    data &outdata(drop= _NCL_  _TYPE_);
21711  +       set &indata;
21712  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21713  +       rename _NAME_ = Cluster;
21714  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21715  +    run;
21716  +    %if &RSquare eq Y %then %do;
21717  +     data corr_tmp;
21718  +        set &outdata;
21719  +     run;
21720  +
21721  +     data &outdata(drop=i);
21722  +          set &outdata;
21723  +          %let dsid = %sysfunc(open(work.corr_tmp));
21724  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21725  +          %do i = 2 %to &nvar;
21726  +            %let _name = %sysfunc(varname(&dsid, &i));
21727  +            %let _name_md = &_name.**2;
21728  +                &_name = &_name_md;
21729  +          %end;
21730  +      %let dsid= %sysfunc(close(&dsid));
21731  +      run;
21732  +      proc datasets lib = work nolist;
21733  +           delete corr_tmp;
21734  +      run;
21735  +
21736  +    %end;
21737  +     quit;
21738  +%mend MakeClusStructCorrData;
21739  +
21740  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
21741  +    data &outdata(drop= _NCL_  _TYPE_);
21742  +       set &indata;
21743  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21744  +       rename _NAME_ = Cluster;
21745  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21746  +    run;
21747  +    data corr_tmp;
21748  +        set &outdata;
21749  +    run;
21750  +
21751  +    %let dsid = %sysfunc(open(work.corr_tmp));
21752  +    %let nclus2= %eval(&ncluster+1);
21753  +    data &outdata;
21754  +         set &outdata;
21755  +          %do i = 2 %to &nclus2;
21756  +          %let i_1 = %eval(&i-1);
21757  +            %let _name = %sysfunc(varname(&dsid, &i));
21758  +            %let _newName = Clus&i_1;
21759  +                rename &_name = &_newName; ;
21760  +                *label &_name ="Cluster &i_1";
21761  +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21762  +          %end;
21763  +          keep Cluster
21764  +          %do i = 2 %to &nclus2;
21765  +                %let _name = %sysfunc(varname(&dsid, &i));
21766  +                &_name
21767  +          %end;
21768  +          ;
21769  +    %let dsid= %sysfunc(close(&dsid));
21770  +     run;
21771  +     quit;
21772  +
21773  +    %if &RSquare eq Y %then %do;
21774  +
21775  +       data corr_tmp;
21776  +        set &outdata;
21777  +     run;
21778  +
21779  +     data &outdata(drop=i);
21780  +          set &outdata;
21781  +          %let dsid = %sysfunc(open(work.corr_tmp));
21782  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21783  +          %do i = 2 %to &nvar;
21784  +            %let _name = %sysfunc(varname(&dsid, &i));
21785  +            %let _name_md = &_name.**2;
21786  +                &_name = &_name_md;
21787  +          %end;
21788  +      %let dsid= %sysfunc(close(&dsid));
21789  +      run;
21790  +    %end;
21791  +
21792  +    %if &makeplotds eq Y %then %do;
21793  +     proc transpose data = &outdata
21794  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21795  +          by cluster;
21796  +     run;
21797  +     data &plotds;
21798  +          set  &plotds;
21799  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21800  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21801  +     run;
21802  +     %end;
21803  +     proc datasets lib = work nolist;
21804  +           delete corr_tmp;
21805  +     run;
21806  +     quit;
21807  +%mend MakeInterClusCorrData;
21808  +
21809  +
21810  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21811  +
21812  +data &outlink(drop = Selected);
21813  +     set &indata;
21814  +     LINKID = _N_;
21815  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21816  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21817  +run;
21818  +data &outnode(keep=NODEID TYPE LABEL);
21819  +    set &indata;
21820  +    length TYPE $16;
21821  +    rename Variable = NODEID;
21822  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21823  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21824  +    then  TYPE = "CLUSTER";
21825  +    else  TYPE="VARIABLE";
21826  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21827  +run;
21828  +quit;
21829  +%mend MakeClusConstellData;
21830  +
21831  +
21832  +
21833  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21834  +
21835  +data &outlink(drop = Selected);
21836  +     set &indata;
21837  +     LINKID = _N_;
21838  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21839  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21840  +run;
21841  +data &outnode(keep=NODEID TYPE LABEL);
21842  +    set &indata;
21843  +    length TYPE $16;
21844  +    rename Variable = NODEID;
21845  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21846  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21847  +    then  TYPE = "CLUSTER";
21848  +    else  TYPE="VARIABLE";
21849  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21850  +run;
21851  +quit;
21852  +%mend MakeClusConstellData;
21853  +
21854  +
21855  +/*--- This will work only when inds is not a view data -------
21856  +
21857  +%macro getNVarNObs(inds=, nvar=, nobs=);
21858  +
21859  +    %global &nvar;
21860  +    %global &nobs;
21861  +    data _null_;
21862  +         dsid = open("&inds");
21863  +         nv = attrn(dsid, 'NVAR');
21864  +         no = attrn(dsid, 'NOBS');
21865  +         dsid = close(dsid);
21866  +         call symput("&nvar", nv);
21867  +         call symput("&nobs", no);
21868  +    run;
21869  +    quit;
21870  +%mend  getNVarNObs;
21871  +
21872  ++---------------------------------------------------------------*/
21873  +
21874  +
21875  +%macro getNVar(inds=, nvar=);
21876  +    %global &nvar;
21877  +    data _null_;
21878  +         dsid = open("&inds");
21879  +         nv = attrn(dsid, 'NVAR');
21880  +         dsid = close(dsid);
21881  +         call symput("&nvar", nv);
21882  +    run;
21883  +    quit;
21884  +%mend  getNVar;
21885  +
21886  +
21887  +
21888  +%macro getNObs(inds=, nobs=);
21889  +    %global &nobs;
21890  +    data _null_;
21891  +        set &inds end=eof;
21892  +        if eof then call symput("&nobs", _N_);
21893  +    run;
21894  +    quit;
21895  +%mend  getNObs;
21896  +
21897  +%Macro CreateVarclusMeta(trainnum=);
21898  +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21899  +    data &EM_USER_VARCLUSMETA;
21900  +         length TrainNum 8.;
21901  +         length NewTrain $8;
21902  +         length NGCluster 8.;
21903  +         length ExportedComp $16;
21904  +         length HideVariable $8;
21905  +         TrainNum = &trainnum;
21906  +         NewTrain = "Y";
21907  +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
21908  +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
21909  +         NGCluster = 0; /* zero means no twostage */
21910  +   run;
21911  +   quit;
21912  +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
21913  +
21914  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
21915  +    data &outdata(drop= _NCL_  _TYPE_);
21916  +       set &indata;
21917  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21918  +       %if &globalclusid ne %then %do;
21919  +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21920  +       rename _NAME_ = Cluster;
21921  +       %end;
21922  +       %else %do;
21923  +        _NAME_ = upcase(_NAME_);
21924  +       rename _NAME_ = Cluster;
21925  +       %end;
21926  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21927  +    run;
21928  +    data corr_tmp;
21929  +        set &outdata;
21930  +    run;
21931  +
21932  +    %let dsid = %sysfunc(open(work.corr_tmp));
21933  +    %let nclus2= %eval(&ncluster+1);
21934  +    data &outdata;
21935  +         set &outdata;
21936  +          %do i = 2 %to &nclus2;
21937  +          %let i_1 = %eval(&i-1);
21938  +            %let _name = %sysfunc(varname(&dsid, &i));
21939  +            %if &globalclusid ne %then
21940  +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
21941  +                     rename &_name = &_newName;
21942  +                     *label &_name ="GC &globalclusid : Cluster &i_1";
21943  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
21944  +                %end;
21945  +            %else
21946  +                %do; %let _newName = CLUS&i_1;
21947  +                     rename &_name = &_newName;
21948  +                     *label &_name ="Cluster &i_1";
21949  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21950  +                %end;
21951  +          %end;
21952  +          keep Cluster
21953  +          %do i = 2 %to &nclus2;
21954  +                %let _name = %sysfunc(varname(&dsid, &i));
21955  +                &_name
21956  +          %end;
21957  +          ;
21958  +    %let dsid= %sysfunc(close(&dsid));
21959  +     run;
21960  +     quit;
21961  +
21962  +    %if &RSquare eq Y %then %do;
21963  +
21964  +       data corr_tmp;
21965  +        set &outdata;
21966  +     run;
21967  +
21968  +     data &outdata;
21969  +          set &outdata;
21970  +          %let dsid = %sysfunc(open(work.corr_tmp));
21971  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21972  +          %do i = 2 %to &nvar;
21973  +            %let _name = %sysfunc(varname(&dsid, &i));
21974  +            %let _name_md = &_name.**2;
21975  +                &_name = &_name_md;
21976  +          %end;
21977  +      %let dsid= %sysfunc(close(&dsid));
21978  +      run;
21979  +    %end;
21980  +
21981  +    %if &makeplotds eq Y %then %do;
21982  +     proc transpose data = &outdata
21983  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21984  +          by cluster;
21985  +     run;
21986  +     data &plotds;
21987  +          set  &plotds;
21988  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21989  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21990  +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21991  +     run;
21992  +     %end;
21993  +     proc datasets lib = work nolist;
21994  +           delete corr_tmp;
21995  +     run;
21996  +     quit;
21997  +%mend MakeInterClusCorrData;
21998  +
21999  +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
22000  +    data _tmpds(drop= _NCL_);
22001  +       set &indata;
22002  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
22003  +       %if &globalclusid ne %then %do;
22004  +           _NAME_ = "GC&globalclusid.";
22005  +       rename _NAME_ = Cluster;
22006  +       %end;
22007  +       %else %do;
22008  +        _NAME_ = "CLUS";
22009  +        rename _NAME_ = Cluster;
22010  +       %end;
22011  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
22012  +    run;
22013  +    proc transpose data =_tmpds out =&outdata;
22014  +    run;
22015  +
22016  +    data &outdata(drop=COL1);
22017  +        %if &globalclusid ne %then %do;
22018  +        length GCluster $16;
22019  +        %end;
22020  +        length Cluster $32;
22021  +        length _NAME_ $32;
22022  +         set &outdata;
22023  +         _NAME_ = upcase(_NAME_);
22024  +         rename _NAME_=Variable;
22025  +         *label _NAME_="Variable";
22026  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22027  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22028  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22029  +
22030  +         %if &globalclusid ne %then %do;
22031  +          GCluster = "GC&globalclusid";
22032  +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
22033  +         %end;
22034  +         %else %do;
22035  +         Cluster = "CLUS"||strip(COL1);
22036  +        %end;
22037  +         rename COL2 = RSqWithOwnClusComp;
22038  +         *label COL2 = "R-Square With Own Cluster Component";
22039  +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
22040  +
22041  +   run;
22042  +   proc sort data =&outdata;
22043  +        by Cluster RSqWithOwnClusComp;
22044  +   run;
22045  +   proc datasets lib = work nolist;
22046  +           delete _tmpds;
22047  +   run;
22048  +   quit;
22049  +%mend MakeOwnRSquare;
22050  +
22051  +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
22052  +    data &outdata(drop= _NCL_  _TYPE_);
22053  +       %if &globalclusid ne %then %do;
22054  +        length GCluster $16;
22055  +        %end;
22056  +       set &indata;
22057  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
22058  +       %if &globalclusid ne %then %do;
22059  +         GCluster = "GC&globalclusid";
22060  +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
22061  +         rename _NAME_ = Cluster;
22062  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22063  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22064  +
22065  +       %end;
22066  +       %else %do;
22067  +         _NAME_ = upcase(_NAME_);
22068  +         rename _NAME_ = Cluster;
22069  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22070  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22071  +
22072  +       %end;
22073  +     run;
22074  +    %if &RSquare eq Y %then %do;
22075  +     data corr_tmp;
22076  +          set &outdata;
22077  +     run;
22078  +     %let istart = 2;
22079  +     %if &globalclusid ne %then %let istart = 3;
22080  +     data &outdata;
22081  +          set &outdata;
22082  +          %let dsid = %sysfunc(open(work.corr_tmp));
22083  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
22084  +          %do i =&istart %to &nvar;
22085  +            %let _name = %sysfunc(varname(&dsid, &i));
22086  +            %let _name_md = &_name.**2;
22087  +                &_name = &_name_md;
22088  +          %end;
22089  +      %let dsid= %sysfunc(close(&dsid));
22090  +      run;
22091  +      proc datasets lib = work nolist;
22092  +           delete corr_tmp;
22093  +      run;
22094  +    %end;
22095  +     quit;
22096  +%mend MakeClusStructCorrData;
22097  +
22098  +/*
22099  +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
22100  +*/
22101  +
22102  +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
22103  +
22104  +     /* The indata should be the outdata
22105  +        from %MakeClusStructCorrData(indata=, outdata=, ); */
22106  +
22107  +     proc sort data =&indata out=_tmpclusRsq;
22108  +     by cluster;
22109  +     run;
22110  +
22111  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
22112  +      by cluster;
22113  +     run;
22114  +
22115  +     proc sort data=_tmpclusRsq;
22116  +        by _NAME_ COL1;
22117  +     run;
22118  +
22119  +     data _tmpclusRsq;
22120  +         length _NAME_ $32;
22121  +         set _tmpclusRsq; by _NAME_;
22122  +          _NAME_ = upcase(_NAME_);
22123  +          %if &ncluster ne 1 %then %do;
22124  +             if last._NAME_ then delete;
22125  +          %end;
22126  +          %else %do;
22127  +             COL1 = 0;
22128  +          %end;
22129  +     run;
22130  +     /* need to sort again */
22131  +     proc sort data=_tmpclusRsq;
22132  +        by _NAME_ COL1;
22133  +     run;
22134  +
22135  +     data &outdata;
22136  +         set _tmpclusRsq; by _NAME_;
22137  +         Cluster = upcase(Cluster);
22138  +         if last._NAME_ then output;
22139  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
22140  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
22141  +         rename COL1 = RSqWithNextClusComp;
22142  +         Cluster = upcase(Cluster);
22143  +         rename Cluster = ClosestCluster;
22144  +         *label  Cluster = "Next Closest Cluster";
22145  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
22146  +         rename _NAME_ = Variable;
22147  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22148  +    run;
22149  +
22150  +
22151  +    %if &globalclusid ne %then %do;
22152  +    data &outdata;
22153  +       length GCluster $16;
22154  +       set &outdata;
22155  +       GCluster = "GC&globalclusid";
22156  +       run;
22157  +    %end;
22158  +    proc datasets lib = work nolist;
22159  +           delete _tmpclusRsq;
22160  +    run;
22161  +    quit;
22162  +%mend FindNextClosestClusByVar;
22163  +
22164  +
22165  +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
22166  +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
22167  +     proc sort data =&indata out=_tmpclusRsq;
22168  +     by cluster;
22169  +     run;
22170  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
22171  +     by cluster;
22172  +     run;
22173  +     proc sort data=_tmpclusRsq;
22174  +        by _NAME_ col1;
22175  +     run;
22176  +     data _tmpclusRsq;
22177  +         length _NAME_ $32;
22178  +         set _tmpclusRsq; by _NAME_;
22179  +          _NAME_ = upcase(_NAME_);
22180  +          %if &ncluster ne 1 %then %do;
22181  +             if last._NAME_ then delete;
22182  +          %end;
22183  +          %else %do;
22184  +             COL1 = 0;
22185  +          %end;
22186  +     run;
22187  +     data &outdata;
22188  +         set _tmpclusRsq; by _NAME_;
22189  +         Cluster = upcase(Cluster);
22190  +         if last._NAME_ then output;
22191  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
22192  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
22193  +         rename COL1 = RSqWithNextClusComp;
22194  +         Cluster = upcase(Cluster);
22195  +         rename Cluster = ClosestCluster;
22196  +         *label  Cluster = "Next Closest Cluster";
22197  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
22198  +         rename _NAME_ = Variable;
22199  +         *label  _NAME_ = "Variable";
22200  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22201  +
22202  +    run;
22203  +    %if &globalclusid ne %then %do;
22204  +    data &outdata;
22205  +       length GCluster $16;
22206  +       set &outdata;
22207  +       GCluster = "GC&globalclusid";
22208  +       run;
22209  +    %end;
22210  +
22211  +    proc datasets lib = work nolist;
22212  +           delete _tmpclusRsq;
22213  +    run;
22214  +
22215  +    quit;
22216  +%mend FindNextClosestClusByCluster;
22217  +
22218  +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
22219  +/*----
22220  +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
22221  +-----------*/
22222  +
22223  +proc sort data =&indata1;
22224  +    by Variable;
22225  +run;
22226  +proc sort data =&indata2;
22227  +    by Variable;
22228  +run;
22229  +data &outdata;
22230  +    merge &indata1 &indata2;
22231  +    by Variable;
22232  +    length Type $16;
22233  +    Type = 'Variable';
22234  +    *label Type ='Type';
22235  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
22236  +run;
22237  +
22238  +
22239  +data &indata3;
22240  +    set  &indata3 ;
22241  +    length RSqWithOwnClusComp 8.;
22242  +    Cluster = Variable;
22243  +    RSqWithOwnClusComp = 1;
22244  +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
22245  +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
22246  +    length Type $16;
22247  +    Type = 'ClusterComp';
22248  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
22249  +
22250  +;
22251  +run;
22252  +
22253  +proc sort data=&outdata;
22254  +    by Cluster;
22255  +run;
22256  +proc sort data =&indata3;
22257  +    by Cluster;
22258  +run;
22259  +
22260  +data &outdata;
22261  +     set &outdata &indata3;
22262  +     by Cluster;
22263  +run;
22264  +
22265  +
22266  +/* Create the Selected variable with all YES */
22267  +
22268  +data &outdata;
22269  +     set &outdata;
22270  +     length RsqRatio 8.;
22271  +     length Selected $8;
22272  +     *label RSqRatio = "1-R**2 Ratio";
22273  +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
22274  +     *label Selected = "Variable Selected";
22275  +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
22276  +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
22277  +     Selected ='YES';
22278  +     rename _LABEL_ = Label;
22279  +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
22280  +run;
22281  +
22282  +
22283  +/*----  Selected = Y/N will be assigened at the %score                   -------+
22284  +        Just create the Selected variable with all YES at the step above
22285  + +------------------------------------------------------------------------------+
22286  +
22287  +proc sort data=&outdata;
22288  +    by Cluster RsqRatio;
22289  +run;
22290  +
22291  +%if &selectedcomp eq CLUSTERCOMP %then %do;
22292  +data &outdata;
22293  +     set &outdata; by Cluster;
22294  +     length Selected $8;
22295  +     label Selected = "Variable Selected";
22296  +     if  first.Cluster then Selected ='Yes';
22297  +     else Selected = 'No';
22298  +    run;
22299  +%end;
22300  +%else %do;
22301  +data &outdata(drop = _var _varchange);
22302  +     set &outdata; retain _var 0; by Cluster;
22303  +     length Selected $8;
22304  +     label Selected = "Variable Selected";
22305  +     if first.Cluster then  _varchange = 0;
22306  +     else _varchange =1;
22307  +     if _var ne _varchange then  Selected  = 'Yes';
22308  +     else Selected = 'No';
22309  +     if last.cluster then  _var = 0;
22310  +     else _var = _varchange;
22311  +run;
22312  +%end;
22313  +
22314  +--------------------------------------------------------------*/
22315  +
22316  +quit;
22317  +%mend MakeVarClusResultTable;
22318  +
22319  +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
22320  +     proc sort data =&indata;
22321  +        by cluster;
22322  +     run;
22323  +     proc transpose data =&indata
22324  +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
22325  +          by cluster;
22326  +     run;
22327  +     data &outdata;
22328  +          set  &outdata;
22329  +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22330  +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22331  +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
22332  +     run;
22333  +     %if &globalclusid ne %then %do;
22334  +     data &outdata;
22335  +          Length GCluster $16;
22336  +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22337  +          set  &outdata;
22338  +          GCluster ="GC&globalclusid.";
22339  +          run;
22340  +     %end;
22341  +
22342  +%Mend MakePlotDataFromCorrTable;
22343  +
22344  +
22345  +%macro MakeCorrelation(indata=,
22346  +                       outstat=_tmpoutstat,
22347  +                       corrmatrix=N,
22348  +                       outcorr=_tmpoutcorr,
22349  +                       includeclassvar=N,
22350  +                       target=,
22351  +                       freq=,
22352  +                       weight=);
22353  +   %if &target eq  %then %do;
22354  +
22355  +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
22356  +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
22357  +       %if &includeclassvar eq Y %then %do;
22358  +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
22359  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
22360  +          %do i = 2 %to &nvar;
22361  +          %let varname = %sysfunc(varname(&dsid, &i));
22362  +          &varname
22363  +          %end;
22364  +       %end;
22365  +       ;
22366  +      %if &freq ne  %then %do;
22367  +          freq &freq;
22368  +      %end;
22369  +      %if &weight ne  %then %do;
22370  +          weight &weight;
22371  +      %end;
22372  +
22373  +      run;
22374  +      %if &corrmatrix eq Y %then %do;
22375  +      data  &outcorr (drop = _NCL_ _TYPE_);
22376  +           set  &outstat ;
22377  +           if _TYPE_ ='CORR' then output;
22378  +      run;
22379  +      %end;
22380  +    %end;
22381  +    %else %do;
22382  +       proc corr data=&indata outp=&outstat noprint;
22383  +            var
22384  +       %let dsid = %sysfunc(open(&indata));
22385  +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
22386  +          %do i = 1 %to &nvar;
22387  +              %let _name = %sysfunc(varname(&dsid, &i));
22388  +              %if &_name ne &target %then;
22389  +              &_name
22390  +           %end;
22391  +        %let dsid= %sysfunc(close(&dsid));
22392  +        ;
22393  +        with &target;
22394  +        run;
22395  +    %end;
22396  +    quit;
22397  +%mend MakeCorrelation;
22398  +
22399  +
22400  +%macro MakeCorrelationDistance(indata=,
22401  +                               outdata=,
22402  +                               rsquare = N
22403  +                               );
22404  +    data corr_tmp;
22405  +        set &indata;
22406  +        if _N_ = 1 then do;
22407  +           output;
22408  +           stop;
22409  +         end;
22410  +    run;
22411  +    %if &outdata ne  %then %let  _outdata = &outdata;
22412  +    %else %let _outdata = &indata;
22413  +
22414  +    data &_outdata;
22415  +         set &indata;
22416  +
22417  +         %let dsid = %sysfunc(open(work.corr_tmp));
22418  +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
22419  +          %do i = 2 %to &nvar;
22420  +              %let _name = %sysfunc(varname(&dsid, &i));
22421  +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
22422  +              %else  %let _name_md = &_name;
22423  +              &_name = 1- &_name_md;
22424  +          %end;
22425  +      %let dsid= %sysfunc(close(&dsid));
22426  +      run;
22427  +      proc datasets lib = work nolist;
22428  +           delete corr_tmp;
22429  +      run;
22430  +      quit;
22431  +  %mend MakeCorrelationDistance;
22432  +
22433  +
22434  +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
22435  +                                   rsquare = N
22436  +                                   );
22437  +    data corr_tmp;
22438  +        set &indata;
22439  +    run;
22440  +    proc sql noprint;
22441  +           update &indata
22442  +           set
22443  +     %let dsid = %sysfunc(open(work.corr_tmp));
22444  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
22445  +          %do i = 4 %to &nvar;
22446  +          %let _name = %sysfunc(varname(&dsid, &i));
22447  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
22448  +            %else  %let _name_md = &_name;
22449  +            %if &i < &nvar %then %do;
22450  +               &_name = 1- &_name_md ,
22451  +            %end;
22452  +            %else %do;
22453  +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
22454  +            %end;
22455  +          %end;
22456  +      %let dsid= %sysfunc(close(&dsid));
22457  +
22458  +      select * from &indata;
22459  +      run;
22460  +     data &indata( drop = _NCL_);
22461  +           set &indata;
22462  +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
22463  +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
22464  +     run;
22465  +     data &indata(DROP = _NCL_);
22466  +           set &indata;
22467  +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
22468  +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
22469  +           rename _NAME_ = _VAR_;
22470  +     run;
22471  +     proc datasets lib = work nolist;
22472  +           delete corr_tmp;
22473  +     run;
22474  +     quit;
22475  + %mend UpdateOutStatCorrToDistance;
22476  +
22477  +
22478  +%macro HierClusWithCorr(indata= ,
22479  +                        ncluster=,
22480  +                        method = Ward,
22481  +                        outtree = _outtree,
22482  +                        idvar =_VAR_,
22483  +                        outdata=,
22484  +                        rescore = N,
22485  +                        newncluster=
22486  +                        );
22487  +      %global &newncluster;
22488  +      %if &rescore ne Y %then %do;
22489  +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
22490  +                   method=&method outtree=&outtree noprint;
22491  +           id &idvar;
22492  +      run;
22493  +      %end;
22494  +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
22495  +      run;
22496  +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
22497  +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
22498  +      run;
22499  +      data _outcontent;
22500  +          set _outcontent;
22501  +          if NAME in ('_TYPE_' , '_VAR_') then delete;
22502  +          index = 1;
22503  +          rename NAME = _NAME_;
22504  +      run;
22505  +      proc sort data=_outcontent;
22506  +          by _NAME_;
22507  +      run;
22508  +      proc sort data =&outdata;
22509  +           by _NAME_;
22510  +      run;
22511  +      data &outdata(drop=index);
22512  +          merge &outdata _outcontent;
22513  +          by _NAME_;
22514  +          if index = . then delete;
22515  +      run;
22516  +      /*-----------------------------------------------------------*/
22517  +      data &outdata;
22518  +           length CLUSNAME $16;
22519  +           set &outdata;
22520  +           if CLUSTER > &ncluster then delete;
22521  +           CLUSNAME='GC'||strip(CLUSTER);
22522  +           *label CLUSNAME = "Cluster Name";
22523  +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
22524  +           rename _NAME_ = VARIABLE ;
22525  +           *label _NAME_ = "Variable";
22526  +           *label CLUSTER = "Cluster";
22527  +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22528  +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22529  +      run;
22530  +      proc sort data=&outdata out=&outdata;
22531  +           by CLUSTER;
22532  +      run;
22533  +      proc means data =&outdata noprint;
22534  +           output out=_meanout;
22535  +      run;
22536  +      data _null_;
22537  +            set _meanout;
22538  +            if strip(_STAT_) eq 'MAX' then do;
22539  +            call symput("&newncluster", CLUSTER);
22540  +            stop;
22541  +            end;
22542  +      run;
22543  +
22544  +      proc datasets lib = work nolist;
22545  +           delete _outcontent _meanout;
22546  +      run;
22547  +      quit;
22548  +%mend  HierClusWithCorr;
22549  +
22550  +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
22551  +
22552  +     data _tmpindata;
22553  +          set &indata;
22554  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
22555  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22556  +          if _TYPE_ = 'STD' then _NAME_='STD';
22557  +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
22558  +          DROP _TYPE_ _NCL_;
22559  +     run;
22560  +
22561  +     filename _file_  "&fileRef";
22562  +
22563  +     data _null_;
22564  +        FILE _file_ MOD;
22565  +        put ' ';
22566  +        put "/*-------------------------------------------------*/";
22567  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
22568  +        put "/*-------------------------------------------------*/";
22569  +        put ' ';
22570  +        %let dsid = %sysfunc(open(work._tmpindata));
22571  +
22572  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22573  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22574  +        %let k = 1;
22575  +        %do %while(^%sysfunc(fetch(&dsid)));
22576  +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22577  +               %if &k > 2 %then %do;
22578  +                %let cn = %eval(&k-2);
22579  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
22580  +                %end;
22581  +                %let k = %eval(&k+1);
22582  +
22583  +        %end;
22584  +        %let rc = %sysfunc(rewind(&dsid));
22585  +
22586  +        %do j= 2 %to &nvar;
22587  +            %let _varname = %sysfunc(varname(&dsid, &j));
22588  +            %do %while(^%sysfunc(fetch(&dsid)));
22589  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22590  +                %if &_name = MEAN %then
22591  +                %let _mean = %sysfunc(getvarn(&dsid, &j));
22592  +                %else %if &_name = STD %then
22593  +                %let _std = %sysfunc(getvarn(&dsid, &j));
22594  +                %else %do;
22595  +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
22596  +                      %let abscoeff = %sysfunc(abs(&coeff));
22597  +                          %if &abscoeff >  0 %then %do;
22598  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22599  +                           %end;
22600  +                 %end;
22601  +             %end;
22602  +             %let rc = %sysfunc(rewind(&dsid));
22603  +         %end;
22604  +
22605  +        %let dsid= %sysfunc(close(&dsid));
22606  +
22607  +     run;
22608  +
22609  +     filename _file_;
22610  +     proc datasets lib = work nolist;
22611  +           delete _tmpindata;
22612  +     run;
22613  +     quit;
22614  +%mend CreateScoreCode2;
22615  +
22616  +
22617  +%macro MakeDeltaCode2(groupds=,deltacodefile=);
22618  +
22619  +     /*--- Build Code to Modify Metadata ---*/
22620  +     filename X "&deltacodefile";
22621  +     data _null_;
22622  +        FILE X;
22623  +        set &groupds end=eof;
22624  +        if _N_=1 then do;
22625  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
22626  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
22627  +           %end;
22628  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
22629  +           put "if upcase(strip(NAME)) in (";
22630  +        end;
22631  +        if Strip(upcase(Selected)) eq 'YES' then do;
22632  +           string = '"'!!trim(left(VARIABLE))!!'"';
22633  +           put string;
22634  +        end;
22635  +        if eof then do;
22636  +           put ') then ROLE="INPUT";';
22637  +           put 'else ROLE="REJECTED";';
22638  +           put 'end;';
22639  +
22640  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
22641  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
22642  +           %end;
22643  +        end;
22644  +     run;
22645  +     quit;
22646  +
22647  +     filename X;
22648  +     quit;
22649  +%mend MakeDeltaCode2;
22650  +
22651  +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
22652  +  %global &ngc;
22653  +  data _null_;
22654  +  %if &indata ne %then %do;
22655  +      %let dsid = %sysfunc(open(&indata));
22656  +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
22657  +      %let dsid = %sysfunc(close(&dsid));
22658  +  %end;
22659  +  %else %do;
22660  +       %let nvar = %eval(&ninput+&ndummy); ;
22661  +  %end;
22662  +  %let numgc = %eval(&nvar/&div+2);
22663  +  %let &ngc = &numgc;
22664  +   run;
22665  +  quit;
22666  +%mend getInitialGClusterNumber;
22667  +
22668  +
22669  +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
22670  +data &outlink(drop = Selected);
22671  +     set &indata;
22672  +     LINKID = _N_;
22673  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
22674  +run;
22675  +data &outnode(keep=NODEID TYPE LABEL);
22676  +    set &indata;
22677  +    length TYPE $16;
22678  +    rename VARIABLE = NODEID;
22679  +    *label  CLUSNAME="Node ID";
22680  +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22681  +    TYPE = "VARIABLE";
22682  +    *label TYPE = "Node Type";
22683  +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22684  +    run;
22685  +data _tmp(keep=NODEID TYPE LABEL);
22686  +    set &indata;
22687  +    length TYPE $16;
22688  +    rename CLUSNAME = NODEID;
22689  +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22690  +    TYPE = "GCLUSTER";
22691  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22692  +    run;
22693  +proc sort data=_tmp;
22694  +    by NODEID;
22695  +run;
22696  +data _tmp;
22697  +    set _tmp; by NODEID;
22698  +    if first.NODEID then output;
22699  +run;
22700  +proc sort data=&outnode;
22701  +    by NODEID;
22702  +run;
22703  +data  &outnode;
22704  +    set _tmp &outnode;
22705  +run;
22706  +proc datasets lib = work nolist;
22707  +     delete _tmp;
22708  +run;
22709  +quit;
22710  +%mend MakeGobalConstellData;
22711  +
22712  +/* Make contellation plot data among GCLUSTERS */
22713  +
22714  +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
22715  +
22716  +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
22717  +     set &indata;
22718  +     LINKID = _N_;
22719  +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
22720  +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
22721  +     end;
22722  +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
22723  +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
22724  +     end;
22725  +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
22726  +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
22727  +    end;
22728  +run;
22729  +
22730  +data _tmp_outrsquare;
22731  +        set &inoutrsq;
22732  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22733  +run;
22734  +
22735  +proc freq data =_tmp_outrsquare noprint;
22736  +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
22737  +run;
22738  +
22739  +data &outnode(keep=_NAME_ TYPE LABEL);
22740  +    set &outlink;
22741  +    length TYPE $16;
22742  +    length LABEL $100;
22743  +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
22744  +
22745  +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22746  +    TYPE = "GCLUSTER";
22747  +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22748  +    end;
22749  +    else do;
22750  +    TYPE= "ROOT";
22751  +    LABEL= _NAME_;
22752  +    end;
22753  +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22754  +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
22755  +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22756  +    run;
22757  +
22758  +proc sort data=&outnode;
22759  +     by _NAME_;
22760  +proc sort data=_tmp_GCLUSFREQ;
22761  +     by _NAME_;
22762  +run;
22763  +
22764  +data  &outnode;
22765  +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
22766  +     if COUNT=. then COUNT=1;
22767  +run;
22768  +
22769  +proc datasets lib = work nolist;
22770  +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
22771  +run;
22772  +
22773  +quit;
22774  +%Mend MakeGClusterConstData;
22775  +
22776  +
22777  +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
22778  +
22779  +    data _gscoretmpds;
22780  +          set &indata;
22781  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
22782  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22783  +          if _TYPE_ = 'STD' then _NAME_='STD';
22784  +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
22785  +          DROP _TYPE_ _NCL_;
22786  +     run;
22787  +
22788  +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
22789  +        GCluster Component &globalclusid ------ */
22790  +
22791  +    filename _file_  "&fileref";
22792  +
22793  +    data _null_;
22794  +        %if &globalclusid eq 1 %then %do;
22795  +          FILE _file_;
22796  +        %end;
22797  +        %else %do;
22798  +          FILE _file_ MOD;
22799  +        %end;
22800  +
22801  +        %let dsid = %sysfunc(open(work._gscoretmpds));
22802  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22803  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22804  +
22805  +        %let k = 1;
22806  +        %do %while(^%sysfunc(fetch(&dsid)));
22807  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22808  +                %if &k > 2 %then %do;
22809  +                put "&_name = 0 ; ";
22810  +                %end;
22811  +                %let k = %eval(&k+1);
22812  +        %end;
22813  +
22814  +        %let rc = %sysfunc(rewind(&dsid));
22815  +        %do i= 2 %to &nvar;
22816  +            %let _varname =  %sysfunc(varname(&dsid, &i));
22817  +            %do %while(^%sysfunc(fetch(&dsid)));
22818  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22819  +                %if &_name = MEAN %then
22820  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
22821  +                %else %if &_name = STD %then
22822  +                %let _std = %sysfunc(getvarn(&dsid, &i));
22823  +                %else %do;
22824  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
22825  +                      %let abscoeff = %sysfunc(abs(&coeff));
22826  +                          %if &abscoeff >  0 %then %do;
22827  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22828  +                           %end;
22829  +                 %end;
22830  +             %end;
22831  +             %let rc = %sysfunc(rewind(&dsid));
22832  +
22833  +         %end;
22834  +
22835  +        %let dsid= %sysfunc(close(&dsid));
22836  +       run;
22837  +
22838  +
22839  +       proc datasets lib=work nolist;
22840  +            delete _gscoretmpds;
22841  +       run;
22842  +      quit;
22843  +
22844  +%mend CreateGClusterScoreCode;
22845  +
22846  +
22847  +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
22848  +
22849  +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
22850  +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
22851  +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
22852  +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
22853  +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
22854  +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
22855  +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
22856  +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
22857  +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
22858  +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
22859  +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
22860  +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
22861  +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
22862  +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
22863  +
22864  +   filename gsfile "&gscorecode";
22865  +
22866  +   data &EM_USER_GSCORE;
22867  +             set &indata;
22868  +             %include  gsfile;
22869  +        keep
22870  +        %do i=1 %to &ngcluster;
22871  +         %let gcvarname = GC&i;
22872  +         &gcvarname
22873  +        %end;
22874  +     ;
22875  +   run;
22876  +
22877  +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
22878  +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
22879  +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
22880  +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
22881  +    noprint  ;
22882  +     var
22883  +       %do i=1 %to &ngcluster;
22884  +         %let gcvarname = GC&i;
22885  +         &gcvarname
22886  +        %end;
22887  +   ;
22888  +   run;
22889  +
22890  +
22891  +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
22892  +   data &EM_USER_GSCORECORRPLOT ;
22893  +        set &EM_USER_GSCORECORRPLOT;
22894  +        rename _X_ = X;
22895  +        rename _Y_ = Y;
22896  +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22897  +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22898  +   run;
22899  +
22900  +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
22901  +
22902  +   data &EM_USER_GSCORETREE;
22903  +        length _NAME_ $32;
22904  +        length _LABEL_ $100;
22905  +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
22906  +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22907  +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22908  +        end;else do;
22909  +         _LABEL_ = _NAME_;
22910  +        end;
22911  +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
22912  +
22913  +   run;
22914  +
22915  +   quit;
22916  +
22917  +%mend MakeGClusterCorrelation;
22918  +
22919  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
22920  +%macro report;
22921  +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
22922  +
22923  +    data _null_;
22924  +         set &EM_USER_VARCLUSMETA;
22925  +         if _N_=1 then
22926  +         call symput('_trainnum', TrainNum);
22927  +    run;
22928  +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
22929  +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
22930  +           %include temp;
22931  +           filename temp;
22932  +           %report1;
22933  +       %end;
22934  +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
22935  +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
22936  +           %include temp;
22937  +           filename temp;
22938  +           %report2;
22939  +    %end;
22940  +
22941  +   /* End of all runs, change the flag of newtrain to N */
22942  +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
22943  +    data &EM_USER_VARCLUSMETA;
22944  +         set &EM_USER_VARCLUSMETA;
22945  +         NewTrain = "N";
22946  +    run;
22947  +    quit;
22948  +%mend report;
22949  +
22950  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      107045:166   
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
22951  +%macro report1;
22953  +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
22954  +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
22955  +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
22957  +   data &EM_USER_OUTVARSEL;
22958  +        set &EM_USER_OUTRSQUARE;
22959  +        if upcase(strip(SELECTED)) = 'YES' then output;
22960  +   run;
22962  +   data _tmp_outrsquare;
22963  +        set &EM_USER_OUTRSQUARE;
22964  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22965  +   run;
22967  +   proc freq data =_tmp_outrsquare noprint;
22968  +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
22969  +   run;
22971  +   proc datasets lib = work nolist;
22972  +     delete _tmp_outrsquare;
22973  +   run;
22975  +   data &EM_USER_CLUSFREQ;
22976  +       set &EM_USER_CLUSFREQ;
22977  +       label
22978  +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
22979  +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
22980  +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
22981  +       ;
22982  +   run;
22984  +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
22985  +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
22986  +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
22988  +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
22989  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
22990  +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
22991  +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
22992  +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
22993  +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
22994  +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
22995  +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
22997  +   /*
22998  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
22999  +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
23000  +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
23003  +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTVARSEL has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
      


NOTE: There were 131 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 96 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 96 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_CLUSFREQ has 35 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.13 seconds
      cpu time            0.03 seconds
      


NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS3.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS3.VARCLUS_CLUSFREQ has 35 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.03 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      


NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      


NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      


NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      


NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS3.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.00 seconds
      

23006   *------------------------------------------------------------*;
23007   * End REPORT: VarClus;
23008   *------------------------------------------------------------*;
23009   

23010   /* Reset EM Options */
23011   options formchar="|----|+|---+=|-/\<>*";
23012   options nocenter ls=256 ps=10000;
23013   goptions reset=all device=GIF NODISPLAY;

23014   proc sort data=WORK.EM_USER_REPORT;
23015   by ID VIEW;
23016   run;

NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

