*------------------------------------------------------------*
User:                skokse_uncc
Date:                April 25, 2020
Time:                11:21:56
Site:                70117250
Platform:            X64_DSRV16
Maintenance Release: 9.04.01M5P091317
EM Version:          14.3
* 
*------------------------------------------------------------*
* Training Log
Date:                April 25, 2020
Time:                11:21:41
*------------------------------------------------------------*
15208  proc freq data=EMWS4.Tree2_VariableSet noprint;
15209  table ROLE*LEVEL/out=WORK.Tree2META;
15210  run;
 
NOTE: There were 14 observations read from the data set EMWS4.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
15211  proc print data=WORK.Tree2META label noobs;
15212  var ROLE LEVEL COUNT;
15213  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15214  title9 ' ';
15215  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15216  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15217  title10;
 
15218  %let EMNORLEN = %DMNORLEN;
EMWS4.Part_TRAIN EMWS4.Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15247  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15248  length ORDER $20;
15249  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15250     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15251  set EMWS4.IDS_TARGETBUY_DM( where=(_TYPE_="TARGET"));
15252  NumLevels=2;
15253  select(upcase(ORDER));
15254  when('DESC') ORDER = 'Descending';
15255  when('ASC') ORDER = 'Ascending';
15256  when('FMTDESC') ORDER = 'Formatted Descending';
15257  when('FMTASC') ORDER = 'Formatted Ascending';
15258  otherwise ORDER = 'Descending';
15259  end;
15260  output;
15261  run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
15262  title9 ' ';
15263  proc print data=WORK.Tree2_EVENT noobs label;
15264  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15265  title9 ' ';
15266  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15267  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
15268  title10;
 
"No decisions defined for target "TargetBuy"."
15269  proc print data = EMWS4.Ids_TargetBuy_DM noobs label;
15270  var _type_ variable label;
15271  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15272  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15273  title9 ' ';
15274  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15275  run;
 
NOTE: There were 7 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
15276  title10;
 
15277  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15785  *------------------------------------------------------------*;
15786  * Tree2: Generation of macros and macro variables;
15787  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15788  *------------------------------------------------------------*;
 
15789  %let EMEXCEPTIONSTRING=;
15790  *------------------------------------------------------------*;
15791  * TRAIN: Tree2;
15792  *------------------------------------------------------------*;
15793  %let EM_ACTION = TRAIN;
15794  %let syscc = 0;
15795  %macro main;
15796
15797    %if %upcase(&EM_ACTION) = CREATE %then %do;
15798      filename temp catalog 'sashelp.emmodl.tree_create.source';
15799      %include temp;
15800      filename temp;
15801
15802      %em_tree_create;
15803    %end;
15804
15805     %else
15806     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15807
15808         filename temp catalog 'sashelp.emmodl.tree_train.source';
15809         %include temp;
15810         filename temp;
15811         %em_tree_train;
15812     %end;
15813
15814    %else
15815    %if %upcase(&EM_ACTION) = SCORE %then %do;
15816      filename temp catalog 'sashelp.emmodl.tree_score.source';
15817      %include temp;
15818      filename temp;
15819
15820      %em_tree_score;
15821
15822    %end;
15823
15824    %else
15825    %if %upcase(&EM_ACTION) = REPORT %then %do;
15826
15827         filename temp catalog 'sashelp.emmodl.tree_report.source';
15828         %include temp;
15829         filename temp;
15830
15831         %em_tree_report;
15832     %end;
15833
15834    %else
15835    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15836
15837         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15838         %include temp;
15839         filename temp;
15840         %EM_TREE_OPENTREEVIEWER;
15841
15842     %end;
15843
15844    %else
15845    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15846
15847         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15848         %include temp;
15849         filename temp;
15850         %EM_TREE_CLOSETREEVIEWER;
15851
15852     %end;
15853
15854
15855     %doendm:
15856  %mend main;
15857
15858  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15860 +%macro em_tree_train;
15862 +   %if &EM_IMPORT_DATA eq %then %do;
15863 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15864 +       %put &em_codebar;
15865 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15866 +       %put &errormsg;
15867 +       %put &em_codebar;
15868 +       %goto doendm;
15869 +   %end;
15870 +   %else
15871 +       %let EMEXCEPTIONSTRING =;
15873 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15874 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15875 +        %put &em_codebar;
15876 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15877 +        %put &errormsg;
15878 +        %put &em_codebar;
15879 +        %goto doendm;
15880 +   %end;
15882 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15883 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15884 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15885 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15886 +        %put &em_codebar;
15887 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15888 +        %put &errormsg;
15889 +        %put &em_codebar;
15890 +        %goto doendm;
15891 +   %end;
15893 +   /* Initialize property macro variables */
15894 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15895 +   %include temp;
15896 +   filename temp;
15898 +   %EM_SetProperties;
15900 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15901 +   %EM_GETNAME(key=EMTREE, type=DATA);
15902 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15903 +     /* if import eq Y and no importtable defined, throw an exception */
15904 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15905 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15906 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15907 +         %put &em_codebar;
15908 +         %put &errmsg;
15909 +         %put &em_codebar;
15910 +         %goto doendm;
15911 +      %end;
15912 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15913 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15914 +         %put &em_codebar;
15915 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15916 +         %put &errormsg;
15917 +         %put &em_codebar;
15918 +         %goto doendm;
15919 +      %end;
15920 +      %else %do;
15921 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15922 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15923 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15924 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15925 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15926 +         %let dsid = %sysfunc(close(&dsid));
15927 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15928 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15929 +            %put &em_codebar;
15930 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15931 +            %put &errormsg;
15932 +            %put &em_codebar;
15933 +            %goto doendm;
15934 +         %end;
15935 +      %end;
15936 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15937 +         proc delete data=&EM_USER_EMTREE;
15938 +         run;
15939 +      %end;
15940 +   %end;
15941 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15942 +      proc delete data=&EM_USER_EMTREE;
15943 +      run;
15944 +   %end;
15946 +   /* load tree macros */
15947 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15948 +   %include temp;
15949 +   filename temp;
15951 +   /* data sets */
15952 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15953 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15954 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15956 +   /* files */
15957 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15959 +   /* check actual num of target levels */
15960 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15961 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15962 +                              nLevel=_nTargetLevel );
15963 +      %if &_nTargetLevel  > 2 %then %do;
15964 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15965 +        %put &em_codebar;
15966 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15967 +        %put &errormsg;
15968 +        %put &em_codebar;
15969 +        %goto doendm;
15970 +      %end;
15971 +   %end;
15973 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15974 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15975 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15976 +        %let costflag=0;
15977 +        data _null_;
15978 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15979 +          if eof then call symput("costflag", _N_);
15980 +        run;
15981 +        %if &costflag gt 0 %then %do;
15982 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15983 +          %put &em_codebar;
15984 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15985 +          %put &errormsg;
15986 +          %put &em_codebar;
15987 +          %goto doendm;
15988 +       %end;
15989 +     %end;
15990 +   %end;
15992 +   /* determine if multiple targets will be processed */
15993 +   %let em_tree_multipleTargets=N;
15994 +   %let em_tree_numTarget = 1;
15995 +   %let em_tree_targetVars=;
15997 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15998 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15999 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16000 +         %let em_tree_multipleTargets=N;
16001 +      %end;
16002 +      %else %do;
16003 +         /* create macro array of targets  */
16004 +         data _null_;
16005 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16006 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16007 +           if eof then
16008 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16009 +        run;
16011 +        %if &em_tree_numTarget gt 1 %then %do;
16012 +           %let em_tree_multipleTargets=Y;
16013 +        %end;
16014 +      %end;
16015 +   %end;
16017 +   /* create view of only necessary variable for performance reasons */
16018 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16019 +   data &tempData / view=&tempData;
16020 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16021 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16022 +       %EM_TARGET
16023 +     %end;
16024 +     %else %do;
16025 +       %if &em_tree_numTarget ne 0 %then %do;
16026 +         %do i=1 %to &em_tree_numTarget;
16027 +            &&em_tree_targetVars&i
16028 +         %end;
16029 +       %end;
16030 +     %end;
16031 +     );
16032 +   run;
16034 +   /* run Tree procedure */
16035 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16037 +   /* Check return code and throw exception if error is detected */
16038 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16039 +   %if &syserr %then %do;
16040 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16041 +     %goto doendm;
16042 +   %end;
16044 +   /* add decision score code if multiple targets are processed */
16045 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16046 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16047 +   %end;
16049 +   /* create outfit dataset if multiple score statements have been executed */
16050 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16052 +   /* create English Rules */
16053 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16054 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16055 +       %em_tree_makeEnglishRules;
16057 +       /* English Rules */
16058 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16060 +     %end;
16061 +   filename x;
16063 +   %doendm:
16064 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16065 +%macro EM_SetProperties;
16067 +   /* train properties */
16068 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16069 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16070 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16071 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16072 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16073 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16074 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16075 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16076 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16077 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16078 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16079 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16080 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16081 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16082 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16083 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16084 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16085 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16086 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16087 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16088 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16089 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16090 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16091 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16092 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16093 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16094 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16095 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16096 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16097 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16098 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16099 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16100 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16101 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16102 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16103 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16104 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16105 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16106 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16107 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16108 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16110 +   /* properties for interactive sample */
16111 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16112 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16113 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16114 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16116 +   /* report properties */
16117 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16118 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16119 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16120 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16131 +   /* score properties */
16132 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16135 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16137 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16138 +  %global &nLevel;
16139 +  proc dmdb batch data=&indata
16140 +    classout=_tmp_dmdbout;
16141 +    class &target;
16142 +  run;
16143 +  data _tmp_dmdbout;
16144 +    set _tmp_dmdbout;
16145 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16146 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16147 +  run;
16148 +  data _null_;
16149 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16150 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16151 +    %let dsid = %sysfunc(close(&dsid));
16152 +     call symput("&nLevel", put(&_obs, Best12.));
16153 +  run;
16155 +  proc datasets lib=work nolist;
16156 +     delete _tmp_dmdbout;
16157 +  run;
16158 +  quit;
16159 +%Mend EM_CheckBinaryTargetLevel;
16162 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16164 +  /* determine the number of obs in training data */
16165 +  proc sql;
16166 +    reset noprint;
16167 +    select count(*) into :em_nobs from &indata;
16168 +  quit;
16170 +  /* determine the number of input variables */
16171 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16172 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16174 +  /* retrieve targetEvent from decmeta */
16175 +  %let targetEvent=;
16176 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16177 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16178 +      data _null_;
16179 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16180 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16181 +      run;
16182 +    %end;
16183 +  %end;
16185 +  /* create targetTable if multipleTar eq Y */
16186 +  data temptarget;
16187 +    set &EM_DATA_VARIABLESET;
16188 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16189 +  run;
16191 + /* data sets */
16192 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16193 + %EM_GETNAME(key=EMTREE,        type=DATA);
16194 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16195 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16196 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16197 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16198 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16199 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16200 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16201 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16203 + /* files */
16204 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16205 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16207 + /* turn on pmml if requested */
16208 + %let nnpmml=0;
16209 + %if %symexist(EM_PMML) %then %do;
16210 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16211 +       %let nnpmml=1;
16213 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16214 +   %end;
16215 +%end;
16217 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16219 +%if &nnpmml or &numClassTarget %then %do;
16221 +    /* create dmdb needed for pmml generation */
16222 +    %let tree_maxlevel = 512;
16223 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16224 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16225 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16226 +      %end;
16227 +    %end;
16228 +    %if &tree_maxlevel gt 0 %then %do;
16229 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16230 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16231 +    %end;
16233 +    %let targetOrderString =;
16234 +    %let targetString = ;
16235 +    data _null_;
16236 +       length orderString nameString $10000;
16237 +       retain orderString nameString;
16238 +       set &em_data_variableset end=eof;
16239 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16240 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16241 +       %end;
16242 +       %else %do;
16243 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16244 +       %end;          select(order);
16245 +         when('')        order ='DESC';
16246 +         when('FMTASC')  order='ASCFMT';
16247 +         when('FMTDESC') order='DESFMT';
16248 +         otherwise;
16249 +       end;
16250 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16251 +       nameString = trim(nameString)!!' '!!trim(NAME);
16253 +       if eof then do;
16254 +          call symput('targetOrderString', trim(orderString));
16255 +          call symput('targetString', trim(nameString));
16256 +       end;
16257 +    run;
16259 +    %let arborkluge= "work._treeDMDB";
16261 +    proc dmdb batch data=&indata
16262 +    %if &nnpmml %then %do;
16263 +        PMML
16264 +    %end;
16265 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16267 +      %if &nnpmml %then %do;
16268 +           %if "%EM_ID" ne "" %then %do;
16269 +             id %EM_ID;
16270 +           %end;
16271 +           %if &EM_NUM_CLASS gt 0 %then %do;
16272 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16273 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16274 +                  &targetOrderString;
16275 +           %end;
16276 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16277 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16278 +           %end;
16279 +           target &targetString %EM_INTERVAL_TARGET;
16280 +           %if "%EM_FREQ" ne "" %then %do;
16281 +             freq %EM_FREQ;
16282 +           %end;
16283 +      %end;
16284 +      %else %do;
16285 +         class  &targetOrderString;
16286 +         target &targetString %EM_INTERVAL_TARGET;
16287 +      %end;
16288 +    run;
16289 +    quit;
16291 +    proc datasets lib=work nolist;
16292 +       delete classout varout;
16293 +    run;
16294 +    quit;
16296 + %end;
16299 + /* run Arbor procedure */
16300 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16301 +  proc arbor data=&INDATA
16303 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16304 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16305 +  %end;
16307 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16308 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16309 +  %end;
16311 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16312 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16313 +  %end;
16315 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16316 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16317 +  %end;
16319 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16320 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16321 +  %end;
16323 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16324 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16325 +  %end;
16326 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16327 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16328 +  %end;
16329 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16330 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16331 +  %end;
16333 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16334 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16335 +      alpha = &EM_PROPERTY_SIGLEVEL
16336 +    %end;
16337 +  %end;
16339 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16340 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16341 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16342 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16343 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16345 +        padjust =
16346 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16347 +          &chaid
16348 +        %end;
16349 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16350 +          DEPTH
16351 +        %end;
16352 +      %end;
16353 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16354 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16355 +         pvars = &num_inputs
16356 +      %end;
16357 +    %end;
16358 +  %end;
16359 +  %else %do;
16360 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16361 +         padjust = NONE
16362 +      %end;
16363 +  %end;
16365 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16366 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16367 +    Maxrules = &num_nrules
16368 +  %end;
16370 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16371 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16372 +    Maxsurrs = &num_nsurrs
16373 +  %end;
16375 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16376 +     Missing=&EM_PROPERTY_MISSINGVALUE
16377 +  %end;
16379 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16380 +     USEVARONCE
16381 +  %end;
16383 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16384 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16385 +  %end;
16388 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16389 +    event = "&targetEvent"
16390 +  %end;
16392 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16393 +     DECSEARCH
16394 +  %end;
16396 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16397 +     PRIORSSEARCH
16398 +  %end;
16400 +  %if &arbor_1 ne %then %do;
16401 +    &arbor_1
16402 +  %end;
16404 +  %if &em_arbor ne %then %do;
16405 +     &em_arbor
16406 +  %end;
16407 +  ;
16408 + %end;
16409 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16410 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16411 +       Performance &EM_PROPERTY_PERFORMANCE
16412 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16413 +         nodesize=&EM_PROPERTY_NODESAMPLE
16414 +       %end;
16415 +       ;
16416 +       interact;
16417 + %end;
16418 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16419 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16420 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16421 +    %put &em_codebar;
16422 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16423 +    %put &errormsg;
16424 +    %put &em_codebar;
16425 +    %goto doendm;
16426 +   %end;
16427 +   %else %do;
16428 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16429 +       Performance &EM_PROPERTY_PERFORMANCE
16430 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16431 +         nodesize=&EM_PROPERTY_NODESAMPLE
16432 +       %end;
16433 +       ;
16434 +       interact;
16435 +   %end;
16436 + %end;
16438 + %else %do;
16439 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16440 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16441 +    %put &em_codebar;
16442 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16443 +    %put &errormsg;
16444 +    %put &em_codebar;
16445 +    %goto doendm;
16446 +   %end;
16447 +   %else %do;
16448 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16449 +       Performance &EM_PROPERTY_PERFORMANCE
16450 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16451 +         nodesize=&EM_PROPERTY_NODESAMPLE
16452 +       %end;
16453 +       ;
16454 +        interact;
16455 +   %end;
16456 + %end;
16458 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16459 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16460 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16461 +    %end;
16463 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16464 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16465 +    %end;
16467 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16468 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16469 +    %end;
16471 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16472 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16473 +    %end;
16475 +    %if "%EM_FREQ" ne "" %then %do;
16476 +       freq %EM_FREQ;
16477 +    %end;
16479 +    %if "&multipleTar" eq "Y" %then %do;
16480 +       /* cycle through all target vars in variableset */
16481 +       %let tdsid = %sysfunc(open(temptarget));
16482 +       %if &tdsid %then %do;
16483 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16484 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16485 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16486 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16487 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16488 +             target &var / level = &lvl
16489 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16490 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16491 +             %end;
16492 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16493 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16494 +             %end;
16495 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16496 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16497 +             %end;
16498 +          %end;
16499 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16500 +       %end;
16501 +       useTarget variable = %EM_TARGET;
16502 +    %end;
16503 +    %else %do;
16504 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16505 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16506 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16507 +      %end;
16508 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16509 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16510 +      %end;
16511 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16512 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16513 +      %end;
16514 +    %end;
16516 +    %if "&multipleTar" eq "N" %then %do;
16517 +      &EM_DEC_STATEMENT;
16518 +    %end;
16520 +    Performance &EM_PROPERTY_PERFORMANCE
16521 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16522 +      nodesize=&EM_PROPERTY_NODESAMPLE
16523 +    %end;
16524 +    ;
16526 +    %if "&intFlag" eq "Y" %then %do;
16527 +       INTERACT Largest;
16528 +       Train maxnewdepth=0;
16529 +    %end;
16531 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16532 +         Assess
16533 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16534 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16535 +              %put &em_codebar;
16536 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16537 +              %put &errormsg;
16538 +              %put &em_codebar;
16539 +            %end;
16540 +            %else %do;
16541 +               Validata=&EM_IMPORT_VALIDATE
16542 +            %end;
16543 +         %end;
16544 +         %else %do;
16545 +           NoValidata
16546 +         %end;
16547 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16548 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16549 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16550 +               %if &dsid %then %do;
16551 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16552 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16553 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16554 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16555 +                   %else %do;
16556 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16557 +                      %else %let measure= MISC;
16558 +                   %end;
16559 +                 %end;
16560 +               %end;
16561 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16562 +            %end;
16563 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16564 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16565 +                 %let measure=ASE;
16566 +              %end;
16567 +              %else %do;
16568 +                 %let measure=MISC;
16569 +              %end;
16570 +            %end;
16571 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16572 +              %let measure=ASE;
16573 +            %end;
16574 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16575 +               %let measure = LIFT;
16576 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16577 +               %if &dsid %then %do;
16578 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16579 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16580 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16581 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16582 +                 %end;
16583 +               %end;
16584 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16585 +            %end;
16586 +            measure=&measure
16587 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16588 +               event = "&targetEvent"
16589 +            %end;
16590 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16591 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16592 +            %end;
16593 +         %end;
16594 +         %if "&multipleTar" eq "N" %then %do;
16595 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16596 +               CV
16597 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16598 +                 CVNITer = &EM_PROPERTY_CVNITER
16599 +               %end;
16600 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16601 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16602 +               %end;
16603 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16604 +                 CVSeed = &EM_PROPERTY_CVSEED
16605 +               %end;
16606 +            %end;
16607 +         %end;
16608 +       %end;
16609 +      ;
16611 +      %if "&intFlag" ne "Y" %then %do;
16612 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16613 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16614 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16615 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16617 +          SUBTREE &subtree
16618 +          %if "&subtree" eq "NLEAVES" %then %do;
16619 +            =&EM_PROPERTY_NSUBTREE
16620 +          %end;
16621 +          ;
16622 +        %end;
16624 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16625 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16626 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16627 +          %end;
16628 +       %end;
16629 +      %end;
16630 + %end;
16633 + MakeMacro nleaves = nleaves;
16634 + save
16635 + %if "&EM_USER_EMTREE" ne "" %then %do;
16636 +   MODEL=&EM_USER_EMTREE
16637 + %end;
16638 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16639 +   SEQUENCE=&EM_USER_OUTSEQ
16640 + %end;
16641 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16642 +   IMPORTANCE=&EM_USER_OUTIMPORT
16643 + %end;
16644 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16645 +   NODESTAT=&EM_USER_OUTNODES
16646 + %end;
16647 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16648 +   SUMMARY=&EM_USER_OUTSUMMARY
16649 + %end;
16650 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16651 +   STATSBYNODE=&EM_USER_OUTSTATS
16652 + %end;
16653 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16654 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16655 + %end;
16656 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16657 +   Pathlistnonmissing=&EM_USER_OUTPATH
16658 + %end;
16659 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16660 +   RULES = &EM_USER_OUTRULES
16661 + %end;
16662 + ;
16664 + %if "&intFlag" ne "Y" %then %do;
16666 +   %let lookupString = ;
16667 +   %if ^%symexist(EM_OPTION) %then
16668 +      %let EM_OPTION=;
16670 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16671 +      %let lookupString = LOOKUP=SELECT;
16672 +   %end;
16674 +   %let codetext=;
16675 +   %let norescodetxt=;
16677 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16678 +     %let codetext=&codetext DUMMY;
16679 +     %let norescodetxt=&norescodetxt DUMMY;
16680 +   %end;
16681 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16682 +     %let codetext=&codetext NOLEAFID;
16683 +     %let norescodetxt=&norescodetxt NOLEAFID;
16684 +   %end;
16685 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16686 +     %let norescodetxt=&norescodetxt NOPRED;
16687 +   %end;
16689 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16690 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16692 +   %if &nnpmml %then %do;
16693 +     code pmml;
16694 +   %end;
16696 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16697 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16698 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16699 +   %end;
16700 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16701 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16702 +   %end;
16703 + %end;
16705 + run;
16706 + quit;
16708 + /*%em_checkerror(); */
16709 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16710 +   /* Delete DMDB catalog */
16711 +   proc datasets lib=work nolist;
16712 +       delete _treeDMDB / mt=cat;
16713 +  run;
16714 +  %end;
16716 + %if &nnpmml %then %do;
16717 +    ods pmml close;
16718 + %end;
16720 +  %doendm:
16722 +%mend em_tree_runTreeProcedure;
16724 +%macro em_tree_createFitStats( multipleTar= );
16727 +  /* create targetTable is multipleTar eq Y */
16728 +  data temptarget;
16729 +    set &EM_DATA_VARIABLESET;
16730 +    where ROLE="TARGET";
16731 +  run;
16733 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16734 +   data &EM_USER_EMOUTFIT;
16735 +     length target $32;
16736 +     merge work.fit_train
16737 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16738 +       work.fit_valid
16739 +     %end;
16740 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16741 +       work.fit_test
16742 +     %end;
16743 +     ;
16744 +     %if "&multipleTar" eq "N" %then %do;
16745 +       target="%EM_TARGET";
16746 +     %end;
16747 +     %else %do;
16748 +       target = _TARGET_;
16749 +     %end;
16750 +     drop _NW_ _SUMW_
16751 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16752 +        _VSUMW_
16753 +     %end;
16754 +     ;
16755 +   run;
16757 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16758 +     proc datasets library=work nolist;
16759 +       delete fit_valid;
16760 +     run;
16761 +   %end;
16762 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16763 +     proc datasets library=work nolist;
16764 +       delete fit_test;
16765 +     run;
16766 +   %end;
16768 +%mend em_tree_createFitStats;
16771 +%macro em_tree_makeEnglishRules;
16773 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16774 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16776 +  /* verify that necessary tables exist and if not, skip processing */
16777 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16778 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16779 +    %goto doendm;
16780 +  %end;
16781 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16782 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16783 +    %goto doendm;
16784 +  %end;
16786 +  /* determine length of variable in outpath dataset */
16787 +  %let vlength= ;
16788 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16789 +  %if &dsid ne %then %do;
16790 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16791 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16792 +  %end;
16793 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16795 +  data tempoutpath;
16796 +    length varname $&vlength;
16797 +    retain varname;
16798 +    set &EM_USER_OUTPATH;
16800 +    if ^missing(variable) then varname=variable;
16801 +    else if ^missing(var_name) then varname=var_name;
16802 +    output;
16803 +  run;
16805 +  /* create an array of generated predicted variable names */
16806 +  %let tree_pred_vars = ;
16807 +  %let tree_pred_label = ;
16808 +  %let numpred= 0;
16809 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16811 +    data _null_;
16812 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16813 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16814 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16815 +     if eof then
16816 +       call symput('numpred', strip(put(_N_, BEST.)));
16817 +    run;
16818 +  %end;
16820 +  /* determine if NPRIORS exists in outnodes  */
16821 +  %local nprior_flag;
16822 +  data _null_;
16823 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16824 +    if eof then do;
16825 +      call symput('nprior_flag', strip(put(npriors, best.)));
16826 +    end;
16827 +  run;
16829 +  proc sort data=tempoutpath; by node; run;
16830 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16832 +  data tempoutpath;
16833 +    merge tempoutpath(in=_a) outnodes(keep= node
16834 +    %if "&nprior_flag" ne "." %then %do;
16835 +      NPRIORS
16836 +    %end;
16837 +    %else %do;
16838 +      N
16839 +    %end;
16840 +    %if &numpred gt 0 %then %do;
16841 +      %do i=1 %to &numpred;
16842 +        &&tree_pred_vars&i
16843 +      %end;
16844 +    %end;
16845 +    );
16846 +    by node;
16847 +    if _a;
16848 +  run;
16850 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16852 +  data _null_;
16853 +    file x;
16854 +    set tempoutpath;
16855 +    by node descending varname;
16856 +    retain origvar oldnode string;
16857 +    length origvar $32 oldnode 8 string $200;
16859 +    if _N_ = 1 then do;
16860 +      origvar = varname;
16861 +      oldnode = node;
16862 +    end;
16864 +    if first.node then do;
16865 +       put "&EM_CODEBAR";
16866 +       put " Node = " node;
16867 +       put "&EM_CODEBAR";
16868 +    end;
16870 +      if first.varname then do;
16871 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16872 +            if MISSING(CHARACTER_VALUE) then do;
16873 +             if NUMERIC_VALUE ne .  then do;
16874 +              if ^first.node then do;
16875 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16876 +              end;
16877 +              else do;
16878 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16879 +              end;
16880 +             end;
16881 +            end;
16882 +            else do;
16883 +              if ^first.node then do;
16884 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16885 +              end;
16886 +              else do;
16887 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16888 +              end;
16889 +             end;
16890 +         end;
16891 +         else if RELATION in ("=") then do;
16892 +            if ^first.node then do;
16893 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16894 +            end;
16895 +            else do;
16896 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16897 +            end;
16898 +         end;
16899 +         else if RELATION in ("ISMISSING") then do;
16900 +            if ^first.node then do;
16901 +              string = " AND "|| strip(varname) || " equals Missing";
16902 +            end;
16903 +            else do;
16904 +              string = "if "|| strip(varname) ||" equals Missing";
16905 +            end;
16906 +         end;
16907 +         else if RELATION in ("ISNOTMISSING") then do;
16908 +            if ^first.node then do;
16909 +              string = " AND "|| strip(varname) || " equals All Values";
16910 +            end;
16911 +            else do;
16912 +              string = "if "|| strip(varname) ||" equals All Values";
16913 +            end;
16914 +         end;
16915 +         if ^missing(varname) then origvar = varname;
16916 +         oldnode=node;
16918 +      end;
16919 +      else do;
16920 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16921 +          if MISSING(CHARACTER_VALUE) then do;
16922 +           if  NUMERIC_VALUE ne .  then do;
16923 +            if ^MISSING(string) then
16924 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16925 +            else
16926 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16927 +           end;
16928 +          end;
16929 +          else do;
16930 +            if ^MISSING(string) then
16931 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16932 +            else
16933 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16934 +          end;
16936 +         end;
16937 +         else if RELATION in ("=") then do;
16938 +           string = strip(string)||", "||strip(character_value);
16939 +         end;
16940 +         else if RELATION in ("ISMISSING") then do;
16942 +         end;
16943 +         if ^missing(varname) then origvar = varname;
16944 +         oldnode=node;
16945 +      end;
16946 +      if last.varname then do;
16947 +         if RELATION in ("ISMISSING") then do;
16948 +           if ^first.varname then do;
16949 +             string = strip(string) || " or MISSING";
16950 +           end;
16951 +         end;
16952 +         put string;
16953 +         if ^missing(varname) then origvar = varname;
16954 +         oldnode=node;
16955 +      end;
16957 +      if last.node then do;
16958 +         put "then ";
16959 +         put " Tree Node Identifier   = " node;
16961 +         %if "&nprior_flag" ne "." %then %do;
16962 +           put " Number of Observations = " NPRIORS;
16963 +         %end;
16964 +         %else %do;
16965 +           put " Number of Observations = " N;
16966 +         %end;
16968 +         %if &numpred gt 0 %then %do;
16969 +           %do i=1 %to &numpred;
16970 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16971 +           %end;
16972 +         %end;
16974 +         put " ";
16975 +         if ^missing(varname) then origvar = varname;
16976 +         oldnode=node;
16977 +      end;
16979 +  run;
16981 +  proc datasets lib=work nolist;
16982 +    delete tempoutpath outnodes;
16983 +  run;
16985 +  %doendm:
16986 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS4.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS4.EM_TREE2.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: View EMWS4.EM_TREE2.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS4.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596463 kilobytes of physical memory.
NOTE: Will use 11112 out of 11112 training cases.
NOTE: Using memory pool with 176443392 bytes.
NOTE: Passed training data 11 times.
NOTE: Training used 2854472 bytes of work memory.
NOTE: The subtree sequence contains 36 subtrees. The largest has 62 nodes and 38 leaves.
NOTE: Using subtree with 23 nodes and 15 leaves.
NOTE: Using subtree with 23 nodes and 15 leaves.
NOTE: Created macro variable NLEAVES equal to 15.
NOTE: The data set EMWS4.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS4.TREE2_EMTREE has 1474 observations and 4 variables.
NOTE: The data set EMWS4.TREE2_OUTNODES has 23 observations and 24 variables.
NOTE: The data set EMWS4.TREE2_OUTPATH has 84 observations and 7 variables.
NOTE: The data set EMWS4.TREE2_OUTRULES has 326 observations and 6 variables.
NOTE: The data set EMWS4.TREE2_OUTSEQ has 36 observations and 20 variables.
NOTE: The data set EMWS4.TREE2_OUTSTATS has 161 observations and 5 variables.
NOTE: The data set EMWS4.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS4.TREE2_OUTTOPOLOGY has 23 observations and 5 variables.
NOTE: External file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\TREEFLOW.sas opened.
NOTE: External file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\TREEPUBLISH.sas opened.
NOTE: View EMWS4.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
 
 
NOTE: View EMWS4.EM_TREE2.VIEW used (Total process time):
      real time           1.74 seconds
      cpu time            0.59 seconds
 
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS4.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.74 seconds
      cpu time            0.59 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS4.TREE2_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 84 observations read from the data set EMWS4.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 84 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 84 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS4.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 23 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 84 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 84 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=25Apr2020:11:21:45,
      Create Time=25Apr2020:11:21:45
 
NOTE: 174 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 64.
NOTE: There were 84 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.60 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16988
16989  *------------------------------------------------------------*;
16990  * End TRAIN: Tree2;
16991  *------------------------------------------------------------*;
 
16992  *------------------------------------------------------------*;
16993  * Close any missing semi colons;
16994  *------------------------------------------------------------*;
16995  ;
16996  ;
16997  ;
16998  ;
16999  quit;
17000  *------------------------------------------------------------*;
17001  * Close any unbalanced quotes;
17002  *------------------------------------------------------------*;
17003  /*; *"; *'; */
17004  ;
17005  run;
17006  quit;
17007  /* Reset EM Options */
17008  options formchar="|----|+|---+=|-/\<>*";
17009  options nocenter ls=256 ps=10000;
17010  goptions reset=all device=GIF NODISPLAY;
 
17011  proc sort data=WORK.EM_USER_REPORT;
17012  by ID VIEW;
17013  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 25, 2020
Time:                11:21:47
*------------------------------------------------------------*
17115  %let EMEXCEPTIONSTRING=;
17116  *------------------------------------------------------------*;
17117  * SCORE: Tree2;
17118  *------------------------------------------------------------*;
17119  %let EM_ACTION = SCORE;
17120  %let syscc = 0;
17121  %macro main;
17122
17123    %if %upcase(&EM_ACTION) = CREATE %then %do;
17124      filename temp catalog 'sashelp.emmodl.tree_create.source';
17125      %include temp;
17126      filename temp;
17127
17128      %em_tree_create;
17129    %end;
17130
17131     %else
17132     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17133
17134         filename temp catalog 'sashelp.emmodl.tree_train.source';
17135         %include temp;
17136         filename temp;
17137         %em_tree_train;
17138     %end;
17139
17140    %else
17141    %if %upcase(&EM_ACTION) = SCORE %then %do;
17142      filename temp catalog 'sashelp.emmodl.tree_score.source';
17143      %include temp;
17144      filename temp;
17145
17146      %em_tree_score;
17147
17148    %end;
17149
17150    %else
17151    %if %upcase(&EM_ACTION) = REPORT %then %do;
17152
17153         filename temp catalog 'sashelp.emmodl.tree_report.source';
17154         %include temp;
17155         filename temp;
17156
17157         %em_tree_report;
17158     %end;
17159
17160    %else
17161    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17162
17163         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17164         %include temp;
17165         filename temp;
17166         %EM_TREE_OPENTREEVIEWER;
17167
17168     %end;
17169
17170    %else
17171    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17172
17173         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17174         %include temp;
17175         filename temp;
17176         %EM_TREE_CLOSETREEVIEWER;
17177
17178     %end;
17179
17180
17181     %doendm:
17182  %mend main;
17183
17184  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17186 +%macro em_tree_score;
17188 +   /* determine if multiple targets will be processed */
17189 +   %let em_tree_multipleTargets=N;
17190 +   %let em_tree_numTarget=1;
17191 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17192 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17193 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17194 +         %let em_tree_multipleTargets=N;
17195 +      %end;
17196 +      %else %do;
17197 +         /* create macro array of targets  */
17198 +         data _null_;
17199 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17200 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17201 +           if eof then
17202 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17203 +        run;
17205 +        %if &em_tree_numTarget gt 1 %then %do;
17206 +           %let em_tree_multipleTargets=Y;
17207 +        %end;
17208 +      %end;
17209 +   %end;
17211 +   /* build flow and publish scoring code */
17212 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17213 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17215 +   filename treeflow "&EM_USER_TREEFLOW";
17216 +   filename treepub "&EM_USER_TREEPUBLISH";
17218 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17219 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17221 +   %em_copyfile(infref=treeflow, outfref=flowref);
17222 +   %em_copyfile(infref=treepub, outfref=pubref);
17224 +   filename treeflow;
17225 +   filename treepub;
17227 +   /* if priors are used, add code to generate unadjusted residuals in export */
17228 +   %let useAdjPriors = N;
17229 +   data _null_;
17230 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17231 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17232 +   run;
17233 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17234 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17235 +      %include temp;
17236 +      filename temp;
17238 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17239 +      filename adjref "&EM_USER_adjResidualCode";
17240 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17242 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17244 +      filename adjref;
17245 +   %end;
17247 +   /* LEAF */
17248 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17249 +      data _null_;
17250 +        file flowref mod;
17251 +        put 'drop _LEAF_;';
17252 +      run;
17254 +      data _null_;
17255 +        file pubref mod;
17256 +        put 'drop _LEAF_;';
17257 +      run;
17259 +   %end;
17261 +   filename flowref;
17262 +   filename pubref;
17264 +   /* em_metachange code */
17265 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17266 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17267 +   %end;
17269 +   /* variable selection based on importance stat    */
17270 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17271 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17272 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17273 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17274 +     %let obs = %sysfunc(fetch(&dsid));
17275 +     %do %while(&obs=0);
17276 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17277 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17278 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17279 +       %let obs = %sysfunc(fetch(&dsid));
17280 +     %end;
17281 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17282 +   %end;
17284 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17285 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17286 +    %let tree_pred_vars = ;
17287 +    %let tree_pred_lvl =;
17288 +    %let numpred= 0;
17290 +    data _null_;
17291 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17292 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17293 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17294 +     if eof then
17295 +       call symput('numpred', strip(put(_N_, BEST.)));
17296 +    run;
17297 +   %end;
17299 +   %if &numpred ne 0 %then %do;
17300 +    %do i=1 %to &numpred;
17301 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17302 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17303 +    %end;
17304 +   %end;
17306 +   /* determine if multiple targets will be processed */
17307 +   %let em_tree_multipleTargets=N;
17308 +   %let em_tree_numTarget=1;
17309 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17310 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17311 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17312 +         %let em_tree_multipleTargets=N;
17313 +      %end;
17314 +      %else %do;
17315 +        data _null_;
17316 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17317 +          if eof then
17318 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17319 +        run;
17321 +        %if &em_tree_numTarget gt 1 %then %do;
17322 +           %let em_tree_multipleTargets=Y;
17323 +        %end;
17324 +     %end;
17325 +   %end;
17327 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17328 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17330 +      /* variable importance */
17331 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17332 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17334 +         %let validexist=0;
17335 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17336 +           %let validexist=1;
17337 +         %end;
17339 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17340 +         /* and the columns may not be generated                                                                                 */
17341 +         %let em_tree_cvexists=;
17342 +         %let em_tree_surrexists=.;
17343 +         data _null_;
17344 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17345 +            if eof then do ;
17346 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17347 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17348 +            end;
17349 +         run;
17351 +         data &EM_USER_OUTIMPORT;
17352 +            set &EM_USER_OUTIMPORT;
17354 +            /* format columns based on Precison value specified */
17355 +            format importance 15.&EM_PROPERTY_PRECISION
17356 +                 %if &validexist %then %do;
17357 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17358 +                 %end;
17359 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17360 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17361 +                 %end;
17362 +            ;
17363 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17364 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17365 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17366 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17367 +                 %if "&em_tree_surrexists" ne "" %then %do;
17368 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17369 +                 %end;
17370 +                 %if &validexist %then %do;
17371 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17372 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17373 +                 %end;
17374 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17375 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17376 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17377 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17378 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17379 +                 %end;
17380 +            ;
17381 +         run;
17383 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17384 +      %end;
17385 +   %end;
17387 +   %doendm:
17388 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=25Apr2020:11:21:46,
      Create Time=25Apr2020:11:21:46
 
NOTE: 268 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=25Apr2020:11:21:46,
      Create Time=25Apr2020:11:21:46
 
NOTE: 246 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9869,
      Last Modified=25Apr2020:11:21:46,
      Create Time=25Apr2020:11:21:46
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9196,
      Last Modified=25Apr2020:11:21:46,
      Create Time=25Apr2020:11:21:46
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: The data set EMWS4.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17389
17390  *------------------------------------------------------------*;
17391  * End SCORE: Tree2;
17392  *------------------------------------------------------------*;
 
17393  proc sort data=WORK.EM_METACHANGE;
17394  by key uname;
17395  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17396  filename x "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\CDELTA_TRAIN.sas";
17397  data _null_;
17398  file x;
17399  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
17400  put 'ROLE = "REJECTED";';
17401  put 'end;';
17402  put 'else ';
17403  put 'if upcase(NAME) = "DEMREG" then do;';
17404  put 'ROLE = "REJECTED";';
17405  put 'end;';
17406  put 'else ';
17407  put 'if upcase(NAME) = "DEMTVREG" then do;';
17408  put 'ROLE = "REJECTED";';
17409  put 'end;';
17410  put 'else ';
17411  put 'if upcase(NAME) = "PROMCLASS" then do;';
17412  put 'ROLE = "REJECTED";';
17413  put 'end;';
17414  put 'else ';
17415  put 'if upcase(NAME) = "PROMSPEND" then do;';
17416  put 'ROLE = "REJECTED";';
17417  put 'end;';
17418  put 'else ';
17419  put 'if upcase(NAME) = "PROMTIME" then do;';
17420  put 'ROLE = "REJECTED";';
17421  put 'end;';
17422  put 'else ';
17423  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
17424  put 'ROLE = "ASSESS";';
17425  put 'end;';
17426  put 'else ';
17427  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
17428  put 'ROLE = "ASSESS";';
17429  put 'end;';
17430  put 'else ';
17431  put 'if upcase(NAME) = "_NODE_" then do;';
17432  put 'ROLE = "SEGMENT";';
17433  put 'LEVEL = "NOMINAL";';
17434  put 'end;';
17435  run;
 
NOTE: The file X is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=25Apr2020:11:21:47,
      Create Time=25Apr2020:11:19:30
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17436  filename x;
NOTE: Fileref X has been deassigned.
 
17437  filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas";
17438  *------------------------------------------------------------*;
17439  * Tree2: Scoring DATA data;
17440  *------------------------------------------------------------*;
17441  data EMWS4.Tree2_TRAIN
17442  / view=EMWS4.Tree2_TRAIN
17443  ;
17444  set EMWS4.Part_TRAIN
17445  ;
17446  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas.
17447 +****************************************************************;
17448 +******             DECISION TREE SCORING CODE             ******;
17449 +****************************************************************;
17450 +
17451 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17452 +LENGTH F_TargetBuy  $   12;
17453 +LENGTH I_TargetBuy  $   12;
17454 +LENGTH _WARN_  $    4;
17455 +
17456 +******              LABELS FOR NEW VARIABLES              ******;
17457 +label _NODE_ = 'Node' ;
17458 +label _LEAF_ = 'Leaf' ;
17459 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17460 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17461 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17462 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17463 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17464 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17465 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17466 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17467 +label F_TargetBuy = 'From: TargetBuy' ;
17468 +label I_TargetBuy = 'Into: TargetBuy' ;
17469 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17470 +label _WARN_ = 'Warnings' ;
17471 +
17472 +
17473 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17474 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17475 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17476 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17477 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17478 +
17479 +
17480 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17481 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17482 +
17483 +******             ASSIGN OBSERVATION TO NODE             ******;
17484 +IF  NOT MISSING(DemAge ) AND
17485 +  DemAge  <                 39.5 THEN DO;
17486 +  IF  NOT MISSING(DemAffl ) AND
17487 +    DemAffl  <                  9.5 THEN DO;
17488 +    _ARBFMT_1 = PUT( DemGender , $1.);
17489 +     %DMNORMIP( _ARBFMT_1);
17490 +    IF _ARBFMT_1 IN ('M' ) THEN DO;
17491 +      _NODE_  =                   15;
17492 +      _LEAF_  =                    2;
17493 +      P_TargetBuy0  =      0.6255707762557;
17494 +      P_TargetBuy1  =     0.37442922374429;
17495 +      Q_TargetBuy0  =      0.6255707762557;
17496 +      Q_TargetBuy1  =     0.37442922374429;
17497 +      V_TargetBuy0  =      0.6826923076923;
17498 +      V_TargetBuy1  =     0.31730769230769;
17499 +      I_TargetBuy  = '0' ;
17500 +      U_TargetBuy  =                    0;
17501 +      END;
17502 +    ELSE IF _ARBFMT_1 IN ('F' ) THEN DO;
17503 +      IF  NOT MISSING(DemAffl ) AND
17504 +        DemAffl  <                  6.5 THEN DO;
17505 +        _NODE_  =                   38;
17506 +        _LEAF_  =                    3;
17507 +        P_TargetBuy0  =     0.60115606936416;
17508 +        P_TargetBuy1  =     0.39884393063583;
17509 +        Q_TargetBuy0  =     0.60115606936416;
17510 +        Q_TargetBuy1  =     0.39884393063583;
17511 +        V_TargetBuy0  =      0.5047619047619;
17512 +        V_TargetBuy1  =     0.49523809523809;
17513 +        I_TargetBuy  = '0' ;
17514 +        U_TargetBuy  =                    0;
17515 +        END;
17516 +      ELSE DO;
17517 +        _NODE_  =                   39;
17518 +        _LEAF_  =                    4;
17519 +        P_TargetBuy0  =     0.38622754491017;
17520 +        P_TargetBuy1  =     0.61377245508982;
17521 +        Q_TargetBuy0  =     0.38622754491017;
17522 +        Q_TargetBuy1  =     0.61377245508982;
17523 +        V_TargetBuy0  =     0.39423076923076;
17524 +        V_TargetBuy1  =     0.60576923076923;
17525 +        I_TargetBuy  = '1' ;
17526 +        U_TargetBuy  =                    1;
17527 +        END;
17528 +      END;
17529 +    ELSE DO;
17530 +      _NODE_  =                   14;
17531 +      _LEAF_  =                    1;
17532 +      P_TargetBuy0  =     0.84931506849315;
17533 +      P_TargetBuy1  =     0.15068493150684;
17534 +      Q_TargetBuy0  =     0.84931506849315;
17535 +      Q_TargetBuy1  =     0.15068493150684;
17536 +      V_TargetBuy0  =                 0.84;
17537 +      V_TargetBuy1  =                 0.16;
17538 +      I_TargetBuy  = '0' ;
17539 +      U_TargetBuy  =                    0;
17540 +      END;
17541 +    END;
17542 +  ELSE IF  NOT MISSING(DemAffl ) AND
17543 +                    14.5 <= DemAffl  THEN DO;
17544 +    _NODE_  =                    7;
17545 +    _LEAF_  =                    8;
17546 +    P_TargetBuy0  =     0.04712041884816;
17547 +    P_TargetBuy1  =     0.95287958115183;
17548 +    Q_TargetBuy0  =     0.04712041884816;
17549 +    Q_TargetBuy1  =     0.95287958115183;
17550 +    V_TargetBuy0  =     0.06194690265486;
17551 +    V_TargetBuy1  =     0.93805309734513;
17552 +    I_TargetBuy  = '1' ;
17553 +    U_TargetBuy  =                    1;
17554 +    END;
17555 +  ELSE DO;
17556 +    _ARBFMT_1 = PUT( DemGender , $1.);
17557 +     %DMNORMIP( _ARBFMT_1);
17558 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17559 +      _NODE_  =                   17;
17560 +      _LEAF_  =                    5;
17561 +      P_TargetBuy0  =     0.22271714922049;
17562 +      P_TargetBuy1  =     0.77728285077951;
17563 +      Q_TargetBuy0  =     0.22271714922049;
17564 +      Q_TargetBuy1  =     0.77728285077951;
17565 +      V_TargetBuy0  =     0.20081967213114;
17566 +      V_TargetBuy1  =     0.79918032786885;
17567 +      I_TargetBuy  = '1' ;
17568 +      U_TargetBuy  =                    1;
17569 +      END;
17570 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17571 +      _NODE_  =                   18;
17572 +      _LEAF_  =                    6;
17573 +      P_TargetBuy0  =      0.4388489208633;
17574 +      P_TargetBuy1  =     0.56115107913669;
17575 +      Q_TargetBuy0  =      0.4388489208633;
17576 +      Q_TargetBuy1  =     0.56115107913669;
17577 +      V_TargetBuy0  =     0.58571428571428;
17578 +      V_TargetBuy1  =     0.41428571428571;
17579 +      I_TargetBuy  = '1' ;
17580 +      U_TargetBuy  =                    1;
17581 +      END;
17582 +    ELSE DO;
17583 +      _NODE_  =                   19;
17584 +      _LEAF_  =                    7;
17585 +      P_TargetBuy0  =     0.58730158730158;
17586 +      P_TargetBuy1  =     0.41269841269841;
17587 +      Q_TargetBuy0  =     0.58730158730158;
17588 +      Q_TargetBuy1  =     0.41269841269841;
17589 +      V_TargetBuy0  =     0.66666666666666;
17590 +      V_TargetBuy1  =     0.33333333333333;
17591 +      I_TargetBuy  = '0' ;
17592 +      U_TargetBuy  =                    0;
17593 +      END;
17594 +    END;
17595 +  END;
17596 +ELSE IF  NOT MISSING(DemAge ) AND
17597 +                  44.5 <= DemAge  THEN DO;
17598 +  IF  NOT MISSING(DemAffl ) AND
17599 +                    10.5 <= DemAffl  AND
17600 +    DemAffl  <                 15.5 THEN DO;
17601 +    _NODE_  =                   12;
17602 +    _LEAF_  =                   14;
17603 +    P_TargetBuy0  =     0.73411154345006;
17604 +    P_TargetBuy1  =     0.26588845654993;
17605 +    Q_TargetBuy0  =     0.73411154345006;
17606 +    Q_TargetBuy1  =     0.26588845654993;
17607 +    V_TargetBuy0  =     0.74371859296482;
17608 +    V_TargetBuy1  =     0.25628140703517;
17609 +    I_TargetBuy  = '0' ;
17610 +    U_TargetBuy  =                    0;
17611 +    END;
17612 +  ELSE IF  NOT MISSING(DemAffl ) AND
17613 +                    15.5 <= DemAffl  THEN DO;
17614 +    _NODE_  =                   13;
17615 +    _LEAF_  =                   15;
17616 +    P_TargetBuy0  =     0.33734939759036;
17617 +    P_TargetBuy1  =     0.66265060240963;
17618 +    Q_TargetBuy0  =     0.33734939759036;
17619 +    Q_TargetBuy1  =     0.66265060240963;
17620 +    V_TargetBuy0  =     0.32926829268292;
17621 +    V_TargetBuy1  =     0.67073170731707;
17622 +    I_TargetBuy  = '1' ;
17623 +    U_TargetBuy  =                    1;
17624 +    END;
17625 +  ELSE DO;
17626 +    _NODE_  =                   11;
17627 +    _LEAF_  =                   13;
17628 +    P_TargetBuy0  =     0.89780775716694;
17629 +    P_TargetBuy1  =     0.10219224283305;
17630 +    Q_TargetBuy0  =     0.89780775716694;
17631 +    Q_TargetBuy1  =     0.10219224283305;
17632 +    V_TargetBuy0  =     0.89496855345911;
17633 +    V_TargetBuy1  =     0.10503144654088;
17634 +    I_TargetBuy  = '0' ;
17635 +    U_TargetBuy  =                    0;
17636 +    END;
17637 +  END;
17638 +ELSE DO;
17639 +  IF  NOT MISSING(DemAffl ) AND
17640 +    DemAffl  <                  8.5 THEN DO;
17641 +    _NODE_  =                    8;
17642 +    _LEAF_  =                    9;
17643 +    P_TargetBuy0  =     0.78992628992629;
17644 +    P_TargetBuy1  =     0.21007371007371;
17645 +    Q_TargetBuy0  =     0.78992628992629;
17646 +    Q_TargetBuy1  =     0.21007371007371;
17647 +    V_TargetBuy0  =     0.77220956719817;
17648 +    V_TargetBuy1  =     0.22779043280182;
17649 +    I_TargetBuy  = '0' ;
17650 +    U_TargetBuy  =                    0;
17651 +    END;
17652 +  ELSE IF  NOT MISSING(DemAffl ) AND
17653 +                     8.5 <= DemAffl  AND
17654 +    DemAffl  <                 11.5 THEN DO;
17655 +    _NODE_  =                    9;
17656 +    _LEAF_  =                   10;
17657 +    P_TargetBuy0  =     0.64932562620423;
17658 +    P_TargetBuy1  =     0.35067437379576;
17659 +    Q_TargetBuy0  =     0.64932562620423;
17660 +    Q_TargetBuy1  =     0.35067437379576;
17661 +    V_TargetBuy0  =     0.66417910447761;
17662 +    V_TargetBuy1  =     0.33582089552238;
17663 +    I_TargetBuy  = '0' ;
17664 +    U_TargetBuy  =                    0;
17665 +    END;
17666 +  ELSE DO;
17667 +    _ARBFMT_1 = PUT( DemGender , $1.);
17668 +     %DMNORMIP( _ARBFMT_1);
17669 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17670 +      _NODE_  =                   29;
17671 +      _LEAF_  =                   11;
17672 +      P_TargetBuy0  =     0.29616724738675;
17673 +      P_TargetBuy1  =     0.70383275261324;
17674 +      Q_TargetBuy0  =     0.29616724738675;
17675 +      Q_TargetBuy1  =     0.70383275261324;
17676 +      V_TargetBuy0  =     0.38961038961038;
17677 +      V_TargetBuy1  =     0.61038961038961;
17678 +      I_TargetBuy  = '1' ;
17679 +      U_TargetBuy  =                    1;
17680 +      END;
17681 +    ELSE DO;
17682 +      _NODE_  =                   30;
17683 +      _LEAF_  =                   12;
17684 +      P_TargetBuy0  =     0.57857142857142;
17685 +      P_TargetBuy1  =     0.42142857142857;
17686 +      Q_TargetBuy0  =     0.57857142857142;
17687 +      Q_TargetBuy1  =     0.42142857142857;
17688 +      V_TargetBuy0  =     0.63302752293577;
17689 +      V_TargetBuy1  =     0.36697247706422;
17690 +      I_TargetBuy  = '0' ;
17691 +      U_TargetBuy  =                    0;
17692 +      END;
17693 +    END;
17694 +  END;
17695 +
17696 +*****  RESIDUALS R_ *************;
17697 +IF  F_TargetBuy  NE '0'
17698 +AND F_TargetBuy  NE '1'  THEN DO;
17699 +        R_TargetBuy0  = .;
17700 +        R_TargetBuy1  = .;
17701 + END;
17702 + ELSE DO;
17703 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17704 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17705 +       SELECT( F_TargetBuy  );
17706 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17707 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17708 +       END;
17709 + END;
17710 +
17711 +****************************************************************;
17712 +******          END OF DECISION TREE SCORING CODE         ******;
17713 +****************************************************************;
17714 +
17715 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17716  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
17717  quit;
17718  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17719  filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas";
17720  *------------------------------------------------------------*;
17721  * Tree2: Scoring VALIDATE data;
17722  *------------------------------------------------------------*;
17723  data EMWS4.Tree2_VALIDATE
17724  / view=EMWS4.Tree2_VALIDATE
17725  ;
17726  set EMWS4.Part_VALIDATE
17727  ;
17728  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas.
17729 +****************************************************************;
17730 +******             DECISION TREE SCORING CODE             ******;
17731 +****************************************************************;
17732 +
17733 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17734 +LENGTH F_TargetBuy  $   12;
17735 +LENGTH I_TargetBuy  $   12;
17736 +LENGTH _WARN_  $    4;
17737 +
17738 +******              LABELS FOR NEW VARIABLES              ******;
17739 +label _NODE_ = 'Node' ;
17740 +label _LEAF_ = 'Leaf' ;
17741 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17742 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17743 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17744 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17745 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17746 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17747 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17748 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17749 +label F_TargetBuy = 'From: TargetBuy' ;
17750 +label I_TargetBuy = 'Into: TargetBuy' ;
17751 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17752 +label _WARN_ = 'Warnings' ;
17753 +
17754 +
17755 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17756 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17757 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17758 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17759 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17760 +
17761 +
17762 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17763 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17764 +
17765 +******             ASSIGN OBSERVATION TO NODE             ******;
17766 +IF  NOT MISSING(DemAge ) AND
17767 +  DemAge  <                 39.5 THEN DO;
17768 +  IF  NOT MISSING(DemAffl ) AND
17769 +    DemAffl  <                  9.5 THEN DO;
17770 +    _ARBFMT_1 = PUT( DemGender , $1.);
17771 +     %DMNORMIP( _ARBFMT_1);
17772 +    IF _ARBFMT_1 IN ('M' ) THEN DO;
17773 +      _NODE_  =                   15;
17774 +      _LEAF_  =                    2;
17775 +      P_TargetBuy0  =      0.6255707762557;
17776 +      P_TargetBuy1  =     0.37442922374429;
17777 +      Q_TargetBuy0  =      0.6255707762557;
17778 +      Q_TargetBuy1  =     0.37442922374429;
17779 +      V_TargetBuy0  =      0.6826923076923;
17780 +      V_TargetBuy1  =     0.31730769230769;
17781 +      I_TargetBuy  = '0' ;
17782 +      U_TargetBuy  =                    0;
17783 +      END;
17784 +    ELSE IF _ARBFMT_1 IN ('F' ) THEN DO;
17785 +      IF  NOT MISSING(DemAffl ) AND
17786 +        DemAffl  <                  6.5 THEN DO;
17787 +        _NODE_  =                   38;
17788 +        _LEAF_  =                    3;
17789 +        P_TargetBuy0  =     0.60115606936416;
17790 +        P_TargetBuy1  =     0.39884393063583;
17791 +        Q_TargetBuy0  =     0.60115606936416;
17792 +        Q_TargetBuy1  =     0.39884393063583;
17793 +        V_TargetBuy0  =      0.5047619047619;
17794 +        V_TargetBuy1  =     0.49523809523809;
17795 +        I_TargetBuy  = '0' ;
17796 +        U_TargetBuy  =                    0;
17797 +        END;
17798 +      ELSE DO;
17799 +        _NODE_  =                   39;
17800 +        _LEAF_  =                    4;
17801 +        P_TargetBuy0  =     0.38622754491017;
17802 +        P_TargetBuy1  =     0.61377245508982;
17803 +        Q_TargetBuy0  =     0.38622754491017;
17804 +        Q_TargetBuy1  =     0.61377245508982;
17805 +        V_TargetBuy0  =     0.39423076923076;
17806 +        V_TargetBuy1  =     0.60576923076923;
17807 +        I_TargetBuy  = '1' ;
17808 +        U_TargetBuy  =                    1;
17809 +        END;
17810 +      END;
17811 +    ELSE DO;
17812 +      _NODE_  =                   14;
17813 +      _LEAF_  =                    1;
17814 +      P_TargetBuy0  =     0.84931506849315;
17815 +      P_TargetBuy1  =     0.15068493150684;
17816 +      Q_TargetBuy0  =     0.84931506849315;
17817 +      Q_TargetBuy1  =     0.15068493150684;
17818 +      V_TargetBuy0  =                 0.84;
17819 +      V_TargetBuy1  =                 0.16;
17820 +      I_TargetBuy  = '0' ;
17821 +      U_TargetBuy  =                    0;
17822 +      END;
17823 +    END;
17824 +  ELSE IF  NOT MISSING(DemAffl ) AND
17825 +                    14.5 <= DemAffl  THEN DO;
17826 +    _NODE_  =                    7;
17827 +    _LEAF_  =                    8;
17828 +    P_TargetBuy0  =     0.04712041884816;
17829 +    P_TargetBuy1  =     0.95287958115183;
17830 +    Q_TargetBuy0  =     0.04712041884816;
17831 +    Q_TargetBuy1  =     0.95287958115183;
17832 +    V_TargetBuy0  =     0.06194690265486;
17833 +    V_TargetBuy1  =     0.93805309734513;
17834 +    I_TargetBuy  = '1' ;
17835 +    U_TargetBuy  =                    1;
17836 +    END;
17837 +  ELSE DO;
17838 +    _ARBFMT_1 = PUT( DemGender , $1.);
17839 +     %DMNORMIP( _ARBFMT_1);
17840 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17841 +      _NODE_  =                   17;
17842 +      _LEAF_  =                    5;
17843 +      P_TargetBuy0  =     0.22271714922049;
17844 +      P_TargetBuy1  =     0.77728285077951;
17845 +      Q_TargetBuy0  =     0.22271714922049;
17846 +      Q_TargetBuy1  =     0.77728285077951;
17847 +      V_TargetBuy0  =     0.20081967213114;
17848 +      V_TargetBuy1  =     0.79918032786885;
17849 +      I_TargetBuy  = '1' ;
17850 +      U_TargetBuy  =                    1;
17851 +      END;
17852 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17853 +      _NODE_  =                   18;
17854 +      _LEAF_  =                    6;
17855 +      P_TargetBuy0  =      0.4388489208633;
17856 +      P_TargetBuy1  =     0.56115107913669;
17857 +      Q_TargetBuy0  =      0.4388489208633;
17858 +      Q_TargetBuy1  =     0.56115107913669;
17859 +      V_TargetBuy0  =     0.58571428571428;
17860 +      V_TargetBuy1  =     0.41428571428571;
17861 +      I_TargetBuy  = '1' ;
17862 +      U_TargetBuy  =                    1;
17863 +      END;
17864 +    ELSE DO;
17865 +      _NODE_  =                   19;
17866 +      _LEAF_  =                    7;
17867 +      P_TargetBuy0  =     0.58730158730158;
17868 +      P_TargetBuy1  =     0.41269841269841;
17869 +      Q_TargetBuy0  =     0.58730158730158;
17870 +      Q_TargetBuy1  =     0.41269841269841;
17871 +      V_TargetBuy0  =     0.66666666666666;
17872 +      V_TargetBuy1  =     0.33333333333333;
17873 +      I_TargetBuy  = '0' ;
17874 +      U_TargetBuy  =                    0;
17875 +      END;
17876 +    END;
17877 +  END;
17878 +ELSE IF  NOT MISSING(DemAge ) AND
17879 +                  44.5 <= DemAge  THEN DO;
17880 +  IF  NOT MISSING(DemAffl ) AND
17881 +                    10.5 <= DemAffl  AND
17882 +    DemAffl  <                 15.5 THEN DO;
17883 +    _NODE_  =                   12;
17884 +    _LEAF_  =                   14;
17885 +    P_TargetBuy0  =     0.73411154345006;
17886 +    P_TargetBuy1  =     0.26588845654993;
17887 +    Q_TargetBuy0  =     0.73411154345006;
17888 +    Q_TargetBuy1  =     0.26588845654993;
17889 +    V_TargetBuy0  =     0.74371859296482;
17890 +    V_TargetBuy1  =     0.25628140703517;
17891 +    I_TargetBuy  = '0' ;
17892 +    U_TargetBuy  =                    0;
17893 +    END;
17894 +  ELSE IF  NOT MISSING(DemAffl ) AND
17895 +                    15.5 <= DemAffl  THEN DO;
17896 +    _NODE_  =                   13;
17897 +    _LEAF_  =                   15;
17898 +    P_TargetBuy0  =     0.33734939759036;
17899 +    P_TargetBuy1  =     0.66265060240963;
17900 +    Q_TargetBuy0  =     0.33734939759036;
17901 +    Q_TargetBuy1  =     0.66265060240963;
17902 +    V_TargetBuy0  =     0.32926829268292;
17903 +    V_TargetBuy1  =     0.67073170731707;
17904 +    I_TargetBuy  = '1' ;
17905 +    U_TargetBuy  =                    1;
17906 +    END;
17907 +  ELSE DO;
17908 +    _NODE_  =                   11;
17909 +    _LEAF_  =                   13;
17910 +    P_TargetBuy0  =     0.89780775716694;
17911 +    P_TargetBuy1  =     0.10219224283305;
17912 +    Q_TargetBuy0  =     0.89780775716694;
17913 +    Q_TargetBuy1  =     0.10219224283305;
17914 +    V_TargetBuy0  =     0.89496855345911;
17915 +    V_TargetBuy1  =     0.10503144654088;
17916 +    I_TargetBuy  = '0' ;
17917 +    U_TargetBuy  =                    0;
17918 +    END;
17919 +  END;
17920 +ELSE DO;
17921 +  IF  NOT MISSING(DemAffl ) AND
17922 +    DemAffl  <                  8.5 THEN DO;
17923 +    _NODE_  =                    8;
17924 +    _LEAF_  =                    9;
17925 +    P_TargetBuy0  =     0.78992628992629;
17926 +    P_TargetBuy1  =     0.21007371007371;
17927 +    Q_TargetBuy0  =     0.78992628992629;
17928 +    Q_TargetBuy1  =     0.21007371007371;
17929 +    V_TargetBuy0  =     0.77220956719817;
17930 +    V_TargetBuy1  =     0.22779043280182;
17931 +    I_TargetBuy  = '0' ;
17932 +    U_TargetBuy  =                    0;
17933 +    END;
17934 +  ELSE IF  NOT MISSING(DemAffl ) AND
17935 +                     8.5 <= DemAffl  AND
17936 +    DemAffl  <                 11.5 THEN DO;
17937 +    _NODE_  =                    9;
17938 +    _LEAF_  =                   10;
17939 +    P_TargetBuy0  =     0.64932562620423;
17940 +    P_TargetBuy1  =     0.35067437379576;
17941 +    Q_TargetBuy0  =     0.64932562620423;
17942 +    Q_TargetBuy1  =     0.35067437379576;
17943 +    V_TargetBuy0  =     0.66417910447761;
17944 +    V_TargetBuy1  =     0.33582089552238;
17945 +    I_TargetBuy  = '0' ;
17946 +    U_TargetBuy  =                    0;
17947 +    END;
17948 +  ELSE DO;
17949 +    _ARBFMT_1 = PUT( DemGender , $1.);
17950 +     %DMNORMIP( _ARBFMT_1);
17951 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17952 +      _NODE_  =                   29;
17953 +      _LEAF_  =                   11;
17954 +      P_TargetBuy0  =     0.29616724738675;
17955 +      P_TargetBuy1  =     0.70383275261324;
17956 +      Q_TargetBuy0  =     0.29616724738675;
17957 +      Q_TargetBuy1  =     0.70383275261324;
17958 +      V_TargetBuy0  =     0.38961038961038;
17959 +      V_TargetBuy1  =     0.61038961038961;
17960 +      I_TargetBuy  = '1' ;
17961 +      U_TargetBuy  =                    1;
17962 +      END;
17963 +    ELSE DO;
17964 +      _NODE_  =                   30;
17965 +      _LEAF_  =                   12;
17966 +      P_TargetBuy0  =     0.57857142857142;
17967 +      P_TargetBuy1  =     0.42142857142857;
17968 +      Q_TargetBuy0  =     0.57857142857142;
17969 +      Q_TargetBuy1  =     0.42142857142857;
17970 +      V_TargetBuy0  =     0.63302752293577;
17971 +      V_TargetBuy1  =     0.36697247706422;
17972 +      I_TargetBuy  = '0' ;
17973 +      U_TargetBuy  =                    0;
17974 +      END;
17975 +    END;
17976 +  END;
17977 +
17978 +*****  RESIDUALS R_ *************;
17979 +IF  F_TargetBuy  NE '0'
17980 +AND F_TargetBuy  NE '1'  THEN DO;
17981 +        R_TargetBuy0  = .;
17982 +        R_TargetBuy1  = .;
17983 + END;
17984 + ELSE DO;
17985 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17986 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17987 +       SELECT( F_TargetBuy  );
17988 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17989 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17990 +       END;
17991 + END;
17992 +
17993 +****************************************************************;
17994 +******          END OF DECISION TREE SCORING CODE         ******;
17995 +****************************************************************;
17996 +
17997 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17998  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.00 seconds
 
 
17999  quit;
18000  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
18001  filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas";
18002  *------------------------------------------------------------*;
18003  * Tree2: Scoring TEST data;
18004  *------------------------------------------------------------*;
18005  data EMWS4.Tree2_TEST
18006  / view=EMWS4.Tree2_TEST
18007  ;
18008  set EMWS4.Part_TEST
18009  ;
18010  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS4\Tree2\EMFLOWSCORE.sas.
18011 +****************************************************************;
18012 +******             DECISION TREE SCORING CODE             ******;
18013 +****************************************************************;
18014 +
18015 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18016 +LENGTH F_TargetBuy  $   12;
18017 +LENGTH I_TargetBuy  $   12;
18018 +LENGTH _WARN_  $    4;
18019 +
18020 +******              LABELS FOR NEW VARIABLES              ******;
18021 +label _NODE_ = 'Node' ;
18022 +label _LEAF_ = 'Leaf' ;
18023 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
18024 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
18025 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
18026 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
18027 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
18028 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
18029 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
18030 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
18031 +label F_TargetBuy = 'From: TargetBuy' ;
18032 +label I_TargetBuy = 'Into: TargetBuy' ;
18033 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
18034 +label _WARN_ = 'Warnings' ;
18035 +
18036 +
18037 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18038 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
18039 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
18040 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
18041 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
18042 +
18043 +
18044 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
18045 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
18046 +
18047 +******             ASSIGN OBSERVATION TO NODE             ******;
18048 +IF  NOT MISSING(DemAge ) AND
18049 +  DemAge  <                 39.5 THEN DO;
18050 +  IF  NOT MISSING(DemAffl ) AND
18051 +    DemAffl  <                  9.5 THEN DO;
18052 +    _ARBFMT_1 = PUT( DemGender , $1.);
18053 +     %DMNORMIP( _ARBFMT_1);
18054 +    IF _ARBFMT_1 IN ('M' ) THEN DO;
18055 +      _NODE_  =                   15;
18056 +      _LEAF_  =                    2;
18057 +      P_TargetBuy0  =      0.6255707762557;
18058 +      P_TargetBuy1  =     0.37442922374429;
18059 +      Q_TargetBuy0  =      0.6255707762557;
18060 +      Q_TargetBuy1  =     0.37442922374429;
18061 +      V_TargetBuy0  =      0.6826923076923;
18062 +      V_TargetBuy1  =     0.31730769230769;
18063 +      I_TargetBuy  = '0' ;
18064 +      U_TargetBuy  =                    0;
18065 +      END;
18066 +    ELSE IF _ARBFMT_1 IN ('F' ) THEN DO;
18067 +      IF  NOT MISSING(DemAffl ) AND
18068 +        DemAffl  <                  6.5 THEN DO;
18069 +        _NODE_  =                   38;
18070 +        _LEAF_  =                    3;
18071 +        P_TargetBuy0  =     0.60115606936416;
18072 +        P_TargetBuy1  =     0.39884393063583;
18073 +        Q_TargetBuy0  =     0.60115606936416;
18074 +        Q_TargetBuy1  =     0.39884393063583;
18075 +        V_TargetBuy0  =      0.5047619047619;
18076 +        V_TargetBuy1  =     0.49523809523809;
18077 +        I_TargetBuy  = '0' ;
18078 +        U_TargetBuy  =                    0;
18079 +        END;
18080 +      ELSE DO;
18081 +        _NODE_  =                   39;
18082 +        _LEAF_  =                    4;
18083 +        P_TargetBuy0  =     0.38622754491017;
18084 +        P_TargetBuy1  =     0.61377245508982;
18085 +        Q_TargetBuy0  =     0.38622754491017;
18086 +        Q_TargetBuy1  =     0.61377245508982;
18087 +        V_TargetBuy0  =     0.39423076923076;
18088 +        V_TargetBuy1  =     0.60576923076923;
18089 +        I_TargetBuy  = '1' ;
18090 +        U_TargetBuy  =                    1;
18091 +        END;
18092 +      END;
18093 +    ELSE DO;
18094 +      _NODE_  =                   14;
18095 +      _LEAF_  =                    1;
18096 +      P_TargetBuy0  =     0.84931506849315;
18097 +      P_TargetBuy1  =     0.15068493150684;
18098 +      Q_TargetBuy0  =     0.84931506849315;
18099 +      Q_TargetBuy1  =     0.15068493150684;
18100 +      V_TargetBuy0  =                 0.84;
18101 +      V_TargetBuy1  =                 0.16;
18102 +      I_TargetBuy  = '0' ;
18103 +      U_TargetBuy  =                    0;
18104 +      END;
18105 +    END;
18106 +  ELSE IF  NOT MISSING(DemAffl ) AND
18107 +                    14.5 <= DemAffl  THEN DO;
18108 +    _NODE_  =                    7;
18109 +    _LEAF_  =                    8;
18110 +    P_TargetBuy0  =     0.04712041884816;
18111 +    P_TargetBuy1  =     0.95287958115183;
18112 +    Q_TargetBuy0  =     0.04712041884816;
18113 +    Q_TargetBuy1  =     0.95287958115183;
18114 +    V_TargetBuy0  =     0.06194690265486;
18115 +    V_TargetBuy1  =     0.93805309734513;
18116 +    I_TargetBuy  = '1' ;
18117 +    U_TargetBuy  =                    1;
18118 +    END;
18119 +  ELSE DO;
18120 +    _ARBFMT_1 = PUT( DemGender , $1.);
18121 +     %DMNORMIP( _ARBFMT_1);
18122 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
18123 +      _NODE_  =                   17;
18124 +      _LEAF_  =                    5;
18125 +      P_TargetBuy0  =     0.22271714922049;
18126 +      P_TargetBuy1  =     0.77728285077951;
18127 +      Q_TargetBuy0  =     0.22271714922049;
18128 +      Q_TargetBuy1  =     0.77728285077951;
18129 +      V_TargetBuy0  =     0.20081967213114;
18130 +      V_TargetBuy1  =     0.79918032786885;
18131 +      I_TargetBuy  = '1' ;
18132 +      U_TargetBuy  =                    1;
18133 +      END;
18134 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
18135 +      _NODE_  =                   18;
18136 +      _LEAF_  =                    6;
18137 +      P_TargetBuy0  =      0.4388489208633;
18138 +      P_TargetBuy1  =     0.56115107913669;
18139 +      Q_TargetBuy0  =      0.4388489208633;
18140 +      Q_TargetBuy1  =     0.56115107913669;
18141 +      V_TargetBuy0  =     0.58571428571428;
18142 +      V_TargetBuy1  =     0.41428571428571;
18143 +      I_TargetBuy  = '1' ;
18144 +      U_TargetBuy  =                    1;
18145 +      END;
18146 +    ELSE DO;
18147 +      _NODE_  =                   19;
18148 +      _LEAF_  =                    7;
18149 +      P_TargetBuy0  =     0.58730158730158;
18150 +      P_TargetBuy1  =     0.41269841269841;
18151 +      Q_TargetBuy0  =     0.58730158730158;
18152 +      Q_TargetBuy1  =     0.41269841269841;
18153 +      V_TargetBuy0  =     0.66666666666666;
18154 +      V_TargetBuy1  =     0.33333333333333;
18155 +      I_TargetBuy  = '0' ;
18156 +      U_TargetBuy  =                    0;
18157 +      END;
18158 +    END;
18159 +  END;
18160 +ELSE IF  NOT MISSING(DemAge ) AND
18161 +                  44.5 <= DemAge  THEN DO;
18162 +  IF  NOT MISSING(DemAffl ) AND
18163 +                    10.5 <= DemAffl  AND
18164 +    DemAffl  <                 15.5 THEN DO;
18165 +    _NODE_  =                   12;
18166 +    _LEAF_  =                   14;
18167 +    P_TargetBuy0  =     0.73411154345006;
18168 +    P_TargetBuy1  =     0.26588845654993;
18169 +    Q_TargetBuy0  =     0.73411154345006;
18170 +    Q_TargetBuy1  =     0.26588845654993;
18171 +    V_TargetBuy0  =     0.74371859296482;
18172 +    V_TargetBuy1  =     0.25628140703517;
18173 +    I_TargetBuy  = '0' ;
18174 +    U_TargetBuy  =                    0;
18175 +    END;
18176 +  ELSE IF  NOT MISSING(DemAffl ) AND
18177 +                    15.5 <= DemAffl  THEN DO;
18178 +    _NODE_  =                   13;
18179 +    _LEAF_  =                   15;
18180 +    P_TargetBuy0  =     0.33734939759036;
18181 +    P_TargetBuy1  =     0.66265060240963;
18182 +    Q_TargetBuy0  =     0.33734939759036;
18183 +    Q_TargetBuy1  =     0.66265060240963;
18184 +    V_TargetBuy0  =     0.32926829268292;
18185 +    V_TargetBuy1  =     0.67073170731707;
18186 +    I_TargetBuy  = '1' ;
18187 +    U_TargetBuy  =                    1;
18188 +    END;
18189 +  ELSE DO;
18190 +    _NODE_  =                   11;
18191 +    _LEAF_  =                   13;
18192 +    P_TargetBuy0  =     0.89780775716694;
18193 +    P_TargetBuy1  =     0.10219224283305;
18194 +    Q_TargetBuy0  =     0.89780775716694;
18195 +    Q_TargetBuy1  =     0.10219224283305;
18196 +    V_TargetBuy0  =     0.89496855345911;
18197 +    V_TargetBuy1  =     0.10503144654088;
18198 +    I_TargetBuy  = '0' ;
18199 +    U_TargetBuy  =                    0;
18200 +    END;
18201 +  END;
18202 +ELSE DO;
18203 +  IF  NOT MISSING(DemAffl ) AND
18204 +    DemAffl  <                  8.5 THEN DO;
18205 +    _NODE_  =                    8;
18206 +    _LEAF_  =                    9;
18207 +    P_TargetBuy0  =     0.78992628992629;
18208 +    P_TargetBuy1  =     0.21007371007371;
18209 +    Q_TargetBuy0  =     0.78992628992629;
18210 +    Q_TargetBuy1  =     0.21007371007371;
18211 +    V_TargetBuy0  =     0.77220956719817;
18212 +    V_TargetBuy1  =     0.22779043280182;
18213 +    I_TargetBuy  = '0' ;
18214 +    U_TargetBuy  =                    0;
18215 +    END;
18216 +  ELSE IF  NOT MISSING(DemAffl ) AND
18217 +                     8.5 <= DemAffl  AND
18218 +    DemAffl  <                 11.5 THEN DO;
18219 +    _NODE_  =                    9;
18220 +    _LEAF_  =                   10;
18221 +    P_TargetBuy0  =     0.64932562620423;
18222 +    P_TargetBuy1  =     0.35067437379576;
18223 +    Q_TargetBuy0  =     0.64932562620423;
18224 +    Q_TargetBuy1  =     0.35067437379576;
18225 +    V_TargetBuy0  =     0.66417910447761;
18226 +    V_TargetBuy1  =     0.33582089552238;
18227 +    I_TargetBuy  = '0' ;
18228 +    U_TargetBuy  =                    0;
18229 +    END;
18230 +  ELSE DO;
18231 +    _ARBFMT_1 = PUT( DemGender , $1.);
18232 +     %DMNORMIP( _ARBFMT_1);
18233 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
18234 +      _NODE_  =                   29;
18235 +      _LEAF_  =                   11;
18236 +      P_TargetBuy0  =     0.29616724738675;
18237 +      P_TargetBuy1  =     0.70383275261324;
18238 +      Q_TargetBuy0  =     0.29616724738675;
18239 +      Q_TargetBuy1  =     0.70383275261324;
18240 +      V_TargetBuy0  =     0.38961038961038;
18241 +      V_TargetBuy1  =     0.61038961038961;
18242 +      I_TargetBuy  = '1' ;
18243 +      U_TargetBuy  =                    1;
18244 +      END;
18245 +    ELSE DO;
18246 +      _NODE_  =                   30;
18247 +      _LEAF_  =                   12;
18248 +      P_TargetBuy0  =     0.57857142857142;
18249 +      P_TargetBuy1  =     0.42142857142857;
18250 +      Q_TargetBuy0  =     0.57857142857142;
18251 +      Q_TargetBuy1  =     0.42142857142857;
18252 +      V_TargetBuy0  =     0.63302752293577;
18253 +      V_TargetBuy1  =     0.36697247706422;
18254 +      I_TargetBuy  = '0' ;
18255 +      U_TargetBuy  =                    0;
18256 +      END;
18257 +    END;
18258 +  END;
18259 +
18260 +*****  RESIDUALS R_ *************;
18261 +IF  F_TargetBuy  NE '0'
18262 +AND F_TargetBuy  NE '1'  THEN DO;
18263 +        R_TargetBuy0  = .;
18264 +        R_TargetBuy1  = .;
18265 + END;
18266 + ELSE DO;
18267 +       R_TargetBuy0  =  -P_TargetBuy0 ;
18268 +       R_TargetBuy1  =  -P_TargetBuy1 ;
18269 +       SELECT( F_TargetBuy  );
18270 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
18271 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
18272 +       END;
18273 + END;
18274 +
18275 +****************************************************************;
18276 +******          END OF DECISION TREE SCORING CODE         ******;
18277 +****************************************************************;
18278 +
18279 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18280  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
18281  quit;
18282  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18284  proc sort data=WORK.EM_USER_REPORT;
18285  by ID VIEW;
18286  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18287  *------------------------------------------------------------*;
18288  * Tree2: Computing metadata for TRAIN data;
18289  *------------------------------------------------------------*;
 
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18670  data EMWS4.Tree2_EMINFO;
18671  length TARGET KEY $32 DATA $43;
18672  input TARGET KEY DATA $;
18673  cards;
 
NOTE: The data set EMWS4.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.00 seconds
 
 
18677  run;
18678  proc sort data = EMWS4.Tree2_EMINFO NOTHREADS;
18679  by TARGET KEY;
18680  run;
 
NOTE: There were 3 observations read from the data set EMWS4.TREE2_EMINFO.
NOTE: The data set EMWS4.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
18681  proc sort data = EMWS4.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18682  by TARGET KEY;
18683  run;
 
NOTE: There were 4 observations read from the data set EMWS4.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18684  proc sort data = EMWS4.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18685  by TARGET KEY;
18686  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS4.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18687  data EMWS4.Tree2_EMINFO;
18688  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18689  by TARGET KEY;
18690  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS4.TREE2_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.00 seconds
 
 
18691  proc datasets lib=work nolist;
18692  delete TEMP_INFO SORTEDEMINFO;
18693  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18694  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS4.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS4.TREE2_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 25, 2020
Time:                11:21:49
*------------------------------------------------------------*
18718  data EMWS4.Tree2_EMOUTFIT;
18719  set EMWS4.Tree2_EMOUTFIT;
18720  length TargetLabel $200;
18721  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18722  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18723  run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMOUTFIT.
NOTE: The data set EMWS4.TREE2_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
18724  proc sort data=EMWS4.Tree2_EMREPORTFIT nothreads;
18725  by TARGET;
18726  run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMREPORTFIT.
NOTE: The data set EMWS4.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.20 seconds
      cpu time            0.04 seconds
 
 
18727  %let _EMwarndup = 0;
18728  %let _EMtargetdup =;
18729  %let _EMASEtargetdup =;
18730  data _null_;
18731  set EMWS4.Tree2_EMOUTFIT;
18732  if .<_ASE_<0.000001 then do;
18733  call symput('_EMwarndup', '1');
18734  call symput('_EMtargetdup', target);
18735  call symput('_EMASEtargetdup', put(_ASE_, best.));
18736  end;
18737  run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18738  %let EMEXCEPTIONSTRING=;
18739  *------------------------------------------------------------*;
18740  * REPORT: Tree2;
18741  *------------------------------------------------------------*;
18742  %let EM_ACTION = REPORT;
18743  %let syscc = 0;
18744  %macro main;
18745
18746    %if %upcase(&EM_ACTION) = CREATE %then %do;
18747      filename temp catalog 'sashelp.emmodl.tree_create.source';
18748      %include temp;
18749      filename temp;
18750
18751      %em_tree_create;
18752    %end;
18753
18754     %else
18755     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18756
18757         filename temp catalog 'sashelp.emmodl.tree_train.source';
18758         %include temp;
18759         filename temp;
18760         %em_tree_train;
18761     %end;
18762
18763    %else
18764    %if %upcase(&EM_ACTION) = SCORE %then %do;
18765      filename temp catalog 'sashelp.emmodl.tree_score.source';
18766      %include temp;
18767      filename temp;
18768
18769      %em_tree_score;
18770
18771    %end;
18772
18773    %else
18774    %if %upcase(&EM_ACTION) = REPORT %then %do;
18775
18776         filename temp catalog 'sashelp.emmodl.tree_report.source';
18777         %include temp;
18778         filename temp;
18779
18780         %em_tree_report;
18781     %end;
18782
18783    %else
18784    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18785
18786         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18787         %include temp;
18788         filename temp;
18789         %EM_TREE_OPENTREEVIEWER;
18790
18791     %end;
18792
18793    %else
18794    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18795
18796         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18797         %include temp;
18798         filename temp;
18799         %EM_TREE_CLOSETREEVIEWER;
18800
18801     %end;
18802
18803
18804     %doendm:
18805  %mend main;
18806
18807  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18809 +%macro em_tree_makePlotDs( multipleTar= );
18811 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18812 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18813 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18814 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18816 +  /* determine if validation statistics will be displayed */
18817 +  %let validflag=N;
18818 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18819 +    /* determine if validation data exists */
18820 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18821 +      %let validflag=Y;
18822 +    %end;
18823 +  %end;
18825 +   /* retrieve name of decmeta even in presence of multiple targets */
18826 +   %let decmeta = ;
18827 +   %if &EM_DEC_DECMETA eq %then %do;
18828 +     data _Target;
18829 +       set &em_data_variableset;
18830 +       where ROLE='TARGET' and USE in('D', 'Y');
18831 +       keep NAME;
18832 +     run;
18833 +     proc sort data=_Target;
18834 +       by NAME;
18835 +     run;
18836 +     proc sort data=EM_TARGETDECINFO;
18837 +       by TARGET;
18838 +     run;
18839 +     data _Target;
18840 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18841 +       by NAME;
18842 +       if _a then do;
18843 +         call symput('decmeta', trim(DECMETA));
18844 +       end;
18845 +     run;
18846 +     proc delete data=_Target;run;
18847 +   %end;
18848 +   %else %let decmeta = &EM_DEC_DECMETA;
18851 +  /* retrieve targetEvent from decmeta */
18852 +  %let targetEvent=;
18853 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18854 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18855 +      data _null_;
18856 +       set &DECMETA(where=(_TYPE_="TARGET"));
18857 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18858 +      run;
18859 +    %end;
18860 +  %end;
18862 +  /* retrieve predicted var for targetEvent from decmeta */
18863 +  %let predTarget=;
18864 +  %let predLvl=;
18865 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18866 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18867 +      data _null_;
18868 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18869 +       call symput('predTarget', strip(VARIABLE));
18870 +       call symput('predLvl', strip(LEVEL));
18871 +      run;
18872 +    %end;
18873 +  %end;
18874 +  %else %do;
18875 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18876 +      data _null_;
18877 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18878 +       call symput('predTarget', strip(VARIABLE));
18879 +      run;
18880 +    %end;
18881 +  %end;
18883 +  /* create BelowText value */
18884 +  data belowtext;
18885 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18886 +    keep node belowtext;
18887 +  run;
18889 +  /* replace belowtext with variable label if it exists */
18890 +  data belowtext2;
18891 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18892 +    keep node belowtextlbl;
18893 +  run;
18895 +  proc sort data=belowtext; by node; run;
18896 +  proc sort data=belowtext2; by node; run;
18898 +  data belowtext;
18899 +    merge belowtext belowtext2(in=_a);
18900 +    by node;
18901 +    if _a then belowtext=belowtextlbl;
18902 +    keep node belowtext;
18903 +  run;
18905 +  /* create AboveText value */
18906 +  data abovetext;
18907 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18908 +  run;
18909 +  proc sort data=abovetext; by node numeric_value; run;
18911 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18912 +  data abovetext;
18913 +    set abovetext(rename=(node=parent));
18914 +    by parent numeric_value;
18915 +    retain abovetext tempstring flag branch origval origchar ;
18916 +    length abovetext $256;
18917 +    length tempstring origchar $64;
18919 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18920 +      if first.parent then do;
18921 +        if missing(character_value) then do;
18922 +          numeric_value = round(numeric_value, &sp_precision);
18923 +          abovetext = "< "||strip(NUMERIC_VALUE);
18924 +          branch = 1;
18925 +          origval = numeric_value;
18926 +          output;
18927 +        end;
18928 +        else do;
18929 +          abovetext = "< "||strip(CHARACTER_VALUE);
18930 +          branch = 1;
18931 +          origchar = character_value;
18932 +          output;
18933 +        end;
18935 +        if first.parent AND last.parent then do;
18936 +          if missing(character_value) then do;
18937 +            numeric_value = round(numeric_value, &sp_precision);
18938 +            branch = branch + 1;
18939 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18940 +            output;
18941 +          end;
18942 +          else do;
18943 +            branch = branch + 1;
18944 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18945 +            output;
18946 +          end;
18947 +        end;
18948 +      end;
18949 +      else if last.parent then do;
18950 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18951 +          if missing(character_value) then do;
18952 +            numeric_value = round(numeric_value, &sp_precision);
18953 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18954 +          end;
18955 +          else do;
18956 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18957 +          end;
18958 +          branch = branch + 1;
18959 +          output;
18961 +          if missing(character_value) then do;
18962 +            numeric_value = round(numeric_value, &sp_precision);
18963 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18964 +          end;
18965 +          else do;
18966 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18967 +          end;
18968 +          branch = branch + 1;
18969 +          output;
18970 +        end;
18971 +        else do;
18972 +          if missing(character_value) then do;
18973 +            numeric_value = round(numeric_value, &sp_precision);
18974 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18975 +          end;
18976 +          else do;
18977 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18978 +          end;
18979 +          branch = branch + 1;
18980 +          output;
18981 +        end;
18982 +      end;
18983 +      else do;
18984 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18985 +          if missing(character_value) then do;
18986 +            numeric_value = round(numeric_value,&sp_precision);
18987 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18988 +            origval = numeric_value;
18989 +          end;
18990 +          else do;
18991 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18992 +            origchar = character_value;
18993 +          end;
18994 +          branch = branch + 1;
18995 +          output;
18997 +        end;
18998 +        else do;
18999 +          if missing(character_value) then do;
19000 +            numeric_value = round(numeric_value, &sp_precision);
19001 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19002 +            origval = numeric_value;
19003 +          end;
19004 +          else do;
19005 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19006 +            origval = character_value;
19007 +          end;
19008 +          branch = branch + 1;
19009 +          output;
19010 +        end;
19011 +      end;
19012 +    end;
19013 +    else do;
19014 +       if first.numeric_value then do;
19015 +         flag = 0;
19016 +         abovetext = strip(CHARACTER_VALUE);
19017 +         branch = numeric_value;
19018 +         if first.numeric_value AND last.numeric_value then do;
19019 +           output;
19020 +         end;
19021 +       end;
19022 +       else if last.numeric_value then do;
19023 +         if flag=0 then do;
19024 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19025 +           length = length(strip(tempstring));
19026 +           if length < 32 then do;
19027 +             abovetext = strip(tempstring);
19028 +           end;
19029 +           else do;
19030 +             abovetext = strip(abovetext)||", ...";
19031 +             flag = 1;
19032 +           end;
19033 +         end;
19034 +         branch = numeric_value;
19035 +         output;
19036 +       end;
19037 +       else do;
19038 +         if flag=0 then do;
19039 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19040 +           length = length(strip(tempstring));
19041 +           if length < 32 then do;
19042 +             abovetext = strip(tempstring);
19043 +           end;
19044 +           else do;
19045 +             abovetext = strip(abovetext)||", ...";
19046 +             flag=1;
19047 +           end;
19048 +         end;
19049 +         branch = numeric_value;
19050 +       end;
19051 +    end;
19052 +    keep parent branch abovetext;
19053 +  run;
19055 +  /* Missing value to abovetext */
19056 +  data tempmissing;
19057 +    set &EM_USER_OUTRULES;
19058 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19059 +    rename node=parent numeric_value=branch character_value=misschar;
19060 +  run;
19063 +  proc sort data=abovetext; by parent branch; run;
19064 +  proc sort data=tempmissing; by parent branch; run;
19065 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19067 +  data tempoutnodes;
19068 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19069 +    by parent branch;
19070 +    length traintotal validtotal 8;
19071 +    retain traintotal validtotal;
19073 +    if _a then do;
19074 +      if ^MISSING(abovetext) then do;
19075 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19076 +      end;
19077 +      else do;
19078 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19079 +      end;
19080 +    end;
19081 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19083 +    if node=1 then do;
19084 +      traintotal = N;
19085 +      validtotal=VN;
19086 +    end;
19088 +    drop role rank stat misschar belowtext;
19089 +  run;
19090 +  proc sort data=tempoutnodes; by node; run;
19091 +  proc sort data=belowtext; by node; run;
19093 +  data tempoutnodes;
19094 +    merge tempoutnodes belowtext;
19095 +    by node;
19097 +  run;
19099 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19100 +  %let adjusted = N;
19101 +  %let npriors = 0;
19102 +  data _null_ ;
19103 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19104 +    if eof then do ;
19105 +      call symput("npriors" , strip(put(_N_,best.))) ;
19106 +    end;
19107 +  run;
19108 +  %if &npriors gt 0 %then %let adjusted=Y;
19111 +  /* create a table with targetUsed and targetLevel columns for each node */
19112 +  data temptarmeta;
19113 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19114 +    %if &multipleTar eq N %then %do;
19115 +      AND USE in ('D', 'Y')
19116 +    %end;
19117 +    ));
19118 +    length TARGET $32;
19119 +    Target=name;
19120 +    keep target level;
19121 +  run;
19123 +  %if &multipleTar eq Y %then %do;
19124 +    data temptargetused;
19125 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19126 +      keep node target;
19127 +    run;
19128 +    proc sort data=temptargetused; by target; run;
19129 +    proc sort data=temptarmeta; by target; run;
19130 +    data temptargetused;
19131 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19132 +      by target;
19133 +      if _a and _b;
19134 +    run;
19135 +  %end;
19136 +  %else %do;
19137 +    data temptargetused;
19138 +      set &EM_USER_OUTSTATS;
19139 +      length target $32 tarlevel $10;
19140 +      target="%EM_TARGET";
19141 +      tarlevel="%EM_TARGET_LEVEL";
19142 +      keep node target tarlevel;
19143 +    run;
19144 +    proc sort data=temptargetused nodupkey; by node; run;
19145 +  %end;
19147 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19148 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19149 +  proc sort data=temptargetused; by node; run;
19152 +  /* create tables for all interval targets as well as all class targets */
19153 +  data tempinterval tempclass;
19154 +    merge tempoutstats temptargetused( rename=(target=targetused));
19155 +    by node;
19156 +    %if "&multipleTar" eq "Y" %then %do;
19157 +      if ((missing(Target)) OR (target=targetused ));
19158 +    %end;
19160 +    if tarlevel="INTERVAL" then output tempinterval;
19161 +    else output tempclass;
19162 +  run;
19164 +  /* initialize intTarget and classTarget flags */
19165 +  %let em_intNobs =0;
19166 +  %let em_classNobs = 0;
19167 +  %let em_intTarget= N;
19168 +  %let em_classTarget= N;
19170 +  proc sql;
19171 +    reset noprint;
19172 +    select count(*) into :em_intNobs from tempinterval;
19173 +  quit;
19174 +  proc sql;
19175 +    reset noprint;
19176 +    select count(*) into :em_classNobs from tempclass;
19177 +  quit;
19179 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19180 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19182 +  /* retrieve all information for interval targets */
19183 +  %if &em_intTarget eq Y %then %do;
19185 +    /* determine if leaf variable exists */
19186 +    %let dsid=%sysfunc(open(tempinterval,i));
19187 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19188 +    %let rc=%sysfunc(close(&dsid));
19190 +    proc transpose data=tempinterval
19191 +      %if &leafexists %then %do;
19192 +        (drop=leaf)
19193 +      %end;
19194 +      %if &validexist %then %do;
19195 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19196 +      %end;
19197 +      %else %do;
19198 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19199 +      %end;
19200 +      by node;
19201 +      id statname;
19202 +    run;
19203 +    data tempinterval;
19204 +      set tempinterval;
19205 +      if missing(N) then delete;
19206 +    run;
19207 +  %end;
19209 +  /* retrieve all information for class targets */
19210 +  %if &em_classTarget eq Y %then %do;
19211 +    proc sort data=tempclass; by node category; run;
19212 +    %if &validflag eq N %then %do;
19213 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19214 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19215 +    %end;
19216 +    %else %do;
19217 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19218 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19219 +    %end;
19220 +      set tempclass;
19222 +      %if &validflag eq N %then %do;
19223 +        %if "&adjusted" eq "N" %then %do;
19224 +          if statname="N" then output tempn;
19225 +        %end;
19226 +        %else %do;
19227 +          if statname="NPRIORS" then output tempn;
19228 +        %end;
19229 +        else if statname="PREDICTION" then output temppredict;
19230 +        else if statname="PROBABILITY" then output tempprob;
19231 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19232 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19233 +      %end;
19234 +      %else %do;
19235 +        %if "&adjusted" eq "N" %then %do;
19236 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19237 +        %end;
19238 +        %else %do;
19239 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19240 +        %end;
19241 +        else if statname="PREDICTION" then output temppredict;
19242 +        else if statname="PROBABILITY" then output tempprob;
19243 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19244 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19245 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19246 +      %end;
19247 +    run;
19250 +    /* determine if profit/loss exists in tempprofit */
19251 +    %let em_profitflag=0;
19252 +    %let em_lossflag=0;
19253 +    proc sql;
19254 +      reset noprint;
19255 +      select count(*) into :em_profitflag from tempprofit;
19256 +    quit;
19257 +    proc sql;
19258 +      reset noprint;
19259 +      select count(*) into :em_lossflag from temploss;
19260 +    quit;
19262 +    %if &validFlag eq Y %then %do;
19263 +      proc transpose data=tempn
19264 +        %if "&adjusted" eq "N" %then %do;
19265 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19266 +        %end;
19267 +        %else %do;
19268 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19269 +        %end;
19270 +        by node;
19271 +        id statname;
19272 +      run;
19273 +      %if &em_profitflag ne 0 %then %do;
19274 +        proc transpose data=tempprofit out=tempprofit;
19275 +          by node category;
19276 +          id statname ;
19277 +        run;
19278 +      %end;
19279 +      %if &em_lossflag ne 0 %then %do;
19280 +        proc transpose data=temploss out=temploss;
19281 +          by node category;
19282 +          id statname ;
19283 +        run;
19284 +      %end;
19285 +      data tempprob;
19286 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19287 +        by node
19288 +        %if &multipleTar eq Y %then %do;
19289 +          target
19290 +        %end;
19291 +        category;
19292 +      run;
19293 +    %end;
19295 +    /* store percentcorrect value */
19296 +    data temppredict;
19297 +      merge tempprob temppredict(in=_a);
19298 +      by node category;
19299 +      if _a then do;
19300 +        percentCorrect = statvalue;
19301 +        %if &validFlag eq Y %then %do;
19302 +          vpercentCorrect= vstatvalue;
19303 +        %end;
19304 +      end;
19305 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19306 +      %if &validFlag eq Y %then %do;
19307 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19308 +      %end;
19309 +      ;
19310 +      if missing(percentCorrect) then delete;
19311 +      drop target;
19312 +    run;
19314 +    /* build profittext */
19315 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19316 +      data tempprofittext(keep= node profittext profitloss);
19317 +        length profittext $800 profitloss 8.;
19318 +        retain profittext profitloss;
19320 +        merge tempprob
19321 +        %if &em_profitflag ne 0 %then %do;
19322 +          tempprofit
19323 +        %end;
19324 +        %else %if &em_lossflag ne 0 %then %do;
19325 +          temploss
19326 +        %end;
19327 +        ;
19328 +        by node category;
19330 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19331 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19332 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19333 +          %let profittype = ALL;
19334 +        %end;
19336 +        /* create the profitloss variable for nodecolor if selected */
19337 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19339 +        %if "&profittype" eq "ALL" %then %do;
19340 +          if strip(CATEGORY)="&targetEvent" then do;
19341 +            profitloss=statvalue;
19342 +          end;
19343 +          if first.node then do;
19344 +            %if &validFlag eq N %then %do;
19345 +             %if &em_profitflag ne 0 %then %do;
19346 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19347 +             %end;
19348 +             %if &em_lossflag ne 0 %then %do;
19349 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19350 +             %end;
19351 +            %end;
19352 +            %else %do;
19353 +             %if &em_profitflag ne 0 %then %do;
19354 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19354!+;
19355 +             %end;
19356 +             %if &em_lossflag ne 0 %then %do;
19357 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19358 +             %end;
19359 +            %end;
19360 +          end;
19361 +          else if last.node then do;
19362 +            %if &validFlag eq N %then %do;
19363 +             %if &em_profitflag ne 0 %then %do;
19364 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19365 +             %end;
19366 +             %if &em_lossflag ne 0 %then %do;
19367 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19368 +             %end;
19369 +             /*if CATEGORY="&targetEvent" then do;
19370 +               profitloss=statvalue;
19371 +             end;*/
19372 +            %end;
19373 +            %else %do;
19374 +             %if &em_profitflag ne 0 %then %do;
19375 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19375!+14.&EM_PROPERTY_SPLITPRECISION);
19376 +                if CATEGORY="&targetEvent" then do;
19377 +                 profitloss=ALTERNATIVE_PROFIT;
19378 +                end;
19379 +             %end;
19380 +             %if &em_lossflag ne 0 %then %do;
19381 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19381!+14.&EM_PROPERTY_SPLITPRECISION);
19382 +                if CATEGORY="&targetEvent" then do;
19383 +                  profitloss=ALTERNATIVE_LOSS;
19384 +                end;
19385 +             %end;
19386 +            %end;
19387 +            output;
19388 +          end;
19389 +          else do;
19390 +            %if &validFlag eq N %then %do;
19391 +             %if &em_profitflag ne 0 %then %do;
19392 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19393 +             %end;
19394 +             %if &em_lossflag ne 0 %then %do;
19395 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19396 +             %end;
19397 +            %end;
19398 +            %else %do;
19399 +             %if &em_profitflag ne 0 %then %do;
19400 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19400!+14.&EM_PROPERTY_SPLITPRECISION);
19401 +             %end;
19402 +             %if &em_lossflag ne 0 %then %do;
19403 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19403!+14.&EM_PROPERTY_SPLITPRECISION);
19404 +             %end;
19405 +            %end;
19406 +          end;
19407 +        %end;
19408 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19409 +          if strip(CATEGORY) = "&targetevent" then do;
19410 +            %if &validFlag eq N %then %do;
19411 +             %if &em_profitflag ne 0 %then %do;
19412 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19413 +             %end;
19414 +             %if &em_lossflag ne 0 %then %do;
19415 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19416 +             %end;
19417 +             profitloss=statvalue;
19418 +            %end;
19419 +            %else %do;
19420 +             %if &em_profitflag ne 0 %then %do;
19421 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19421!+;
19422 +                profitloss=ALTERNATIVE_PROFIT;
19423 +             %end;
19424 +             %if &em_lossflag ne 0 %then %do;
19425 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19426 +                profitloss=ALTERNATIVE_LOSS;
19427 +             %end;
19428 +            %end;
19429 +            output;
19430 +          end;
19431 +        %end;
19432 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19433 +          if strip(CATEGORY) = "&targetevent" then do;
19434 +            %if &validFlag eq N %then %do;
19435 +             profitloss=statvalue;
19436 +            %end;
19437 +            %else %do;
19438 +             %if &em_profitflag ne 0 %then %do;
19439 +                profitloss=ALTERNATIVE_PROFIT;
19440 +             %end;
19441 +             %if &em_lossflag ne 0 %then %do;
19442 +                profitloss=ALTERNATIVE_LOSS;
19443 +             %end;
19444 +            %end;
19445 +            output;
19446 +          end;
19447 +        %end;
19448 +      run;
19449 +    %end;
19451 +    data tempprob(keep= node probtext);
19452 +      length probtext $800;
19453 +      retain probtext;
19454 +      set tempprob ;
19455 +      by node;
19457 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19458 +      %let probtype = &EM_PROPERTY_TARGET;
19459 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19460 +        %let probtype = ALL;
19461 +      %end;
19463 +      %if "&probtype" eq "ALL" %then %do;
19464 +        if first.node then do;
19465 +          %if &validFlag eq N %then %do;
19466 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19467 +          %end;
19468 +          %else %do;
19469 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19470 +          %end;
19471 +        end;
19472 +        else if last.node then do;
19473 +          %if &validFlag eq N %then %do;
19474 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19475 +          %end;
19476 +          %else %do;
19477 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19478 +          %end;
19479 +          output;
19480 +        end;
19481 +        else do;
19482 +          %if &validFlag eq N %then %do;
19483 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19484 +          %end;
19485 +          %else %do;
19486 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19487 +          %end;
19488 +        end;
19489 +      %end;
19490 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19491 +        if strip(CATEGORY) = "&targetevent" then do;
19492 +          %if &validFlag eq N %then %do;
19493 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19494 +          %end;
19495 +          %else %do;
19496 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19497 +          %end;
19498 +          output;
19499 +        end;
19500 +      %end;
19501 +      %else %if "&probtype" eq "NONE" %then %do;
19502 +        if last.node then do;
19503 +          output;
19504 +        end;
19505 +      %end;
19506 +    run;
19507 +  %end;
19509 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19511 +  %let oldexists=0;
19512 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19513 +     data old_tree_plot;
19514 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19515 +        rename nodecolor=oldnodecolor;
19516 +     run;
19518 +     proc sort data=old_tree_plot;
19519 +        by node;
19520 +     run;
19522 +     %let oldexists=1;
19523 +  %end;
19525 +  data &EM_USER_TREE_PLOT;
19526 +    length textall $800;
19527 +    merge tempoutnodes temptargetused
19529 +    %if &em_intTarget eq Y %then %do;
19530 +      tempinterval
19531 +    %end;
19533 +    %if &em_classTarget eq Y %then %do;
19535 +      %if &validFlag eq N %then %do;
19536 +        tempn(rename=(statvalue=N))
19537 +      %end;
19538 +      %else %do;
19539 +        tempn
19540 +      %end;
19542 +      temppredict tempprob
19544 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19545 +        tempprofittext
19546 +      %end;
19547 +    %end;
19548 +    ;
19549 +    by node;
19551 +    /* build nodetext based on user selection */
19552 +    textall="";
19554 +    %if &em_intTarget eq Y %then %do;
19555 +    if tarlevel="INTERVAL" then do;
19556 +      /* Nodeid */
19557 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19558 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19559 +      %end;
19561 +      /* Target identifier if multiple targets are used */
19562 +      %if "&multipleTar" eq "Y" %then %do;
19563 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19564 +      %end;
19566 +      %if &validFlag eq Y %then %do;
19567 +         /* Column labels displayed in validflag eq Y only */
19568 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19569 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19569!+noquote ))";
19570 +         %end;
19572 +         /* Average values */
19573 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19574 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19575 +         %end;
19577 +         /* RASE */
19578 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19579 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19580 +         %end;
19582 +         /* Count */
19583 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19584 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19585 +         %end;
19586 +      %end;
19587 +      %else %do;
19588 +         /* Average values */
19589 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19590 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19591 +         %end;
19593 +         /* RASE */
19594 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19595 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19596 +         %end;
19598 +         /* Count */
19599 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19600 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19601 +         %end;
19602 +      %end;
19604 +      /* nodecolor */
19605 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19606 +        nodecolor=PREDICTION;
19607 +      %end;
19608 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19609 +        nodecolor=RASE;
19610 +      %end;
19611 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19612 +        nodecolor=1;
19613 +      %end;
19615 +    end;
19616 +    %end;
19617 +    %if &em_classTarget eq Y %then %do;
19618 +    if tarlevel^="INTERVAL" then  do;
19620 +      /* Nodeid */
19621 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19622 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19623 +      %end;
19624 +      /* Target identifier if multiple targets are used */
19625 +      %if "&multipleTar" eq "Y" %then %do;
19626 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19627 +      %end;
19629 +      /* Predicted values */
19630 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19631 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19632 +      %end;
19634 +      /* Column labels displayed in validflag eq Y only */
19635 +      %if "&ValidFlag" eq "Y" %then %do;
19636 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19637 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19637!+noquote ))";
19638 +        %end;
19639 +      %end;
19641 +      /* Target Values */
19642 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19643 +        textall=strip(textall)||"0A"x||strip(probtext);
19644 +      %end;
19646 +      /* include profit or loss for all target levels */
19647 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19648 +        textall=strip(textall)||"0A"x||strip(profittext);
19649 +      %end;
19651 +      %if &validFlag eq N %then %do;
19652 +        /* Percent Correct */
19653 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19654 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19655 +        %end;
19657 +         /* Count */
19658 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19659 +          %if "&adjusted" eq "N" %then %do;
19660 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19661 +          %end;
19662 +          %else %do;
19663 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19664 +          %end;
19665 +         %end;
19666 +      %end;
19667 +      %else %do;
19668 +        /* Percent Correct */
19669 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19670 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19671 +        %end;
19673 +         /* Count */
19674 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19675 +          %if "&adjusted" eq "N" %then %do;
19676 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19677 +          %end;
19678 +          %else %do;
19679 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19680 +          %end;
19681 +         %end;
19682 +      %end;
19684 +      /* nodecolor */
19685 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19686 +       %if &multipleTar ne Y %then %do;
19687 +        nodecolor=&predTarget;
19688 +       %end;
19689 +       %else %do;
19690 +         nodecolor=percentcorrect;
19691 +       %end;
19692 +      %end;
19693 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19694 +        nodecolor=percentcorrect;
19695 +      %end;
19696 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19697 +        nodecolor=1;
19698 +      %end;
19699 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19700 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19701 +          nodecolor=percentcorrect;
19702 +        %end;
19703 +        %else %do;
19704 +          nodecolor=profitloss;
19705 +        %end;
19706 +      %end;
19708 +    end;
19709 +    %end;
19710 +    %if &em_intTarget eq Y %then %do;
19711 +     drop  PREDICTION  TARGET TARLEVEL
19712 +     %if &ValidFlag eq Y %then %do;
19713 +         VPREDICTION
19714 +     %end;
19715 +     ;
19716 +    %end;
19717 +    %if &em_classTarget eq Y %then %do;
19718 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19719 +     %if &ValidFlag eq Y %then %do;
19720 +         VSTATVALUE
19721 +     %end;
19722 +     ;
19723 +    %end;
19725 +  run;
19727 +  /* add leaf index information to plotds - based on primary target only*/
19728 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19729 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19730 +      set &EM_USER_OUTSTATS;
19731 +      if ((statname="PROBABILITY"
19732 +      %if &validexist %then %do;
19733 +       or statname="VALID: PROBABILITY"
19734 +      %end;
19735 +      ) AND (CATEGORY="&TARGETEVENT")
19736 +      %if "&multipleTar" eq "Y" %then %do;
19737 +        AND (Target="%EM_TARGET")
19738 +      %end;
19739 +      );
19740 +    run;
19742 +    %if &validexist %then %do;
19743 +      proc sort data=tempprob; by node; run;
19744 +      %let vpredTarget = V%substr(&predTarget, 2);
19745 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19746 +         by node;
19747 +         id statname;
19748 +      run;
19749 +    %end;
19750 +  %end;
19751 +  %else %do;
19752 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19753 +      set &EM_USER_OUTSTATS;
19754 +      if ((statname="PREDICTION"
19755 +      %if &validexist %then %do;
19756 +       or statname="VALID: PREDICTION"
19757 +      %end;
19758 +      )
19759 +      %if "&multipleTar" eq "Y" %then %do;
19760 +        AND (Target="%EM_TARGET")
19761 +      %end;
19762 +      );
19763 +    run;
19764 +    %if &validexist %then %do;
19765 +      proc sort data=tempprob; by node; run;
19766 +      %let vpredTarget = V%substr(&predTarget, 2);
19767 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19768 +         by node;
19769 +         id statname;
19770 +      run;
19771 +    %end;
19772 +  %end;
19774 +  proc sort data=tempprob; by node; run;
19775 +  data tempoutnodes;
19776 +    merge tempoutnodes tempprob;
19777 +    by node;
19778 +  run;
19780 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19781 +  data tempnodes;
19782 +    retain traintotal validtotal;
19783 +    set tempnodes(where=(leaf ne . ));
19784 +    tprob=round(&predTarget, .01);
19785 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19786 +      percevent_train=round(tprob*100, .01);
19787 +    %end;
19788 +    %else %do;
19789 +      percevent_train=tprob;
19790 +    %end;
19792 +    perc_train=round((n/traintotal)*100, 0.01);
19793 +    /* leafwidth already has a *10 multiplier */
19794 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19796 +    %if &validexist %then %do;
19797 +      %let vpredTarget = V%substr(&predTarget,2);
19798 +      vprob=round(&vpredTarget, .01);
19799 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19800 +        percevent_valid=round(vprob*100, .01);
19801 +      %end;
19802 +      %else %do;
19803 +        percevent_valid=vprob;
19804 +      %end;
19805 +      perc_valid=round((vn/validtotal)*100, .01);
19806 +    %end;
19808 +    index=_N_;
19809 +    keep node index tprob perc_train percevent_train
19810 +    %if &validexist %then %do;
19811 +        vprob percevent_valid perc_valid
19812 +    %end;
19813 +    ;
19814 +  run;
19815 +  proc sort data=tempnodes; by node; run;
19816 +  data &EM_USER_TREE_PLOT;
19817 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19818 +    by node;
19819 +    if missing(node) then delete;
19820 +    %if &oldexists %then %do;
19821 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19822 +      drop oldnodecolor;
19823 +    %end;
19824 +    abovetext = compbl(abovetext);
19826 +    /* add variable labels */
19827 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19828 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19829 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19830 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19831 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19832 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19834 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19835 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19836 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19837 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19838 +          %end;
19839 +          %else %do;
19840 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19841 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19842 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19843 +          %end;
19844 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19846 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19847 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19848 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19849 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19850 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19851 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19852 +          %end;
19853 +          %else %do;
19854 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19855 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19856 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19857 +          %end;
19858 +    ;
19859 +  run;
19861 +  /* delete temporary tables */
19862 +  proc datasets lib=work nolist;
19863 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19864 +  run;
19866 +%mend em_tree_makePlotDs;
19870 +%macro em_tree_report;
19872 +   /* report properties */
19873 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19874 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19875 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19876 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19877 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19878 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19879 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19880 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19881 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19882 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19883 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19884 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19885 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19887 +   %let validexist=0;
19888 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19889 +     %let validexist=1;
19890 +   %end;
19892 +   /* determine if multiple targets will be processed */
19893 +   %let em_tree_multipleTargets=N;
19894 +   %let em_tree_numTarget=1;
19895 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19896 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19897 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19898 +         %let em_tree_multipleTargets=N;
19899 +      %end;
19900 +      %else %do;
19901 +        data _null_;
19902 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19903 +          if eof then
19904 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19905 +        run;
19907 +        %if &em_tree_numTarget gt 1 %then %do;
19908 +           %let em_tree_multipleTargets=Y;
19909 +        %end;
19910 +     %end;
19911 +   %end;
19913 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19915 +   /* variable importance */
19916 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19917 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19919 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19920 +     /* and the columns may not be generated                                                                                 */
19921 +     %let em_tree_cvexists=;
19922 +     %let em_tree_surrexists=.;
19923 +     data _null_;
19924 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19925 +       if eof then do ;
19926 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19927 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19928 +       end;
19929 +     run;
19931 +     data &EM_USER_OUTIMPORT;
19932 +         set &EM_USER_OUTIMPORT;
19933 +         /* format columns based on Precison value specified */
19934 +         format importance 15.&EM_PROPERTY_PRECISION
19935 +              %if &validexist %then %do;
19936 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19937 +              %end;
19938 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19939 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19940 +              %end;
19941 +         ;
19942 +     run;
19944 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19945 +     proc print data=&EM_USER_OUTIMPORT
19946 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19947 +          (where=((nrules>0) OR (nsurrogates>0)))
19948 +        %end;
19949 +        %else %do;
19950 +           (where=(nrules>0))
19951 +        %end;
19952 +        label noobs
19953 +        ;
19954 +     run;
19955 +     title10;
19957 +   %end;
19959 +   /* Sequence */
19960 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19961 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19962 +   data _null_ ;
19963 +      set &EM_USER_outseq (obs=2) end=eof ;
19964 +      if eof then do ;
19965 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19966 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19967 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19968 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19969 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19970 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19971 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19972 +      end;
19973 +    run;
19975 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19976 +      data &EM_USER_OUTSEQ;
19977 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19978 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19979 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19980 +           _XMISC_=_VMISC_
19981 +        %end;
19982 +        %if "&em_tree_aprof" ne "."  %then %do;
19983 +           _XAPROF_=_VAPROF_
19984 +           _XPROF_ = _VPROF_
19985 +        %end;
19986 +        %if "&em_tree_aloss" ne "."  %then %do;
19987 +           _XALOSS_=_VALOSS_
19988 +        %end;
19989 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19990 +           _XPASE_ = _VPASE_
19991 +           _XPMISC_ = _VPMISC_
19992 +        %end;
19994 +        ));
19995 +     %end;
19996 +     %else %do;
19997 +        set &EM_USER_OUTSEQ;
19998 +     %end;
20000 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20001 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20002 +            _MISC_   15.&EM_PROPERTY_PRECISION
20003 +         %end;
20004 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20005 +            _PASE_  15.&EM_PROPERTY_PRECISION
20006 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20007 +         %end;
20008 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20009 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20010 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20011 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20012 +            %end;
20013 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20014 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20015 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20016 +            %end;
20017 +         %end;
20018 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20019 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20020 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20021 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20022 +            %end;
20023 +         %end;
20024 +         %if "&em_tree_seq" ne "." %then %do;
20025 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20026 +         %end;
20027 +         %if "&em_tree_vseq" ne "." %then %do;
20028 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20029 +         %end;
20030 +         %if "&em_tree_aprof" ne "." %then %do;
20031 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20032 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20033 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20034 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20035 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20036 +           %end;
20037 +         %end;
20038 +         %else %if "&em_tree_aloss" ne "." %then %do;
20039 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20040 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20041 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20042 +           %end;
20043 +         %end;
20044 +      ;
20045 +    run;
20046 +   %end;
20048 +   /* Observation Based Importance */
20049 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20051 +      /* need to check for 0 obs */
20052 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20053 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20054 +      %let rc=%sysfunc(close(&dsid));
20056 +      %if &onobs %then %do;
20057 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20058 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20060 +         data &EM_USER_OUTOBSIMP;
20061 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20062 +           if _a;
20063 +           by _INPUT1_;
20064 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20065 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20066 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20067 +                   %end;
20068 +                   ;
20069 +         run;
20070 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20071 +      %end;
20072 +   %end;
20074 +  %end;
20076 +  /* create dataset to support tree diagram and icicle plot */
20077 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20078 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20080 +  /* display tree diagram */
20081 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20082 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20084 +  /* display icicle diagram */
20085 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20086 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20088 +  /* Leaf Statistics Plot */
20089 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20091 +  /* print leaf information to output window */
20092 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20094 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20095 +       by descending N;
20096 +     run;
20098 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20099 +     %local vn;
20100 +     data _null_;
20101 +       set t (obs=2) end=eof;
20102 +       if eof then do;
20103 +         call symput("vn", strip(put(vn, best.)));
20104 +       end;
20105 +     run;
20107 +     data t;
20108 +       set t;
20109 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20110 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20111 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20112 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20113 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20114 +       %end;
20115 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20116 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20117 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20118 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20119 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20120 +          %end;
20121 +       %end;
20122 +       ;
20123 +     run;
20125 +     /* determine if rase is found in t */
20126 +    %let dsid=%sysfunc(open(t,i));
20127 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20128 +    %let rc=%sysfunc(close(&dsid));
20130 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20131 +     proc print data=t noobs label;
20132 +       where tprob ne .;
20133 +       var node depth N tprob
20134 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20135 +         %if "&vn" ne "." %then %do;
20136 +           VN
20137 +         %end;
20138 +         vprob
20139 +       %end;
20140 +       %if &raseexists %then %do;
20141 +            RASE
20142 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20143 +              VRASE
20144 +            %end;
20145 +       %end;
20146 +       ;
20147 +     run;
20148 +     title10;
20149 +  %end;
20151 +  /* create plots that are done during training of node */
20152 +  /* display iterative plot, including reference line */
20153 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20154 +   /* %if &nleaves eq  %then %do; */
20155 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20156 +      data _null_;
20157 +        set &EM_USER_OUTTOPOLOGY end=eof;
20158 +        if eof then do;
20159 +          call symput('nleaves', LEAF);
20160 +        end;
20161 +      run;
20162 +   /* %end; */
20164 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20165 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20166 +  %end;
20168 +  /* display leaf statistics */
20169 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20171 +  /* stats by node if multiple targets = Y */
20172 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20173 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20174 +    data &EM_USER_OUTSTATS;
20175 +      set &EM_USER_OUTSTATS;
20177 +     * if STATNAME="TARGET" then delete;
20178 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20179 +      drop leaf;
20180 +    run;
20181 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20183 +  %end;
20184 +  %else %do;
20185 +    /* add outstats and outdescribe to spk but not results */
20186 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20187 +  %end;
20189 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: The data set EMWS4.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS4.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 36 observations read from the data set EMWS4.TREE2_OUTSEQ.
NOTE: The data set EMWS4.TREE2_OUTSEQ has 36 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 18 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 18 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 326 observations read from the data set EMWS4.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 22 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS4.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS4.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 161 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 138 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 161 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 161 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 161 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 161 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 161 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 23 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 46 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 46 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 23 observations read from the data set WORK.TEMPN.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS4.TREE2_TREE_PLOT has 23 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 161 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 23 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 15 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS4.TREE2_TREE_PLOT.
NOTE: There were 15 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS4.TREE2_TREE_PLOT has 23 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS4.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 23 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 23 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 23 observations read from the data set EMWS4.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
20190
20191  *------------------------------------------------------------*;
20192  * End REPORT: Tree2;
20193  *------------------------------------------------------------*;
 
20194  /* Reset EM Options */
20195  options formchar="|----|+|---+=|-/\<>*";
20196  options nocenter ls=256 ps=10000;
20197  goptions reset=all device=GIF NODISPLAY;
 
20198  proc sort data=WORK.EM_USER_REPORT;
20199  by ID VIEW;
20200  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20201  proc sort data=EMWS4.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20202  by NAME;
20203  run;
 
NOTE: There were 14 observations read from the data set EMWS4.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20204  proc sort data=EMWS4.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20205  by NAME;
20206  run;
 
NOTE: There were 14 observations read from the data set EMWS4.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20207  data WORK.ASSESS_META;
20208  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20209  by NAME;
20210  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20211  data EM_temp_assessMeta;
20212  set EMWS4.Tree2_CMeta_TRAIN;
20213  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20214  run;
 
NOTE: There were 12 observations read from the data set EMWS4.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
20215  data EM_temp_assessdata;
20216  set EMWS4.Tree2_TRAIN(keep=
20217  F_TargetBuy
20218  I_TargetBuy
20219  P_TargetBuy0
20220  P_TargetBuy1
20221  Q_TargetBuy0
20222  Q_TargetBuy1
20223  R_TargetBuy0
20224  R_TargetBuy1
20225  U_TargetBuy
20226  V_TargetBuy0
20227  V_TargetBuy1
20228  _WARN_
20229  TargetBuy
20230  );
20231  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 11112 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS4.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 11112 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24513   data EM_temp_assessMeta;
24514   set EMWS4.Tree2_CMeta_TRAIN;
24515   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24516   run;
 
NOTE: There were 12 observations read from the data set EMWS4.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24517   data EM_temp_assessdata;
24518   set EMWS4.Tree2_VALIDATE(keep=
24519   F_TargetBuy
24520   I_TargetBuy
24521   P_TargetBuy0
24522   P_TargetBuy1
24523   Q_TargetBuy0
24524   Q_TargetBuy1
24525   R_TargetBuy0
24526   R_TargetBuy1
24527   U_TargetBuy
24528   V_TargetBuy0
24529   V_TargetBuy1
24530   _WARN_
24531   TargetBuy
24532   );
24533   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 5983 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 5983 observations read from the data set EMWS4.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 5983 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28824   %let _cn = %sysfunc(getoption(CENTER));
28825   options nocenter;
28826   proc print data=EMWS4.Tree2_EMREPORTFIT noobs label;
28827   var STAT LABEL TRAIN
28828   VALIDATE
28829   TEST
28830   ;
28831   by TARGET TARGETLABEL;
28832   title9 ' ';
28833   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28834   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28835   title10;
28836   options &_cn;
 
28837   proc sort data=EMWS4.Tree2_EMCLASSIFICATION nothreads;
28838   by DATAROLE TARGET TARGETLABEL;
28839   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS4.TREE2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
 
 
28840   %let _cn = %sysfunc(getoption(CENTER));
28841   options nocenter;
28842   proc print data=EMWS4.Tree2_EMCLASSIFICATION noobs label;
28843   var from into pct_row pct_col count percent
28844   ;
28845   by DATAROLE TARGET TARGETLABEL;
28846   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28847   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28848   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28849   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28850   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28851   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28852   where _TYPE_='PREDICTION';
28853   title9 ' ';
28854   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28855   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28856   title9;
28857   title10;
28858   options &_cn;
 
28859   %let _cn = %sysfunc(getoption(CENTER));
28860   options nocenter;
28861   data EMWS4.Tree2_EMEVENTREPORT;
28862   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
28863   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28863 ! FALSEEVENT
28864   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28865      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28866   FALSEEVENT=0;
28867   FALSENEVENT=0;
28868   TRUEEVENT=0;
28869   TRUENEVENT=0;
28870   set EMWS4.Tree2_EMEVENTREPORT;
28871   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS4.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
28872   proc print data=EMWS4.Tree2_EMEVENTREPORT noobs label;
28873   title9 ' ';
28874   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28875   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28876   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28877   title10;
28878   options &_cn;
 
28879   proc datasets library=EMWS4 nolist;
28880   modify Tree2_EMRANK;
28881   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28882   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28883   run;
 
NOTE: MODIFY was successful for EMWS4.TREE2_EMRANK.DATA.
28884   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
28885   %let _cn = %sysfunc(getoption(CENTER));
28886   options nocenter;
28887   proc print data=EMWS4.Tree2_EMRANK label noobs;
28888   var
28889   decile gain lift liftc resp respc N _meanP_;
28890   by
28891   notsorted DATAROLE
28892   notsorted TARGET
28893   notsorted TARGETLABEL
28894   ;
28895   title9 ' ';
28896   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28897   run;
 
NOTE: There were 40 observations read from the data set EMWS4.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28898   title10;
28899   options &_cn;
 
28900   proc datasets library=EMWS4 nolist;
28901   modify Tree2_EMSCOREDIST;
28902   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28903   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28904   run;
 
NOTE: MODIFY was successful for EMWS4.TREE2_EMSCOREDIST.DATA.
28905   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
