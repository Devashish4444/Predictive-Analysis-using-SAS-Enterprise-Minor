*------------------------------------------------------------*
* Report Log
Date:                April 24, 2020
Time:                19:40:56
*------------------------------------------------------------*
18902  data EMWS3.Tree2_EMOUTFIT;
18903  set EMWS3.Tree2_EMOUTFIT;
18904  length TargetLabel $200;
18905  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18906  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18907  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE2_EMOUTFIT.
NOTE: The data set EMWS3.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
      

18908  proc sort data=EMWS3.Tree2_EMREPORTFIT nothreads;
18909  by TARGET;
18910  run;

NOTE: There were 8 observations read from the data set EMWS3.TREE2_EMREPORTFIT.
NOTE: The data set EMWS3.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.17 seconds
      cpu time            0.01 seconds
      

18911  %let _EMwarndup = 0;
18912  %let _EMtargetdup =;
18913  %let _EMASEtargetdup =;
18914  data _null_;
18915  set EMWS3.Tree2_EMOUTFIT;
18916  if .<_ASE_<0.000001 then do;
18917  call symput('_EMwarndup', '1');
18918  call symput('_EMtargetdup', target);
18919  call symput('_EMASEtargetdup', put(_ASE_, best.));
18920  end;
18921  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18922  %let EMEXCEPTIONSTRING=;
18923  *------------------------------------------------------------*;
18924  * REPORT: Tree2;
18925  *------------------------------------------------------------*;
18926  %let EM_ACTION = REPORT;
18927  %let syscc = 0;
18928  %macro main;
18929  
18930    %if %upcase(&EM_ACTION) = CREATE %then %do;
18931      filename temp catalog 'sashelp.emmodl.tree_create.source';
18932      %include temp;
18933      filename temp;
18934  
18935      %em_tree_create;
18936    %end;
18937  
18938     %else
18939     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18940  
18941         filename temp catalog 'sashelp.emmodl.tree_train.source';
18942         %include temp;
18943         filename temp;
18944         %em_tree_train;
18945     %end;
18946  
18947    %else
18948    %if %upcase(&EM_ACTION) = SCORE %then %do;
18949      filename temp catalog 'sashelp.emmodl.tree_score.source';
18950      %include temp;
18951      filename temp;
18952  
18953      %em_tree_score;
18954  
18955    %end;
18956  
18957    %else
18958    %if %upcase(&EM_ACTION) = REPORT %then %do;
18959  
18960         filename temp catalog 'sashelp.emmodl.tree_report.source';
18961         %include temp;
18962         filename temp;
18963  
18964         %em_tree_report;
18965     %end;
18966  
18967    %else
18968    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18969  
18970         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18971         %include temp;
18972         filename temp;
18973         %EM_TREE_OPENTREEVIEWER;
18974  
18975     %end;
18976  
18977    %else
18978    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18979  
18980         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18981         %include temp;
18982         filename temp;
18983         %EM_TREE_CLOSETREEVIEWER;
18984  
18985     %end;
18986  
18987  
18988     %doendm:
18989  %mend main;
18990  
18991  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18993 +%macro em_tree_makePlotDs( multipleTar= );
18995 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18996 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18997 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18998 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19000 +  /* determine if validation statistics will be displayed */
19001 +  %let validflag=N;
19002 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19003 +    /* determine if validation data exists */
19004 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19005 +      %let validflag=Y;
19006 +    %end;
19007 +  %end;
19009 +   /* retrieve name of decmeta even in presence of multiple targets */
19010 +   %let decmeta = ;
19011 +   %if &EM_DEC_DECMETA eq %then %do;
19012 +     data _Target;
19013 +       set &em_data_variableset;
19014 +       where ROLE='TARGET' and USE in('D', 'Y');
19015 +       keep NAME;
19016 +     run;
19017 +     proc sort data=_Target;
19018 +       by NAME;
19019 +     run;
19020 +     proc sort data=EM_TARGETDECINFO;
19021 +       by TARGET;
19022 +     run;
19023 +     data _Target;
19024 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19025 +       by NAME;
19026 +       if _a then do;
19027 +         call symput('decmeta', trim(DECMETA));
19028 +       end;
19029 +     run;
19030 +     proc delete data=_Target;run;
19031 +   %end;
19032 +   %else %let decmeta = &EM_DEC_DECMETA;
19035 +  /* retrieve targetEvent from decmeta */
19036 +  %let targetEvent=;
19037 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19038 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19039 +      data _null_;
19040 +       set &DECMETA(where=(_TYPE_="TARGET"));
19041 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19042 +      run;
19043 +    %end;
19044 +  %end;
19046 +  /* retrieve predicted var for targetEvent from decmeta */
19047 +  %let predTarget=;
19048 +  %let predLvl=;
19049 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19050 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19051 +      data _null_;
19052 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19053 +       call symput('predTarget', strip(VARIABLE));
19054 +       call symput('predLvl', strip(LEVEL));
19055 +      run;
19056 +    %end;
19057 +  %end;
19058 +  %else %do;
19059 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19060 +      data _null_;
19061 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19062 +       call symput('predTarget', strip(VARIABLE));
19063 +      run;
19064 +    %end;
19065 +  %end;
19067 +  /* create BelowText value */
19068 +  data belowtext;
19069 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19070 +    keep node belowtext;
19071 +  run;
19073 +  /* replace belowtext with variable label if it exists */
19074 +  data belowtext2;
19075 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19076 +    keep node belowtextlbl;
19077 +  run;
19079 +  proc sort data=belowtext; by node; run;
19080 +  proc sort data=belowtext2; by node; run;
19082 +  data belowtext;
19083 +    merge belowtext belowtext2(in=_a);
19084 +    by node;
19085 +    if _a then belowtext=belowtextlbl;
19086 +    keep node belowtext;
19087 +  run;
19089 +  /* create AboveText value */
19090 +  data abovetext;
19091 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19092 +  run;
19093 +  proc sort data=abovetext; by node numeric_value; run;
19095 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19096 +  data abovetext;
19097 +    set abovetext(rename=(node=parent));
19098 +    by parent numeric_value;
19099 +    retain abovetext tempstring flag branch origval origchar ;
19100 +    length abovetext $256;
19101 +    length tempstring origchar $64;
19103 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19104 +      if first.parent then do;
19105 +        if missing(character_value) then do;
19106 +          numeric_value = round(numeric_value, &sp_precision);
19107 +          abovetext = "< "||strip(NUMERIC_VALUE);
19108 +          branch = 1;
19109 +          origval = numeric_value;
19110 +          output;
19111 +        end;
19112 +        else do;
19113 +          abovetext = "< "||strip(CHARACTER_VALUE);
19114 +          branch = 1;
19115 +          origchar = character_value;
19116 +          output;
19117 +        end;
19119 +        if first.parent AND last.parent then do;
19120 +          if missing(character_value) then do;
19121 +            numeric_value = round(numeric_value, &sp_precision);
19122 +            branch = branch + 1;
19123 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19124 +            output;
19125 +          end;
19126 +          else do;
19127 +            branch = branch + 1;
19128 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19129 +            output;
19130 +          end;
19131 +        end;
19132 +      end;
19133 +      else if last.parent then do;
19134 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19135 +          if missing(character_value) then do;
19136 +            numeric_value = round(numeric_value, &sp_precision);
19137 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19138 +          end;
19139 +          else do;
19140 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19141 +          end;
19142 +          branch = branch + 1;
19143 +          output;
19145 +          if missing(character_value) then do;
19146 +            numeric_value = round(numeric_value, &sp_precision);
19147 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19148 +          end;
19149 +          else do;
19150 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19151 +          end;
19152 +          branch = branch + 1;
19153 +          output;
19154 +        end;
19155 +        else do;
19156 +          if missing(character_value) then do;
19157 +            numeric_value = round(numeric_value, &sp_precision);
19158 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19159 +          end;
19160 +          else do;
19161 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19162 +          end;
19163 +          branch = branch + 1;
19164 +          output;
19165 +        end;
19166 +      end;
19167 +      else do;
19168 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19169 +          if missing(character_value) then do;
19170 +            numeric_value = round(numeric_value,&sp_precision);
19171 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19172 +            origval = numeric_value;
19173 +          end;
19174 +          else do;
19175 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19176 +            origchar = character_value;
19177 +          end;
19178 +          branch = branch + 1;
19179 +          output;
19181 +        end;
19182 +        else do;
19183 +          if missing(character_value) then do;
19184 +            numeric_value = round(numeric_value, &sp_precision);
19185 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19186 +            origval = numeric_value;
19187 +          end;
19188 +          else do;
19189 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19190 +            origval = character_value;
19191 +          end;
19192 +          branch = branch + 1;
19193 +          output;
19194 +        end;
19195 +      end;
19196 +    end;
19197 +    else do;
19198 +       if first.numeric_value then do;
19199 +         flag = 0;
19200 +         abovetext = strip(CHARACTER_VALUE);
19201 +         branch = numeric_value;
19202 +         if first.numeric_value AND last.numeric_value then do;
19203 +           output;
19204 +         end;
19205 +       end;
19206 +       else if last.numeric_value then do;
19207 +         if flag=0 then do;
19208 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19209 +           length = length(strip(tempstring));
19210 +           if length < 32 then do;
19211 +             abovetext = strip(tempstring);
19212 +           end;
19213 +           else do;
19214 +             abovetext = strip(abovetext)||", ...";
19215 +             flag = 1;
19216 +           end;
19217 +         end;
19218 +         branch = numeric_value;
19219 +         output;
19220 +       end;
19221 +       else do;
19222 +         if flag=0 then do;
19223 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19224 +           length = length(strip(tempstring));
19225 +           if length < 32 then do;
19226 +             abovetext = strip(tempstring);
19227 +           end;
19228 +           else do;
19229 +             abovetext = strip(abovetext)||", ...";
19230 +             flag=1;
19231 +           end;
19232 +         end;
19233 +         branch = numeric_value;
19234 +       end;
19235 +    end;
19236 +    keep parent branch abovetext;
19237 +  run;
19239 +  /* Missing value to abovetext */
19240 +  data tempmissing;
19241 +    set &EM_USER_OUTRULES;
19242 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19243 +    rename node=parent numeric_value=branch character_value=misschar;
19244 +  run;
19247 +  proc sort data=abovetext; by parent branch; run;
19248 +  proc sort data=tempmissing; by parent branch; run;
19249 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19251 +  data tempoutnodes;
19252 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19253 +    by parent branch;
19254 +    length traintotal validtotal 8;
19255 +    retain traintotal validtotal;
19257 +    if _a then do;
19258 +      if ^MISSING(abovetext) then do;
19259 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19260 +      end;
19261 +      else do;
19262 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19263 +      end;
19264 +    end;
19265 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19267 +    if node=1 then do;
19268 +      traintotal = N;
19269 +      validtotal=VN;
19270 +    end;
19272 +    drop role rank stat misschar belowtext;
19273 +  run;
19274 +  proc sort data=tempoutnodes; by node; run;
19275 +  proc sort data=belowtext; by node; run;
19277 +  data tempoutnodes;
19278 +    merge tempoutnodes belowtext;
19279 +    by node;
19281 +  run;
19283 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19284 +  %let adjusted = N;
19285 +  %let npriors = 0;
19286 +  data _null_ ;
19287 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19288 +    if eof then do ;
19289 +      call symput("npriors" , strip(put(_N_,best.))) ;
19290 +    end;
19291 +  run;
19292 +  %if &npriors gt 0 %then %let adjusted=Y;
19295 +  /* create a table with targetUsed and targetLevel columns for each node */
19296 +  data temptarmeta;
19297 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19298 +    %if &multipleTar eq N %then %do;
19299 +      AND USE in ('D', 'Y')
19300 +    %end;
19301 +    ));
19302 +    length TARGET $32;
19303 +    Target=name;
19304 +    keep target level;
19305 +  run;
19307 +  %if &multipleTar eq Y %then %do;
19308 +    data temptargetused;
19309 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19310 +      keep node target;
19311 +    run;
19312 +    proc sort data=temptargetused; by target; run;
19313 +    proc sort data=temptarmeta; by target; run;
19314 +    data temptargetused;
19315 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19316 +      by target;
19317 +      if _a and _b;
19318 +    run;
19319 +  %end;
19320 +  %else %do;
19321 +    data temptargetused;
19322 +      set &EM_USER_OUTSTATS;
19323 +      length target $32 tarlevel $10;
19324 +      target="%EM_TARGET";
19325 +      tarlevel="%EM_TARGET_LEVEL";
19326 +      keep node target tarlevel;
19327 +    run;
19328 +    proc sort data=temptargetused nodupkey; by node; run;
19329 +  %end;
19331 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19332 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19333 +  proc sort data=temptargetused; by node; run;
19336 +  /* create tables for all interval targets as well as all class targets */
19337 +  data tempinterval tempclass;
19338 +    merge tempoutstats temptargetused( rename=(target=targetused));
19339 +    by node;
19340 +    %if "&multipleTar" eq "Y" %then %do;
19341 +      if ((missing(Target)) OR (target=targetused ));
19342 +    %end;
19344 +    if tarlevel="INTERVAL" then output tempinterval;
19345 +    else output tempclass;
19346 +  run;
19348 +  /* initialize intTarget and classTarget flags */
19349 +  %let em_intNobs =0;
19350 +  %let em_classNobs = 0;
19351 +  %let em_intTarget= N;
19352 +  %let em_classTarget= N;
19354 +  proc sql;
19355 +    reset noprint;
19356 +    select count(*) into :em_intNobs from tempinterval;
19357 +  quit;
19358 +  proc sql;
19359 +    reset noprint;
19360 +    select count(*) into :em_classNobs from tempclass;
19361 +  quit;
19363 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19364 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19366 +  /* retrieve all information for interval targets */
19367 +  %if &em_intTarget eq Y %then %do;
19369 +    /* determine if leaf variable exists */
19370 +    %let dsid=%sysfunc(open(tempinterval,i));
19371 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19372 +    %let rc=%sysfunc(close(&dsid));
19374 +    proc transpose data=tempinterval
19375 +      %if &leafexists %then %do;
19376 +        (drop=leaf)
19377 +      %end;
19378 +      %if &validexist %then %do;
19379 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19380 +      %end;
19381 +      %else %do;
19382 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19383 +      %end;
19384 +      by node;
19385 +      id statname;
19386 +    run;
19387 +    data tempinterval;
19388 +      set tempinterval;
19389 +      if missing(N) then delete;
19390 +    run;
19391 +  %end;
19393 +  /* retrieve all information for class targets */
19394 +  %if &em_classTarget eq Y %then %do;
19395 +    proc sort data=tempclass; by node category; run;
19396 +    %if &validflag eq N %then %do;
19397 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19398 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19399 +    %end;
19400 +    %else %do;
19401 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19402 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19403 +    %end;
19404 +      set tempclass;
19406 +      %if &validflag eq N %then %do;
19407 +        %if "&adjusted" eq "N" %then %do;
19408 +          if statname="N" then output tempn;
19409 +        %end;
19410 +        %else %do;
19411 +          if statname="NPRIORS" then output tempn;
19412 +        %end;
19413 +        else if statname="PREDICTION" then output temppredict;
19414 +        else if statname="PROBABILITY" then output tempprob;
19415 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19416 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19417 +      %end;
19418 +      %else %do;
19419 +        %if "&adjusted" eq "N" %then %do;
19420 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19421 +        %end;
19422 +        %else %do;
19423 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19424 +        %end;
19425 +        else if statname="PREDICTION" then output temppredict;
19426 +        else if statname="PROBABILITY" then output tempprob;
19427 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19428 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19429 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19430 +      %end;
19431 +    run;
19434 +    /* determine if profit/loss exists in tempprofit */
19435 +    %let em_profitflag=0;
19436 +    %let em_lossflag=0;
19437 +    proc sql;
19438 +      reset noprint;
19439 +      select count(*) into :em_profitflag from tempprofit;
19440 +    quit;
19441 +    proc sql;
19442 +      reset noprint;
19443 +      select count(*) into :em_lossflag from temploss;
19444 +    quit;
19446 +    %if &validFlag eq Y %then %do;
19447 +      proc transpose data=tempn
19448 +        %if "&adjusted" eq "N" %then %do;
19449 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19450 +        %end;
19451 +        %else %do;
19452 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19453 +        %end;
19454 +        by node;
19455 +        id statname;
19456 +      run;
19457 +      %if &em_profitflag ne 0 %then %do;
19458 +        proc transpose data=tempprofit out=tempprofit;
19459 +          by node category;
19460 +          id statname ;
19461 +        run;
19462 +      %end;
19463 +      %if &em_lossflag ne 0 %then %do;
19464 +        proc transpose data=temploss out=temploss;
19465 +          by node category;
19466 +          id statname ;
19467 +        run;
19468 +      %end;
19469 +      data tempprob;
19470 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19471 +        by node
19472 +        %if &multipleTar eq Y %then %do;
19473 +          target
19474 +        %end;
19475 +        category;
19476 +      run;
19477 +    %end;
19479 +    /* store percentcorrect value */
19480 +    data temppredict;
19481 +      merge tempprob temppredict(in=_a);
19482 +      by node category;
19483 +      if _a then do;
19484 +        percentCorrect = statvalue;
19485 +        %if &validFlag eq Y %then %do;
19486 +          vpercentCorrect= vstatvalue;
19487 +        %end;
19488 +      end;
19489 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19490 +      %if &validFlag eq Y %then %do;
19491 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19492 +      %end;
19493 +      ;
19494 +      if missing(percentCorrect) then delete;
19495 +      drop target;
19496 +    run;
19498 +    /* build profittext */
19499 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19500 +      data tempprofittext(keep= node profittext profitloss);
19501 +        length profittext $800 profitloss 8.;
19502 +        retain profittext profitloss;
19504 +        merge tempprob
19505 +        %if &em_profitflag ne 0 %then %do;
19506 +          tempprofit
19507 +        %end;
19508 +        %else %if &em_lossflag ne 0 %then %do;
19509 +          temploss
19510 +        %end;
19511 +        ;
19512 +        by node category;
19514 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19515 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19516 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19517 +          %let profittype = ALL;
19518 +        %end;
19520 +        /* create the profitloss variable for nodecolor if selected */
19521 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19523 +        %if "&profittype" eq "ALL" %then %do;
19524 +          if strip(CATEGORY)="&targetEvent" then do;
19525 +            profitloss=statvalue;
19526 +          end;
19527 +          if first.node then do;
19528 +            %if &validFlag eq N %then %do;
19529 +             %if &em_profitflag ne 0 %then %do;
19530 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19531 +             %end;
19532 +             %if &em_lossflag ne 0 %then %do;
19533 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19534 +             %end;
19535 +            %end;
19536 +            %else %do;
19537 +             %if &em_profitflag ne 0 %then %do;
19538 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19538!+;
19539 +             %end;
19540 +             %if &em_lossflag ne 0 %then %do;
19541 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19542 +             %end;
19543 +            %end;
19544 +          end;
19545 +          else if last.node then do;
19546 +            %if &validFlag eq N %then %do;
19547 +             %if &em_profitflag ne 0 %then %do;
19548 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19549 +             %end;
19550 +             %if &em_lossflag ne 0 %then %do;
19551 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19552 +             %end;
19553 +             /*if CATEGORY="&targetEvent" then do;
19554 +               profitloss=statvalue;
19555 +             end;*/
19556 +            %end;
19557 +            %else %do;
19558 +             %if &em_profitflag ne 0 %then %do;
19559 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19559!+14.&EM_PROPERTY_SPLITPRECISION);
19560 +                if CATEGORY="&targetEvent" then do;
19561 +                 profitloss=ALTERNATIVE_PROFIT;
19562 +                end;
19563 +             %end;
19564 +             %if &em_lossflag ne 0 %then %do;
19565 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19565!+14.&EM_PROPERTY_SPLITPRECISION);
19566 +                if CATEGORY="&targetEvent" then do;
19567 +                  profitloss=ALTERNATIVE_LOSS;
19568 +                end;
19569 +             %end;
19570 +            %end;
19571 +            output;
19572 +          end;
19573 +          else do;
19574 +            %if &validFlag eq N %then %do;
19575 +             %if &em_profitflag ne 0 %then %do;
19576 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19577 +             %end;
19578 +             %if &em_lossflag ne 0 %then %do;
19579 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19580 +             %end;
19581 +            %end;
19582 +            %else %do;
19583 +             %if &em_profitflag ne 0 %then %do;
19584 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19584!+14.&EM_PROPERTY_SPLITPRECISION);
19585 +             %end;
19586 +             %if &em_lossflag ne 0 %then %do;
19587 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19587!+14.&EM_PROPERTY_SPLITPRECISION);
19588 +             %end;
19589 +            %end;
19590 +          end;
19591 +        %end;
19592 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19593 +          if strip(CATEGORY) = "&targetevent" then do;
19594 +            %if &validFlag eq N %then %do;
19595 +             %if &em_profitflag ne 0 %then %do;
19596 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19597 +             %end;
19598 +             %if &em_lossflag ne 0 %then %do;
19599 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19600 +             %end;
19601 +             profitloss=statvalue;
19602 +            %end;
19603 +            %else %do;
19604 +             %if &em_profitflag ne 0 %then %do;
19605 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19605!+;
19606 +                profitloss=ALTERNATIVE_PROFIT;
19607 +             %end;
19608 +             %if &em_lossflag ne 0 %then %do;
19609 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19610 +                profitloss=ALTERNATIVE_LOSS;
19611 +             %end;
19612 +            %end;
19613 +            output;
19614 +          end;
19615 +        %end;
19616 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19617 +          if strip(CATEGORY) = "&targetevent" then do;
19618 +            %if &validFlag eq N %then %do;
19619 +             profitloss=statvalue;
19620 +            %end;
19621 +            %else %do;
19622 +             %if &em_profitflag ne 0 %then %do;
19623 +                profitloss=ALTERNATIVE_PROFIT;
19624 +             %end;
19625 +             %if &em_lossflag ne 0 %then %do;
19626 +                profitloss=ALTERNATIVE_LOSS;
19627 +             %end;
19628 +            %end;
19629 +            output;
19630 +          end;
19631 +        %end;
19632 +      run;
19633 +    %end;
19635 +    data tempprob(keep= node probtext);
19636 +      length probtext $800;
19637 +      retain probtext;
19638 +      set tempprob ;
19639 +      by node;
19641 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19642 +      %let probtype = &EM_PROPERTY_TARGET;
19643 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19644 +        %let probtype = ALL;
19645 +      %end;
19647 +      %if "&probtype" eq "ALL" %then %do;
19648 +        if first.node then do;
19649 +          %if &validFlag eq N %then %do;
19650 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19651 +          %end;
19652 +          %else %do;
19653 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19654 +          %end;
19655 +        end;
19656 +        else if last.node then do;
19657 +          %if &validFlag eq N %then %do;
19658 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19659 +          %end;
19660 +          %else %do;
19661 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19662 +          %end;
19663 +          output;
19664 +        end;
19665 +        else do;
19666 +          %if &validFlag eq N %then %do;
19667 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19668 +          %end;
19669 +          %else %do;
19670 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19671 +          %end;
19672 +        end;
19673 +      %end;
19674 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19675 +        if strip(CATEGORY) = "&targetevent" then do;
19676 +          %if &validFlag eq N %then %do;
19677 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19678 +          %end;
19679 +          %else %do;
19680 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19681 +          %end;
19682 +          output;
19683 +        end;
19684 +      %end;
19685 +      %else %if "&probtype" eq "NONE" %then %do;
19686 +        if last.node then do;
19687 +          output;
19688 +        end;
19689 +      %end;
19690 +    run;
19691 +  %end;
19693 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19695 +  %let oldexists=0;
19696 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19697 +     data old_tree_plot;
19698 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19699 +        rename nodecolor=oldnodecolor;
19700 +     run;
19702 +     proc sort data=old_tree_plot;
19703 +        by node;
19704 +     run;
19706 +     %let oldexists=1;
19707 +  %end;
19709 +  data &EM_USER_TREE_PLOT;
19710 +    length textall $800;
19711 +    merge tempoutnodes temptargetused
19713 +    %if &em_intTarget eq Y %then %do;
19714 +      tempinterval
19715 +    %end;
19717 +    %if &em_classTarget eq Y %then %do;
19719 +      %if &validFlag eq N %then %do;
19720 +        tempn(rename=(statvalue=N))
19721 +      %end;
19722 +      %else %do;
19723 +        tempn
19724 +      %end;
19726 +      temppredict tempprob
19728 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19729 +        tempprofittext
19730 +      %end;
19731 +    %end;
19732 +    ;
19733 +    by node;
19735 +    /* build nodetext based on user selection */
19736 +    textall="";
19738 +    %if &em_intTarget eq Y %then %do;
19739 +    if tarlevel="INTERVAL" then do;
19740 +      /* Nodeid */
19741 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19742 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19743 +      %end;
19745 +      /* Target identifier if multiple targets are used */
19746 +      %if "&multipleTar" eq "Y" %then %do;
19747 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19748 +      %end;
19750 +      %if &validFlag eq Y %then %do;
19751 +         /* Column labels displayed in validflag eq Y only */
19752 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19753 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19753!+noquote ))";
19754 +         %end;
19756 +         /* Average values */
19757 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19758 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19759 +         %end;
19761 +         /* RASE */
19762 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19763 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19764 +         %end;
19766 +         /* Count */
19767 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19768 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19769 +         %end;
19770 +      %end;
19771 +      %else %do;
19772 +         /* Average values */
19773 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19774 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19775 +         %end;
19777 +         /* RASE */
19778 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19779 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19780 +         %end;
19782 +         /* Count */
19783 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19784 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19785 +         %end;
19786 +      %end;
19788 +      /* nodecolor */
19789 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19790 +        nodecolor=PREDICTION;
19791 +      %end;
19792 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19793 +        nodecolor=RASE;
19794 +      %end;
19795 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19796 +        nodecolor=1;
19797 +      %end;
19799 +    end;
19800 +    %end;
19801 +    %if &em_classTarget eq Y %then %do;
19802 +    if tarlevel^="INTERVAL" then  do;
19804 +      /* Nodeid */
19805 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19806 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19807 +      %end;
19808 +      /* Target identifier if multiple targets are used */
19809 +      %if "&multipleTar" eq "Y" %then %do;
19810 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19811 +      %end;
19813 +      /* Predicted values */
19814 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19815 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19816 +      %end;
19818 +      /* Column labels displayed in validflag eq Y only */
19819 +      %if "&ValidFlag" eq "Y" %then %do;
19820 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19821 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19821!+noquote ))";
19822 +        %end;
19823 +      %end;
19825 +      /* Target Values */
19826 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19827 +        textall=strip(textall)||"0A"x||strip(probtext);
19828 +      %end;
19830 +      /* include profit or loss for all target levels */
19831 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19832 +        textall=strip(textall)||"0A"x||strip(profittext);
19833 +      %end;
19835 +      %if &validFlag eq N %then %do;
19836 +        /* Percent Correct */
19837 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19838 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19839 +        %end;
19841 +         /* Count */
19842 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19843 +          %if "&adjusted" eq "N" %then %do;
19844 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19845 +          %end;
19846 +          %else %do;
19847 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19848 +          %end;
19849 +         %end;
19850 +      %end;
19851 +      %else %do;
19852 +        /* Percent Correct */
19853 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19854 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19855 +        %end;
19857 +         /* Count */
19858 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19859 +          %if "&adjusted" eq "N" %then %do;
19860 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19861 +          %end;
19862 +          %else %do;
19863 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19864 +          %end;
19865 +         %end;
19866 +      %end;
19868 +      /* nodecolor */
19869 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19870 +       %if &multipleTar ne Y %then %do;
19871 +        nodecolor=&predTarget;
19872 +       %end;
19873 +       %else %do;
19874 +         nodecolor=percentcorrect;
19875 +       %end;
19876 +      %end;
19877 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19878 +        nodecolor=percentcorrect;
19879 +      %end;
19880 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19881 +        nodecolor=1;
19882 +      %end;
19883 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19884 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19885 +          nodecolor=percentcorrect;
19886 +        %end;
19887 +        %else %do;
19888 +          nodecolor=profitloss;
19889 +        %end;
19890 +      %end;
19892 +    end;
19893 +    %end;
19894 +    %if &em_intTarget eq Y %then %do;
19895 +     drop  PREDICTION  TARGET TARLEVEL
19896 +     %if &ValidFlag eq Y %then %do;
19897 +         VPREDICTION
19898 +     %end;
19899 +     ;
19900 +    %end;
19901 +    %if &em_classTarget eq Y %then %do;
19902 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19903 +     %if &ValidFlag eq Y %then %do;
19904 +         VSTATVALUE
19905 +     %end;
19906 +     ;
19907 +    %end;
19909 +  run;
19911 +  /* add leaf index information to plotds - based on primary target only*/
19912 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19913 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19914 +      set &EM_USER_OUTSTATS;
19915 +      if ((statname="PROBABILITY"
19916 +      %if &validexist %then %do;
19917 +       or statname="VALID: PROBABILITY"
19918 +      %end;
19919 +      ) AND (CATEGORY="&TARGETEVENT")
19920 +      %if "&multipleTar" eq "Y" %then %do;
19921 +        AND (Target="%EM_TARGET")
19922 +      %end;
19923 +      );
19924 +    run;
19926 +    %if &validexist %then %do;
19927 +      proc sort data=tempprob; by node; run;
19928 +      %let vpredTarget = V%substr(&predTarget, 2);
19929 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19930 +         by node;
19931 +         id statname;
19932 +      run;
19933 +    %end;
19934 +  %end;
19935 +  %else %do;
19936 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19937 +      set &EM_USER_OUTSTATS;
19938 +      if ((statname="PREDICTION"
19939 +      %if &validexist %then %do;
19940 +       or statname="VALID: PREDICTION"
19941 +      %end;
19942 +      )
19943 +      %if "&multipleTar" eq "Y" %then %do;
19944 +        AND (Target="%EM_TARGET")
19945 +      %end;
19946 +      );
19947 +    run;
19948 +    %if &validexist %then %do;
19949 +      proc sort data=tempprob; by node; run;
19950 +      %let vpredTarget = V%substr(&predTarget, 2);
19951 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19952 +         by node;
19953 +         id statname;
19954 +      run;
19955 +    %end;
19956 +  %end;
19958 +  proc sort data=tempprob; by node; run;
19959 +  data tempoutnodes;
19960 +    merge tempoutnodes tempprob;
19961 +    by node;
19962 +  run;
19964 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19965 +  data tempnodes;
19966 +    retain traintotal validtotal;
19967 +    set tempnodes(where=(leaf ne . ));
19968 +    tprob=round(&predTarget, .01);
19969 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19970 +      percevent_train=round(tprob*100, .01);
19971 +    %end;
19972 +    %else %do;
19973 +      percevent_train=tprob;
19974 +    %end;
19976 +    perc_train=round((n/traintotal)*100, 0.01);
19977 +    /* leafwidth already has a *10 multiplier */
19978 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19980 +    %if &validexist %then %do;
19981 +      %let vpredTarget = V%substr(&predTarget,2);
19982 +      vprob=round(&vpredTarget, .01);
19983 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19984 +        percevent_valid=round(vprob*100, .01);
19985 +      %end;
19986 +      %else %do;
19987 +        percevent_valid=vprob;
19988 +      %end;
19989 +      perc_valid=round((vn/validtotal)*100, .01);
19990 +    %end;
19992 +    index=_N_;
19993 +    keep node index tprob perc_train percevent_train
19994 +    %if &validexist %then %do;
19995 +        vprob percevent_valid perc_valid
19996 +    %end;
19997 +    ;
19998 +  run;
19999 +  proc sort data=tempnodes; by node; run;
20000 +  data &EM_USER_TREE_PLOT;
20001 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20002 +    by node;
20003 +    if missing(node) then delete;
20004 +    %if &oldexists %then %do;
20005 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20006 +      drop oldnodecolor;
20007 +    %end;
20008 +    abovetext = compbl(abovetext);
20010 +    /* add variable labels */
20011 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20012 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20013 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20014 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20015 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20016 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20018 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20019 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20020 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20021 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20022 +          %end;
20023 +          %else %do;
20024 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20025 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20026 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20027 +          %end;
20028 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20030 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20031 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20032 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20033 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20034 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20035 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20036 +          %end;
20037 +          %else %do;
20038 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20039 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20040 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20041 +          %end;
20042 +    ;
20043 +  run;
20045 +  /* delete temporary tables */
20046 +  proc datasets lib=work nolist;
20047 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20048 +  run;
20050 +%mend em_tree_makePlotDs;
20054 +%macro em_tree_report;
20056 +   /* report properties */
20057 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20058 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20059 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20060 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20061 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20062 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20063 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20064 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20065 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20066 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20067 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20068 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20069 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20071 +   %let validexist=0;
20072 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20073 +     %let validexist=1;
20074 +   %end;
20076 +   /* determine if multiple targets will be processed */
20077 +   %let em_tree_multipleTargets=N;
20078 +   %let em_tree_numTarget=1;
20079 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20080 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20081 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20082 +         %let em_tree_multipleTargets=N;
20083 +      %end;
20084 +      %else %do;
20085 +        data _null_;
20086 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20087 +          if eof then
20088 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20089 +        run;
20091 +        %if &em_tree_numTarget gt 1 %then %do;
20092 +           %let em_tree_multipleTargets=Y;
20093 +        %end;
20094 +     %end;
20095 +   %end;
20097 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20099 +   /* variable importance */
20100 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20101 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20103 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20104 +     /* and the columns may not be generated                                                                                 */
20105 +     %let em_tree_cvexists=;
20106 +     %let em_tree_surrexists=.;
20107 +     data _null_;
20108 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20109 +       if eof then do ;
20110 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20111 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20112 +       end;
20113 +     run;
20115 +     data &EM_USER_OUTIMPORT;
20116 +         set &EM_USER_OUTIMPORT;
20117 +         /* format columns based on Precison value specified */
20118 +         format importance 15.&EM_PROPERTY_PRECISION
20119 +              %if &validexist %then %do;
20120 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20121 +              %end;
20122 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20123 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20124 +              %end;
20125 +         ;
20126 +     run;
20128 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20129 +     proc print data=&EM_USER_OUTIMPORT
20130 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20131 +          (where=((nrules>0) OR (nsurrogates>0)))
20132 +        %end;
20133 +        %else %do;
20134 +           (where=(nrules>0))
20135 +        %end;
20136 +        label noobs
20137 +        ;
20138 +     run;
20139 +     title10;
20141 +   %end;
20143 +   /* Sequence */
20144 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20145 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20146 +   data _null_ ;
20147 +      set &EM_USER_outseq (obs=2) end=eof ;
20148 +      if eof then do ;
20149 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20150 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20151 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20152 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20153 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20154 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20155 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20156 +      end;
20157 +    run;
20159 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20160 +      data &EM_USER_OUTSEQ;
20161 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20162 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20163 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20164 +           _XMISC_=_VMISC_
20165 +        %end;
20166 +        %if "&em_tree_aprof" ne "."  %then %do;
20167 +           _XAPROF_=_VAPROF_
20168 +           _XPROF_ = _VPROF_
20169 +        %end;
20170 +        %if "&em_tree_aloss" ne "."  %then %do;
20171 +           _XALOSS_=_VALOSS_
20172 +        %end;
20173 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20174 +           _XPASE_ = _VPASE_
20175 +           _XPMISC_ = _VPMISC_
20176 +        %end;
20178 +        ));
20179 +     %end;
20180 +     %else %do;
20181 +        set &EM_USER_OUTSEQ;
20182 +     %end;
20184 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20185 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20186 +            _MISC_   15.&EM_PROPERTY_PRECISION
20187 +         %end;
20188 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20189 +            _PASE_  15.&EM_PROPERTY_PRECISION
20190 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20191 +         %end;
20192 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20193 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20194 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20195 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20196 +            %end;
20197 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20198 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20199 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20200 +            %end;
20201 +         %end;
20202 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20203 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20204 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20205 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20206 +            %end;
20207 +         %end;
20208 +         %if "&em_tree_seq" ne "." %then %do;
20209 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20210 +         %end;
20211 +         %if "&em_tree_vseq" ne "." %then %do;
20212 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20213 +         %end;
20214 +         %if "&em_tree_aprof" ne "." %then %do;
20215 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20216 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20217 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20218 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20219 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20220 +           %end;
20221 +         %end;
20222 +         %else %if "&em_tree_aloss" ne "." %then %do;
20223 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20224 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20225 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20226 +           %end;
20227 +         %end;
20228 +      ;
20229 +    run;
20230 +   %end;
20232 +   /* Observation Based Importance */
20233 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20235 +      /* need to check for 0 obs */
20236 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20237 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20238 +      %let rc=%sysfunc(close(&dsid));
20240 +      %if &onobs %then %do;
20241 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20242 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20244 +         data &EM_USER_OUTOBSIMP;
20245 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20246 +           if _a;
20247 +           by _INPUT1_;
20248 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20249 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20250 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20251 +                   %end;
20252 +                   ;
20253 +         run;
20254 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20255 +      %end;
20256 +   %end;
20258 +  %end;
20260 +  /* create dataset to support tree diagram and icicle plot */
20261 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20262 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20264 +  /* display tree diagram */
20265 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20266 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20268 +  /* display icicle diagram */
20269 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20270 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20272 +  /* Leaf Statistics Plot */
20273 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20275 +  /* print leaf information to output window */
20276 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20278 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20279 +       by descending N;
20280 +     run;
20282 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20283 +     %local vn;
20284 +     data _null_;
20285 +       set t (obs=2) end=eof;
20286 +       if eof then do;
20287 +         call symput("vn", strip(put(vn, best.)));
20288 +       end;
20289 +     run;
20291 +     data t;
20292 +       set t;
20293 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20294 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20295 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20296 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20297 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20298 +       %end;
20299 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20300 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20301 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20302 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20303 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20304 +          %end;
20305 +       %end;
20306 +       ;
20307 +     run;
20309 +     /* determine if rase is found in t */
20310 +    %let dsid=%sysfunc(open(t,i));
20311 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20312 +    %let rc=%sysfunc(close(&dsid));
20314 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20315 +     proc print data=t noobs label;
20316 +       where tprob ne .;
20317 +       var node depth N tprob
20318 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20319 +         %if "&vn" ne "." %then %do;
20320 +           VN
20321 +         %end;
20322 +         vprob
20323 +       %end;
20324 +       %if &raseexists %then %do;
20325 +            RASE
20326 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20327 +              VRASE
20328 +            %end;
20329 +       %end;
20330 +       ;
20331 +     run;
20332 +     title10;
20333 +  %end;
20335 +  /* create plots that are done during training of node */
20336 +  /* display iterative plot, including reference line */
20337 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20338 +   /* %if &nleaves eq  %then %do; */
20339 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20340 +      data _null_;
20341 +        set &EM_USER_OUTTOPOLOGY end=eof;
20342 +        if eof then do;
20343 +          call symput('nleaves', LEAF);
20344 +        end;
20345 +      run;
20346 +   /* %end; */
20348 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20349 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20350 +  %end;
20352 +  /* display leaf statistics */
20353 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20355 +  /* stats by node if multiple targets = Y */
20356 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20357 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20358 +    data &EM_USER_OUTSTATS;
20359 +      set &EM_USER_OUTSTATS;
20361 +     * if STATNAME="TARGET" then delete;
20362 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20363 +      drop leaf;
20364 +    run;
20365 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20367 +  %end;
20368 +  %else %do;
20369 +    /* add outstats and outdescribe to spk but not results */
20370 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20371 +  %end;
20373 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      


NOTE: There were 90 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
      


NOTE: There were 6 observations read from the data set EMWS3.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 26 observations read from the data set EMWS3.TREE2_OUTSEQ.
NOTE: The data set EMWS3.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 386 observations read from the data set EMWS3.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 90 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 105 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 30 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE2_TREE_PLOT has 15 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
      


NOTE: There were 105 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE2_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE2_TREE_PLOT has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.01 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 15 observations read from the data set EMWS3.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20374  
20375  *------------------------------------------------------------*;
20376  * End REPORT: Tree2;
20377  *------------------------------------------------------------*;

20378  /* Reset EM Options */
20379  options formchar="|----|+|---+=|-/\<>*";
20380  options nocenter ls=256 ps=10000;
20381  goptions reset=all device=GIF NODISPLAY;

20382  proc sort data=WORK.EM_USER_REPORT;
20383  by ID VIEW;
20384  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20385  proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20386  by NAME;
20387  run;

NOTE: There were 99 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

20388  proc sort data=EMWS3.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20389  by NAME;
20390  run;

NOTE: There were 99 observations read from the data set EMWS3.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

20391  data WORK.ASSESS_META;
20392  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20393  by NAME;
20394  run;

NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20395  data EM_temp_assessMeta;
20396  set EMWS3.Tree2_CMeta_TRAIN;
20397  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20398  run;

NOTE: There were 12 observations read from the data set EMWS3.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

20399  data EM_temp_assessdata;
20400  set EMWS3.Tree2_TRAIN(keep=
20401  F_RESPOND
20402  I_RESPOND
20403  P_RESPOND0
20404  P_RESPOND1
20405  Q_RESPOND0
20406  Q_RESPOND1
20407  R_RESPOND0
20408  R_RESPOND1
20409  U_RESPOND
20410  V_RESPOND0
20411  V_RESPOND1
20412  _WARN_
20413  RESPOND
20414  );
20415  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
















24697   data EM_temp_assessMeta;
24698   set EMWS3.Tree2_CMeta_TRAIN;
24699   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24700   run;

NOTE: There were 12 observations read from the data set EMWS3.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

24701   data EM_temp_assessdata;
24702   set EMWS3.Tree2_VALIDATE(keep=
24703   F_RESPOND
24704   I_RESPOND
24705   P_RESPOND0
24706   P_RESPOND1
24707   Q_RESPOND0
24708   Q_RESPOND1
24709   R_RESPOND0
24710   R_RESPOND1
24711   U_RESPOND
24712   V_RESPOND0
24713   V_RESPOND1
24714   _WARN_
24715   RESPOND
24716   );
24717   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 16121 observations read from the data set EMWS3.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS3.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
















29008   %let _cn = %sysfunc(getoption(CENTER));
29009   options nocenter;
29010   proc print data=EMWS3.Tree2_EMREPORTFIT noobs label;
29011   var STAT LABEL TRAIN
29012   VALIDATE
29013   ;
29014   by TARGET TARGETLABEL;
29015   title9 ' ';
29016   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29017   run;

NOTE: There were 8 observations read from the data set EMWS3.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

29018   title10;
29019   options &_cn;

29020   proc sort data=EMWS3.Tree2_EMCLASSIFICATION nothreads;
29021   by DATAROLE TARGET TARGETLABEL;
29022   run;

NOTE: There were 7 observations read from the data set EMWS3.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE2_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
      

29023   %let _cn = %sysfunc(getoption(CENTER));
29024   options nocenter;
29025   proc print data=EMWS3.Tree2_EMCLASSIFICATION noobs label;
29026   var from into pct_row pct_col count percent
29027   ;
29028   by DATAROLE TARGET TARGETLABEL;
29029   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
29030   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
29031   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
29032   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
29033   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
29034   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
29035   where _TYPE_='PREDICTION';
29036   title9 ' ';
29037   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
29038   run;

NOTE: There were 7 observations read from the data set EMWS3.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

29039   title9;
29040   title10;
29041   options &_cn;

29042   %let _cn = %sysfunc(getoption(CENTER));
29043   options nocenter;
29044   data EMWS3.Tree2_EMEVENTREPORT;
29045   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
29046   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
29046 ! FALSEEVENT
29047   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
29048      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
29049   FALSEEVENT=0;
29050   FALSENEVENT=0;
29051   TRUEEVENT=0;
29052   TRUENEVENT=0;
29053   set EMWS3.Tree2_EMEVENTREPORT;
29054   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
      

29055   proc print data=EMWS3.Tree2_EMEVENTREPORT noobs label;
29056   title9 ' ';
29057   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
29058   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
29059   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

29060   title10;
29061   options &_cn;

29062   proc datasets library=EMWS3 nolist;
29063   modify Tree2_EMRANK;
29064   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29065   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29066   run;

NOTE: MODIFY was successful for EMWS3.TREE2_EMRANK.DATA.
29067   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

29068   %let _cn = %sysfunc(getoption(CENTER));
29069   options nocenter;
29070   proc print data=EMWS3.Tree2_EMRANK label noobs;
29071   var
29072   decile gain lift liftc resp respc N _meanP_;
29073   by
29074   notsorted DATAROLE
29075   notsorted TARGET
29076   notsorted TARGETLABEL
29077   ;
29078   title9 ' ';
29079   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29080   run;

NOTE: There were 40 observations read from the data set EMWS3.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

29081   title10;
29082   options &_cn;

29083   proc datasets library=EMWS3 nolist;
29084   modify Tree2_EMSCOREDIST;
29085   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29086   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29087   run;

NOTE: MODIFY was successful for EMWS3.TREE2_EMSCOREDIST.DATA.
29088   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

