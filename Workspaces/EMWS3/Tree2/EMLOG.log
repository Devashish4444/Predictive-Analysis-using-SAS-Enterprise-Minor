*------------------------------------------------------------*
User:                skokse_uncc
Date:                April 24, 2020
Time:                19:41:03
Site:                70117250
Platform:            X64_DSRV16
Maintenance Release: 9.04.01M5P091317
EM Version:          14.3
* 
*------------------------------------------------------------*
* Training Log
Date:                April 24, 2020
Time:                19:40:44
*------------------------------------------------------------*
15208  proc freq data=EMWS3.Tree2_VariableSet noprint;
15209  table ROLE*LEVEL/out=WORK.Tree2META;
15210  run;
 
NOTE: There were 99 observations read from the data set EMWS3.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
15211  proc print data=WORK.Tree2META label noobs;
15212  var ROLE LEVEL COUNT;
15213  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15214  title9 ' ';
15215  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15216  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
15217  title10;
 
15218  %let EMNORLEN = %DMNORLEN;
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15247  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15248  length ORDER $20;
15249  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15250     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15251  set EMWS3.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
15252  NumLevels=2;
15253  select(upcase(ORDER));
15254  when('DESC') ORDER = 'Descending';
15255  when('ASC') ORDER = 'Ascending';
15256  when('FMTDESC') ORDER = 'Formatted Descending';
15257  when('FMTASC') ORDER = 'Formatted Ascending';
15258  otherwise ORDER = 'Descending';
15259  end;
15260  output;
15261  run;
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15262  title9 ' ';
15263  proc print data=WORK.Tree2_EVENT noobs label;
15264  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15265  title9 ' ';
15266  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15267  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15268  title10;
 
"No decisions defined for target "RESPOND"."
15269  proc print data = EMWS3.Ids_RESPOND_DM noobs label;
15270  var _type_ variable label;
15271  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15272  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15273  title9 ' ';
15274  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15275  run;
 
NOTE: There were 7 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15276  title10;
 
15277  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15823  *------------------------------------------------------------*;
15824  * Tree2: Generation of macros and macro variables;
15825  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15826  *------------------------------------------------------------*;
 
15827  %let EMEXCEPTIONSTRING=;
15828  *------------------------------------------------------------*;
15829  * TRAIN: Tree2;
15830  *------------------------------------------------------------*;
15831  %let EM_ACTION = TRAIN;
15832  %let syscc = 0;
15833  %macro main;
15834
15835    %if %upcase(&EM_ACTION) = CREATE %then %do;
15836      filename temp catalog 'sashelp.emmodl.tree_create.source';
15837      %include temp;
15838      filename temp;
15839
15840      %em_tree_create;
15841    %end;
15842
15843     %else
15844     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15845
15846         filename temp catalog 'sashelp.emmodl.tree_train.source';
15847         %include temp;
15848         filename temp;
15849         %em_tree_train;
15850     %end;
15851
15852    %else
15853    %if %upcase(&EM_ACTION) = SCORE %then %do;
15854      filename temp catalog 'sashelp.emmodl.tree_score.source';
15855      %include temp;
15856      filename temp;
15857
15858      %em_tree_score;
15859
15860    %end;
15861
15862    %else
15863    %if %upcase(&EM_ACTION) = REPORT %then %do;
15864
15865         filename temp catalog 'sashelp.emmodl.tree_report.source';
15866         %include temp;
15867         filename temp;
15868
15869         %em_tree_report;
15870     %end;
15871
15872    %else
15873    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15874
15875         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15876         %include temp;
15877         filename temp;
15878         %EM_TREE_OPENTREEVIEWER;
15879
15880     %end;
15881
15882    %else
15883    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15884
15885         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15886         %include temp;
15887         filename temp;
15888         %EM_TREE_CLOSETREEVIEWER;
15889
15890     %end;
15891
15892
15893     %doendm:
15894  %mend main;
15895
15896  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15898 +%macro em_tree_train;
15900 +   %if &EM_IMPORT_DATA eq %then %do;
15901 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15902 +       %put &em_codebar;
15903 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15904 +       %put &errormsg;
15905 +       %put &em_codebar;
15906 +       %goto doendm;
15907 +   %end;
15908 +   %else
15909 +       %let EMEXCEPTIONSTRING =;
15911 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15912 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15913 +        %put &em_codebar;
15914 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15915 +        %put &errormsg;
15916 +        %put &em_codebar;
15917 +        %goto doendm;
15918 +   %end;
15920 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15921 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15922 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15923 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15924 +        %put &em_codebar;
15925 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15926 +        %put &errormsg;
15927 +        %put &em_codebar;
15928 +        %goto doendm;
15929 +   %end;
15931 +   /* Initialize property macro variables */
15932 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15933 +   %include temp;
15934 +   filename temp;
15936 +   %EM_SetProperties;
15938 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15939 +   %EM_GETNAME(key=EMTREE, type=DATA);
15940 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15941 +     /* if import eq Y and no importtable defined, throw an exception */
15942 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15943 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15944 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15945 +         %put &em_codebar;
15946 +         %put &errmsg;
15947 +         %put &em_codebar;
15948 +         %goto doendm;
15949 +      %end;
15950 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15951 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15952 +         %put &em_codebar;
15953 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15954 +         %put &errormsg;
15955 +         %put &em_codebar;
15956 +         %goto doendm;
15957 +      %end;
15958 +      %else %do;
15959 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15960 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15961 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15962 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15963 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15964 +         %let dsid = %sysfunc(close(&dsid));
15965 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15966 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15967 +            %put &em_codebar;
15968 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15969 +            %put &errormsg;
15970 +            %put &em_codebar;
15971 +            %goto doendm;
15972 +         %end;
15973 +      %end;
15974 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15975 +         proc delete data=&EM_USER_EMTREE;
15976 +         run;
15977 +      %end;
15978 +   %end;
15979 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15980 +      proc delete data=&EM_USER_EMTREE;
15981 +      run;
15982 +   %end;
15984 +   /* load tree macros */
15985 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15986 +   %include temp;
15987 +   filename temp;
15989 +   /* data sets */
15990 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15991 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15992 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15994 +   /* files */
15995 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15997 +   /* check actual num of target levels */
15998 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15999 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16000 +                              nLevel=_nTargetLevel );
16001 +      %if &_nTargetLevel  > 2 %then %do;
16002 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16003 +        %put &em_codebar;
16004 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16005 +        %put &errormsg;
16006 +        %put &em_codebar;
16007 +        %goto doendm;
16008 +      %end;
16009 +   %end;
16011 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16012 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16013 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16014 +        %let costflag=0;
16015 +        data _null_;
16016 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16017 +          if eof then call symput("costflag", _N_);
16018 +        run;
16019 +        %if &costflag gt 0 %then %do;
16020 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16021 +          %put &em_codebar;
16022 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16023 +          %put &errormsg;
16024 +          %put &em_codebar;
16025 +          %goto doendm;
16026 +       %end;
16027 +     %end;
16028 +   %end;
16030 +   /* determine if multiple targets will be processed */
16031 +   %let em_tree_multipleTargets=N;
16032 +   %let em_tree_numTarget = 1;
16033 +   %let em_tree_targetVars=;
16035 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16036 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16037 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16038 +         %let em_tree_multipleTargets=N;
16039 +      %end;
16040 +      %else %do;
16041 +         /* create macro array of targets  */
16042 +         data _null_;
16043 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16044 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16045 +           if eof then
16046 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16047 +        run;
16049 +        %if &em_tree_numTarget gt 1 %then %do;
16050 +           %let em_tree_multipleTargets=Y;
16051 +        %end;
16052 +      %end;
16053 +   %end;
16055 +   /* create view of only necessary variable for performance reasons */
16056 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16057 +   data &tempData / view=&tempData;
16058 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16059 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16060 +       %EM_TARGET
16061 +     %end;
16062 +     %else %do;
16063 +       %if &em_tree_numTarget ne 0 %then %do;
16064 +         %do i=1 %to &em_tree_numTarget;
16065 +            &&em_tree_targetVars&i
16066 +         %end;
16067 +       %end;
16068 +     %end;
16069 +     );
16070 +   run;
16072 +   /* run Tree procedure */
16073 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16075 +   /* Check return code and throw exception if error is detected */
16076 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16077 +   %if &syserr %then %do;
16078 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16079 +     %goto doendm;
16080 +   %end;
16082 +   /* add decision score code if multiple targets are processed */
16083 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16084 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16085 +   %end;
16087 +   /* create outfit dataset if multiple score statements have been executed */
16088 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16090 +   /* create English Rules */
16091 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16092 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16093 +       %em_tree_makeEnglishRules;
16095 +       /* English Rules */
16096 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16098 +     %end;
16099 +   filename x;
16101 +   %doendm:
16102 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16103 +%macro EM_SetProperties;
16105 +   /* train properties */
16106 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16107 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16108 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16109 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16110 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16111 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16112 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16113 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16114 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16115 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16116 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16117 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16118 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16119 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16120 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16148 +   /* properties for interactive sample */
16149 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16154 +   /* report properties */
16155 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16169 +   /* score properties */
16170 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16173 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16175 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16176 +  %global &nLevel;
16177 +  proc dmdb batch data=&indata
16178 +    classout=_tmp_dmdbout;
16179 +    class &target;
16180 +  run;
16181 +  data _tmp_dmdbout;
16182 +    set _tmp_dmdbout;
16183 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16184 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16185 +  run;
16186 +  data _null_;
16187 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16188 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16189 +    %let dsid = %sysfunc(close(&dsid));
16190 +     call symput("&nLevel", put(&_obs, Best12.));
16191 +  run;
16193 +  proc datasets lib=work nolist;
16194 +     delete _tmp_dmdbout;
16195 +  run;
16196 +  quit;
16197 +%Mend EM_CheckBinaryTargetLevel;
16200 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16202 +  /* determine the number of obs in training data */
16203 +  proc sql;
16204 +    reset noprint;
16205 +    select count(*) into :em_nobs from &indata;
16206 +  quit;
16208 +  /* determine the number of input variables */
16209 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16210 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16212 +  /* retrieve targetEvent from decmeta */
16213 +  %let targetEvent=;
16214 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16215 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16216 +      data _null_;
16217 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16218 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16219 +      run;
16220 +    %end;
16221 +  %end;
16223 +  /* create targetTable if multipleTar eq Y */
16224 +  data temptarget;
16225 +    set &EM_DATA_VARIABLESET;
16226 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16227 +  run;
16229 + /* data sets */
16230 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16231 + %EM_GETNAME(key=EMTREE,        type=DATA);
16232 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16233 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16234 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16235 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16236 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16237 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16238 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16239 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16241 + /* files */
16242 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16243 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16245 + /* turn on pmml if requested */
16246 + %let nnpmml=0;
16247 + %if %symexist(EM_PMML) %then %do;
16248 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16249 +       %let nnpmml=1;
16251 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16252 +   %end;
16253 +%end;
16255 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16257 +%if &nnpmml or &numClassTarget %then %do;
16259 +    /* create dmdb needed for pmml generation */
16260 +    %let tree_maxlevel = 512;
16261 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16262 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16263 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16264 +      %end;
16265 +    %end;
16266 +    %if &tree_maxlevel gt 0 %then %do;
16267 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16268 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16269 +    %end;
16271 +    %let targetOrderString =;
16272 +    %let targetString = ;
16273 +    data _null_;
16274 +       length orderString nameString $10000;
16275 +       retain orderString nameString;
16276 +       set &em_data_variableset end=eof;
16277 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16278 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16279 +       %end;
16280 +       %else %do;
16281 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16282 +       %end;          select(order);
16283 +         when('')        order ='DESC';
16284 +         when('FMTASC')  order='ASCFMT';
16285 +         when('FMTDESC') order='DESFMT';
16286 +         otherwise;
16287 +       end;
16288 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16289 +       nameString = trim(nameString)!!' '!!trim(NAME);
16291 +       if eof then do;
16292 +          call symput('targetOrderString', trim(orderString));
16293 +          call symput('targetString', trim(nameString));
16294 +       end;
16295 +    run;
16297 +    %let arborkluge= "work._treeDMDB";
16299 +    proc dmdb batch data=&indata
16300 +    %if &nnpmml %then %do;
16301 +        PMML
16302 +    %end;
16303 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16305 +      %if &nnpmml %then %do;
16306 +           %if "%EM_ID" ne "" %then %do;
16307 +             id %EM_ID;
16308 +           %end;
16309 +           %if &EM_NUM_CLASS gt 0 %then %do;
16310 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16311 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16312 +                  &targetOrderString;
16313 +           %end;
16314 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16315 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16316 +           %end;
16317 +           target &targetString %EM_INTERVAL_TARGET;
16318 +           %if "%EM_FREQ" ne "" %then %do;
16319 +             freq %EM_FREQ;
16320 +           %end;
16321 +      %end;
16322 +      %else %do;
16323 +         class  &targetOrderString;
16324 +         target &targetString %EM_INTERVAL_TARGET;
16325 +      %end;
16326 +    run;
16327 +    quit;
16329 +    proc datasets lib=work nolist;
16330 +       delete classout varout;
16331 +    run;
16332 +    quit;
16334 + %end;
16337 + /* run Arbor procedure */
16338 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16339 +  proc arbor data=&INDATA
16341 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16342 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16343 +  %end;
16345 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16346 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16347 +  %end;
16349 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16350 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16351 +  %end;
16353 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16354 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16355 +  %end;
16357 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16358 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16359 +  %end;
16361 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16362 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16363 +  %end;
16364 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16365 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16366 +  %end;
16367 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16368 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16369 +  %end;
16371 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16372 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16373 +      alpha = &EM_PROPERTY_SIGLEVEL
16374 +    %end;
16375 +  %end;
16377 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16378 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16379 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16380 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16381 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16383 +        padjust =
16384 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16385 +          &chaid
16386 +        %end;
16387 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16388 +          DEPTH
16389 +        %end;
16390 +      %end;
16391 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16392 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16393 +         pvars = &num_inputs
16394 +      %end;
16395 +    %end;
16396 +  %end;
16397 +  %else %do;
16398 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16399 +         padjust = NONE
16400 +      %end;
16401 +  %end;
16403 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16404 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16405 +    Maxrules = &num_nrules
16406 +  %end;
16408 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16409 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16410 +    Maxsurrs = &num_nsurrs
16411 +  %end;
16413 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16414 +     Missing=&EM_PROPERTY_MISSINGVALUE
16415 +  %end;
16417 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16418 +     USEVARONCE
16419 +  %end;
16421 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16422 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16423 +  %end;
16426 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16427 +    event = "&targetEvent"
16428 +  %end;
16430 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16431 +     DECSEARCH
16432 +  %end;
16434 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16435 +     PRIORSSEARCH
16436 +  %end;
16438 +  %if &arbor_1 ne %then %do;
16439 +    &arbor_1
16440 +  %end;
16442 +  %if &em_arbor ne %then %do;
16443 +     &em_arbor
16444 +  %end;
16445 +  ;
16446 + %end;
16447 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16448 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16449 +       Performance &EM_PROPERTY_PERFORMANCE
16450 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16451 +         nodesize=&EM_PROPERTY_NODESAMPLE
16452 +       %end;
16453 +       ;
16454 +       interact;
16455 + %end;
16456 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16457 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16458 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16459 +    %put &em_codebar;
16460 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16461 +    %put &errormsg;
16462 +    %put &em_codebar;
16463 +    %goto doendm;
16464 +   %end;
16465 +   %else %do;
16466 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16467 +       Performance &EM_PROPERTY_PERFORMANCE
16468 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16469 +         nodesize=&EM_PROPERTY_NODESAMPLE
16470 +       %end;
16471 +       ;
16472 +       interact;
16473 +   %end;
16474 + %end;
16476 + %else %do;
16477 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16478 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16479 +    %put &em_codebar;
16480 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16481 +    %put &errormsg;
16482 +    %put &em_codebar;
16483 +    %goto doendm;
16484 +   %end;
16485 +   %else %do;
16486 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16487 +       Performance &EM_PROPERTY_PERFORMANCE
16488 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16489 +         nodesize=&EM_PROPERTY_NODESAMPLE
16490 +       %end;
16491 +       ;
16492 +        interact;
16493 +   %end;
16494 + %end;
16496 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16497 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16498 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16499 +    %end;
16501 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16502 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16503 +    %end;
16505 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16506 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16507 +    %end;
16509 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16510 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16511 +    %end;
16513 +    %if "%EM_FREQ" ne "" %then %do;
16514 +       freq %EM_FREQ;
16515 +    %end;
16517 +    %if "&multipleTar" eq "Y" %then %do;
16518 +       /* cycle through all target vars in variableset */
16519 +       %let tdsid = %sysfunc(open(temptarget));
16520 +       %if &tdsid %then %do;
16521 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16522 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16523 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16524 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16525 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16526 +             target &var / level = &lvl
16527 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16528 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16529 +             %end;
16530 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16531 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16532 +             %end;
16533 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16534 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16535 +             %end;
16536 +          %end;
16537 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16538 +       %end;
16539 +       useTarget variable = %EM_TARGET;
16540 +    %end;
16541 +    %else %do;
16542 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16543 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16544 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16545 +      %end;
16546 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16547 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16548 +      %end;
16549 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16550 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16551 +      %end;
16552 +    %end;
16554 +    %if "&multipleTar" eq "N" %then %do;
16555 +      &EM_DEC_STATEMENT;
16556 +    %end;
16558 +    Performance &EM_PROPERTY_PERFORMANCE
16559 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16560 +      nodesize=&EM_PROPERTY_NODESAMPLE
16561 +    %end;
16562 +    ;
16564 +    %if "&intFlag" eq "Y" %then %do;
16565 +       INTERACT Largest;
16566 +       Train maxnewdepth=0;
16567 +    %end;
16569 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16570 +         Assess
16571 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16572 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16573 +              %put &em_codebar;
16574 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16575 +              %put &errormsg;
16576 +              %put &em_codebar;
16577 +            %end;
16578 +            %else %do;
16579 +               Validata=&EM_IMPORT_VALIDATE
16580 +            %end;
16581 +         %end;
16582 +         %else %do;
16583 +           NoValidata
16584 +         %end;
16585 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16586 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16587 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16588 +               %if &dsid %then %do;
16589 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16590 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16591 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16592 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16593 +                   %else %do;
16594 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16595 +                      %else %let measure= MISC;
16596 +                   %end;
16597 +                 %end;
16598 +               %end;
16599 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16600 +            %end;
16601 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16602 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16603 +                 %let measure=ASE;
16604 +              %end;
16605 +              %else %do;
16606 +                 %let measure=MISC;
16607 +              %end;
16608 +            %end;
16609 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16610 +              %let measure=ASE;
16611 +            %end;
16612 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16613 +               %let measure = LIFT;
16614 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16615 +               %if &dsid %then %do;
16616 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16617 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16618 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16619 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16620 +                 %end;
16621 +               %end;
16622 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16623 +            %end;
16624 +            measure=&measure
16625 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16626 +               event = "&targetEvent"
16627 +            %end;
16628 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16629 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16630 +            %end;
16631 +         %end;
16632 +         %if "&multipleTar" eq "N" %then %do;
16633 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16634 +               CV
16635 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16636 +                 CVNITer = &EM_PROPERTY_CVNITER
16637 +               %end;
16638 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16639 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16640 +               %end;
16641 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16642 +                 CVSeed = &EM_PROPERTY_CVSEED
16643 +               %end;
16644 +            %end;
16645 +         %end;
16646 +       %end;
16647 +      ;
16649 +      %if "&intFlag" ne "Y" %then %do;
16650 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16651 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16652 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16653 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16655 +          SUBTREE &subtree
16656 +          %if "&subtree" eq "NLEAVES" %then %do;
16657 +            =&EM_PROPERTY_NSUBTREE
16658 +          %end;
16659 +          ;
16660 +        %end;
16662 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16663 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16664 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16665 +          %end;
16666 +       %end;
16667 +      %end;
16668 + %end;
16671 + MakeMacro nleaves = nleaves;
16672 + save
16673 + %if "&EM_USER_EMTREE" ne "" %then %do;
16674 +   MODEL=&EM_USER_EMTREE
16675 + %end;
16676 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16677 +   SEQUENCE=&EM_USER_OUTSEQ
16678 + %end;
16679 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16680 +   IMPORTANCE=&EM_USER_OUTIMPORT
16681 + %end;
16682 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16683 +   NODESTAT=&EM_USER_OUTNODES
16684 + %end;
16685 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16686 +   SUMMARY=&EM_USER_OUTSUMMARY
16687 + %end;
16688 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16689 +   STATSBYNODE=&EM_USER_OUTSTATS
16690 + %end;
16691 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16692 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16693 + %end;
16694 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16695 +   Pathlistnonmissing=&EM_USER_OUTPATH
16696 + %end;
16697 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16698 +   RULES = &EM_USER_OUTRULES
16699 + %end;
16700 + ;
16702 + %if "&intFlag" ne "Y" %then %do;
16704 +   %let lookupString = ;
16705 +   %if ^%symexist(EM_OPTION) %then
16706 +      %let EM_OPTION=;
16708 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16709 +      %let lookupString = LOOKUP=SELECT;
16710 +   %end;
16712 +   %let codetext=;
16713 +   %let norescodetxt=;
16715 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16716 +     %let codetext=&codetext DUMMY;
16717 +     %let norescodetxt=&norescodetxt DUMMY;
16718 +   %end;
16719 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16720 +     %let codetext=&codetext NOLEAFID;
16721 +     %let norescodetxt=&norescodetxt NOLEAFID;
16722 +   %end;
16723 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16724 +     %let norescodetxt=&norescodetxt NOPRED;
16725 +   %end;
16727 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16728 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16730 +   %if &nnpmml %then %do;
16731 +     code pmml;
16732 +   %end;
16734 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16735 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16736 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16737 +   %end;
16738 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16739 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16740 +   %end;
16741 + %end;
16743 + run;
16744 + quit;
16746 + /*%em_checkerror(); */
16747 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16748 +   /* Delete DMDB catalog */
16749 +   proc datasets lib=work nolist;
16750 +       delete _treeDMDB / mt=cat;
16751 +  run;
16752 +  %end;
16754 + %if &nnpmml %then %do;
16755 +    ods pmml close;
16756 + %end;
16758 +  %doendm:
16760 +%mend em_tree_runTreeProcedure;
16762 +%macro em_tree_createFitStats( multipleTar= );
16765 +  /* create targetTable is multipleTar eq Y */
16766 +  data temptarget;
16767 +    set &EM_DATA_VARIABLESET;
16768 +    where ROLE="TARGET";
16769 +  run;
16771 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16772 +   data &EM_USER_EMOUTFIT;
16773 +     length target $32;
16774 +     merge work.fit_train
16775 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16776 +       work.fit_valid
16777 +     %end;
16778 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16779 +       work.fit_test
16780 +     %end;
16781 +     ;
16782 +     %if "&multipleTar" eq "N" %then %do;
16783 +       target="%EM_TARGET";
16784 +     %end;
16785 +     %else %do;
16786 +       target = _TARGET_;
16787 +     %end;
16788 +     drop _NW_ _SUMW_
16789 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16790 +        _VSUMW_
16791 +     %end;
16792 +     ;
16793 +   run;
16795 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16796 +     proc datasets library=work nolist;
16797 +       delete fit_valid;
16798 +     run;
16799 +   %end;
16800 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16801 +     proc datasets library=work nolist;
16802 +       delete fit_test;
16803 +     run;
16804 +   %end;
16806 +%mend em_tree_createFitStats;
16809 +%macro em_tree_makeEnglishRules;
16811 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16812 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16814 +  /* verify that necessary tables exist and if not, skip processing */
16815 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16816 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16817 +    %goto doendm;
16818 +  %end;
16819 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16820 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16821 +    %goto doendm;
16822 +  %end;
16824 +  /* determine length of variable in outpath dataset */
16825 +  %let vlength= ;
16826 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16827 +  %if &dsid ne %then %do;
16828 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16829 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16830 +  %end;
16831 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16833 +  data tempoutpath;
16834 +    length varname $&vlength;
16835 +    retain varname;
16836 +    set &EM_USER_OUTPATH;
16838 +    if ^missing(variable) then varname=variable;
16839 +    else if ^missing(var_name) then varname=var_name;
16840 +    output;
16841 +  run;
16843 +  /* create an array of generated predicted variable names */
16844 +  %let tree_pred_vars = ;
16845 +  %let tree_pred_label = ;
16846 +  %let numpred= 0;
16847 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16849 +    data _null_;
16850 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16851 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16852 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16853 +     if eof then
16854 +       call symput('numpred', strip(put(_N_, BEST.)));
16855 +    run;
16856 +  %end;
16858 +  /* determine if NPRIORS exists in outnodes  */
16859 +  %local nprior_flag;
16860 +  data _null_;
16861 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16862 +    if eof then do;
16863 +      call symput('nprior_flag', strip(put(npriors, best.)));
16864 +    end;
16865 +  run;
16867 +  proc sort data=tempoutpath; by node; run;
16868 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16870 +  data tempoutpath;
16871 +    merge tempoutpath(in=_a) outnodes(keep= node
16872 +    %if "&nprior_flag" ne "." %then %do;
16873 +      NPRIORS
16874 +    %end;
16875 +    %else %do;
16876 +      N
16877 +    %end;
16878 +    %if &numpred gt 0 %then %do;
16879 +      %do i=1 %to &numpred;
16880 +        &&tree_pred_vars&i
16881 +      %end;
16882 +    %end;
16883 +    );
16884 +    by node;
16885 +    if _a;
16886 +  run;
16888 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16890 +  data _null_;
16891 +    file x;
16892 +    set tempoutpath;
16893 +    by node descending varname;
16894 +    retain origvar oldnode string;
16895 +    length origvar $32 oldnode 8 string $200;
16897 +    if _N_ = 1 then do;
16898 +      origvar = varname;
16899 +      oldnode = node;
16900 +    end;
16902 +    if first.node then do;
16903 +       put "&EM_CODEBAR";
16904 +       put " Node = " node;
16905 +       put "&EM_CODEBAR";
16906 +    end;
16908 +      if first.varname then do;
16909 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16910 +            if MISSING(CHARACTER_VALUE) then do;
16911 +             if NUMERIC_VALUE ne .  then do;
16912 +              if ^first.node then do;
16913 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16914 +              end;
16915 +              else do;
16916 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16917 +              end;
16918 +             end;
16919 +            end;
16920 +            else do;
16921 +              if ^first.node then do;
16922 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16923 +              end;
16924 +              else do;
16925 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16926 +              end;
16927 +             end;
16928 +         end;
16929 +         else if RELATION in ("=") then do;
16930 +            if ^first.node then do;
16931 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16932 +            end;
16933 +            else do;
16934 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16935 +            end;
16936 +         end;
16937 +         else if RELATION in ("ISMISSING") then do;
16938 +            if ^first.node then do;
16939 +              string = " AND "|| strip(varname) || " equals Missing";
16940 +            end;
16941 +            else do;
16942 +              string = "if "|| strip(varname) ||" equals Missing";
16943 +            end;
16944 +         end;
16945 +         else if RELATION in ("ISNOTMISSING") then do;
16946 +            if ^first.node then do;
16947 +              string = " AND "|| strip(varname) || " equals All Values";
16948 +            end;
16949 +            else do;
16950 +              string = "if "|| strip(varname) ||" equals All Values";
16951 +            end;
16952 +         end;
16953 +         if ^missing(varname) then origvar = varname;
16954 +         oldnode=node;
16956 +      end;
16957 +      else do;
16958 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16959 +          if MISSING(CHARACTER_VALUE) then do;
16960 +           if  NUMERIC_VALUE ne .  then do;
16961 +            if ^MISSING(string) then
16962 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16963 +            else
16964 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16965 +           end;
16966 +          end;
16967 +          else do;
16968 +            if ^MISSING(string) then
16969 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16970 +            else
16971 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16972 +          end;
16974 +         end;
16975 +         else if RELATION in ("=") then do;
16976 +           string = strip(string)||", "||strip(character_value);
16977 +         end;
16978 +         else if RELATION in ("ISMISSING") then do;
16980 +         end;
16981 +         if ^missing(varname) then origvar = varname;
16982 +         oldnode=node;
16983 +      end;
16984 +      if last.varname then do;
16985 +         if RELATION in ("ISMISSING") then do;
16986 +           if ^first.varname then do;
16987 +             string = strip(string) || " or MISSING";
16988 +           end;
16989 +         end;
16990 +         put string;
16991 +         if ^missing(varname) then origvar = varname;
16992 +         oldnode=node;
16993 +      end;
16995 +      if last.node then do;
16996 +         put "then ";
16997 +         put " Tree Node Identifier   = " node;
16999 +         %if "&nprior_flag" ne "." %then %do;
17000 +           put " Number of Observations = " NPRIORS;
17001 +         %end;
17002 +         %else %do;
17003 +           put " Number of Observations = " N;
17004 +         %end;
17006 +         %if &numpred gt 0 %then %do;
17007 +           %do i=1 %to &numpred;
17008 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17009 +           %end;
17010 +         %end;
17012 +         put " ";
17013 +         if ^missing(varname) then origvar = varname;
17014 +         oldnode=node;
17015 +      end;
17017 +  run;
17019 +  proc datasets lib=work nolist;
17020 +    delete tempoutpath outnodes;
17021 +  run;
17023 +  %doendm:
17024 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS3.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596258 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633519616 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 70699408 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Created macro variable NLEAVES equal to 8.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_EMTREE has 2275 observations and 4 variables.
NOTE: The data set EMWS3.TREE2_OUTNODES has 15 observations and 24 variables.
NOTE: The data set EMWS3.TREE2_OUTPATH has 55 observations and 7 variables.
NOTE: The data set EMWS3.TREE2_OUTRULES has 386 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS3.TREE2_OUTSTATS has 105 observations and 5 variables.
NOTE: The data set EMWS3.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_OUTTOPOLOGY has 15 observations and 5 variables.
NOTE: External file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\TREEFLOW.sas opened.
NOTE: External file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\TREEPUBLISH.sas opened.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           4.35 seconds
      cpu time            3.12 seconds
 
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           4.35 seconds
      cpu time            3.12 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS3.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set EMWS3.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 15 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 55 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=24Apr2020:19:40:51,
      Create Time=24Apr2020:19:40:51
 
NOTE: 94 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 55 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
17026
17027  *------------------------------------------------------------*;
17028  * End TRAIN: Tree2;
17029  *------------------------------------------------------------*;
 
17030  *------------------------------------------------------------*;
17031  * Close any missing semi colons;
17032  *------------------------------------------------------------*;
17033  ;
17034  ;
17035  ;
17036  ;
17037  quit;
17038  *------------------------------------------------------------*;
17039  * Close any unbalanced quotes;
17040  *------------------------------------------------------------*;
17041  /*; *"; *'; */
17042  ;
17043  run;
17044  quit;
17045  /* Reset EM Options */
17046  options formchar="|----|+|---+=|-/\<>*";
17047  options nocenter ls=256 ps=10000;
17048  goptions reset=all device=GIF NODISPLAY;
 
17049  proc sort data=WORK.EM_USER_REPORT;
17050  by ID VIEW;
17051  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                April 24, 2020
Time:                19:40:53
*------------------------------------------------------------*
17153  %let EMEXCEPTIONSTRING=;
17154  *------------------------------------------------------------*;
17155  * SCORE: Tree2;
17156  *------------------------------------------------------------*;
17157  %let EM_ACTION = SCORE;
17158  %let syscc = 0;
17159  %macro main;
17160
17161    %if %upcase(&EM_ACTION) = CREATE %then %do;
17162      filename temp catalog 'sashelp.emmodl.tree_create.source';
17163      %include temp;
17164      filename temp;
17165
17166      %em_tree_create;
17167    %end;
17168
17169     %else
17170     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17171
17172         filename temp catalog 'sashelp.emmodl.tree_train.source';
17173         %include temp;
17174         filename temp;
17175         %em_tree_train;
17176     %end;
17177
17178    %else
17179    %if %upcase(&EM_ACTION) = SCORE %then %do;
17180      filename temp catalog 'sashelp.emmodl.tree_score.source';
17181      %include temp;
17182      filename temp;
17183
17184      %em_tree_score;
17185
17186    %end;
17187
17188    %else
17189    %if %upcase(&EM_ACTION) = REPORT %then %do;
17190
17191         filename temp catalog 'sashelp.emmodl.tree_report.source';
17192         %include temp;
17193         filename temp;
17194
17195         %em_tree_report;
17196     %end;
17197
17198    %else
17199    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17200
17201         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17202         %include temp;
17203         filename temp;
17204         %EM_TREE_OPENTREEVIEWER;
17205
17206     %end;
17207
17208    %else
17209    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17210
17211         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17212         %include temp;
17213         filename temp;
17214         %EM_TREE_CLOSETREEVIEWER;
17215
17216     %end;
17217
17218
17219     %doendm:
17220  %mend main;
17221
17222  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17224 +%macro em_tree_score;
17226 +   /* determine if multiple targets will be processed */
17227 +   %let em_tree_multipleTargets=N;
17228 +   %let em_tree_numTarget=1;
17229 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17230 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17231 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17232 +         %let em_tree_multipleTargets=N;
17233 +      %end;
17234 +      %else %do;
17235 +         /* create macro array of targets  */
17236 +         data _null_;
17237 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17238 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17239 +           if eof then
17240 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17241 +        run;
17243 +        %if &em_tree_numTarget gt 1 %then %do;
17244 +           %let em_tree_multipleTargets=Y;
17245 +        %end;
17246 +      %end;
17247 +   %end;
17249 +   /* build flow and publish scoring code */
17250 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17251 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17253 +   filename treeflow "&EM_USER_TREEFLOW";
17254 +   filename treepub "&EM_USER_TREEPUBLISH";
17256 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17257 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17259 +   %em_copyfile(infref=treeflow, outfref=flowref);
17260 +   %em_copyfile(infref=treepub, outfref=pubref);
17262 +   filename treeflow;
17263 +   filename treepub;
17265 +   /* if priors are used, add code to generate unadjusted residuals in export */
17266 +   %let useAdjPriors = N;
17267 +   data _null_;
17268 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17269 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17270 +   run;
17271 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17272 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17273 +      %include temp;
17274 +      filename temp;
17276 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17277 +      filename adjref "&EM_USER_adjResidualCode";
17278 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17280 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17282 +      filename adjref;
17283 +   %end;
17285 +   /* LEAF */
17286 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17287 +      data _null_;
17288 +        file flowref mod;
17289 +        put 'drop _LEAF_;';
17290 +      run;
17292 +      data _null_;
17293 +        file pubref mod;
17294 +        put 'drop _LEAF_;';
17295 +      run;
17297 +   %end;
17299 +   filename flowref;
17300 +   filename pubref;
17302 +   /* em_metachange code */
17303 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17304 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17305 +   %end;
17307 +   /* variable selection based on importance stat    */
17308 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17309 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17310 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17311 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17312 +     %let obs = %sysfunc(fetch(&dsid));
17313 +     %do %while(&obs=0);
17314 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17315 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17316 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17317 +       %let obs = %sysfunc(fetch(&dsid));
17318 +     %end;
17319 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17320 +   %end;
17322 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17323 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17324 +    %let tree_pred_vars = ;
17325 +    %let tree_pred_lvl =;
17326 +    %let numpred= 0;
17328 +    data _null_;
17329 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17330 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17331 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17332 +     if eof then
17333 +       call symput('numpred', strip(put(_N_, BEST.)));
17334 +    run;
17335 +   %end;
17337 +   %if &numpred ne 0 %then %do;
17338 +    %do i=1 %to &numpred;
17339 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17340 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17341 +    %end;
17342 +   %end;
17344 +   /* determine if multiple targets will be processed */
17345 +   %let em_tree_multipleTargets=N;
17346 +   %let em_tree_numTarget=1;
17347 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17348 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17349 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17350 +         %let em_tree_multipleTargets=N;
17351 +      %end;
17352 +      %else %do;
17353 +        data _null_;
17354 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17355 +          if eof then
17356 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17357 +        run;
17359 +        %if &em_tree_numTarget gt 1 %then %do;
17360 +           %let em_tree_multipleTargets=Y;
17361 +        %end;
17362 +     %end;
17363 +   %end;
17365 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17366 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17368 +      /* variable importance */
17369 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17370 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17372 +         %let validexist=0;
17373 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17374 +           %let validexist=1;
17375 +         %end;
17377 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17378 +         /* and the columns may not be generated                                                                                 */
17379 +         %let em_tree_cvexists=;
17380 +         %let em_tree_surrexists=.;
17381 +         data _null_;
17382 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17383 +            if eof then do ;
17384 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17385 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17386 +            end;
17387 +         run;
17389 +         data &EM_USER_OUTIMPORT;
17390 +            set &EM_USER_OUTIMPORT;
17392 +            /* format columns based on Precison value specified */
17393 +            format importance 15.&EM_PROPERTY_PRECISION
17394 +                 %if &validexist %then %do;
17395 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17396 +                 %end;
17397 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17398 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17399 +                 %end;
17400 +            ;
17401 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17402 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17403 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17404 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17405 +                 %if "&em_tree_surrexists" ne "" %then %do;
17406 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17407 +                 %end;
17408 +                 %if &validexist %then %do;
17409 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17410 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17411 +                 %end;
17412 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17413 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17414 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17415 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17416 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17417 +                 %end;
17418 +            ;
17419 +         run;
17421 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17422 +      %end;
17423 +   %end;
17425 +   %doendm:
17426 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=24Apr2020:19:40:52,
      Create Time=24Apr2020:19:40:52
 
NOTE: 170 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=24Apr2020:19:40:52,
      Create Time=24Apr2020:19:40:52
 
NOTE: 148 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5983,
      Last Modified=24Apr2020:19:40:52,
      Create Time=24Apr2020:19:40:52
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5354,
      Last Modified=24Apr2020:19:40:52,
      Create Time=24Apr2020:19:40:52
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 75 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 76 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 77 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 77 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 78 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 79 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 80 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 81 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 82 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 82 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 83 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 83 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 84 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 85 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 85 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 86 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 90 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
17427
17428  *------------------------------------------------------------*;
17429  * End SCORE: Tree2;
17430  *------------------------------------------------------------*;
 
17431  proc sort data=WORK.EM_METACHANGE;
17432  by key uname;
17433  run;
 
NOTE: There were 87 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17434  filename x "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\CDELTA_TRAIN.sas";
17435  data _null_;
17436  file x;
17437  put 'if upcase(NAME) = "BOTHPAYM" then do;';
17438  put 'ROLE = "REJECTED";';
17439  put 'end;';
17440  put 'else ';
17441  put 'if upcase(NAME) = "BUYPROP" then do;';
17442  put 'ROLE = "REJECTED";';
17443  put 'end;';
17444  put 'else ';
17445  put 'if upcase(NAME) = "CATALOGCNT" then do;';
17446  put 'ROLE = "REJECTED";';
17447  put 'end;';
17448  put 'else ';
17449  put 'if upcase(NAME) = "CCPAYM" then do;';
17450  put 'ROLE = "REJECTED";';
17451  put 'end;';
17452  put 'else ';
17453  put 'if upcase(NAME) = "DEPT01" then do;';
17454  put 'ROLE = "REJECTED";';
17455  put 'end;';
17456  put 'else ';
17457  put 'if upcase(NAME) = "DEPT02" then do;';
17458  put 'ROLE = "REJECTED";';
17459  put 'end;';
17460  put 'else ';
17461  put 'if upcase(NAME) = "DEPT03" then do;';
17462  put 'ROLE = "REJECTED";';
17463  put 'end;';
17464  put 'else ';
17465  put 'if upcase(NAME) = "DEPT04" then do;';
17466  put 'ROLE = "REJECTED";';
17467  put 'end;';
17468  put 'else ';
17469  put 'if upcase(NAME) = "DEPT05" then do;';
17470  put 'ROLE = "REJECTED";';
17471  put 'end;';
17472  put 'else ';
17473  put 'if upcase(NAME) = "DEPT06" then do;';
17474  put 'ROLE = "REJECTED";';
17475  put 'end;';
17476  put 'else ';
17477  put 'if upcase(NAME) = "DEPT07" then do;';
17478  put 'ROLE = "REJECTED";';
17479  put 'end;';
17480  put 'else ';
17481  put 'if upcase(NAME) = "DEPT08" then do;';
17482  put 'ROLE = "REJECTED";';
17483  put 'end;';
17484  put 'else ';
17485  put 'if upcase(NAME) = "DEPT09" then do;';
17486  put 'ROLE = "REJECTED";';
17487  put 'end;';
17488  put 'else ';
17489  put 'if upcase(NAME) = "DEPT10" then do;';
17490  put 'ROLE = "REJECTED";';
17491  put 'end;';
17492  put 'else ';
17493  put 'if upcase(NAME) = "DEPT11" then do;';
17494  put 'ROLE = "REJECTED";';
17495  put 'end;';
17496  put 'else ';
17497  put 'if upcase(NAME) = "DEPT12" then do;';
17498  put 'ROLE = "REJECTED";';
17499  put 'end;';
17500  put 'else ';
17501  put 'if upcase(NAME) = "DEPT13" then do;';
17502  put 'ROLE = "REJECTED";';
17503  put 'end;';
17504  put 'else ';
17505  put 'if upcase(NAME) = "DEPT14" then do;';
17506  put 'ROLE = "REJECTED";';
17507  put 'end;';
17508  put 'else ';
17509  put 'if upcase(NAME) = "DEPT15" then do;';
17510  put 'ROLE = "REJECTED";';
17511  put 'end;';
17512  put 'else ';
17513  put 'if upcase(NAME) = "DEPT16" then do;';
17514  put 'ROLE = "REJECTED";';
17515  put 'end;';
17516  put 'else ';
17517  put 'if upcase(NAME) = "DEPT17" then do;';
17518  put 'ROLE = "REJECTED";';
17519  put 'end;';
17520  put 'else ';
17521  put 'if upcase(NAME) = "DEPT18" then do;';
17522  put 'ROLE = "REJECTED";';
17523  put 'end;';
17524  put 'else ';
17525  put 'if upcase(NAME) = "DEPT19" then do;';
17526  put 'ROLE = "REJECTED";';
17527  put 'end;';
17528  put 'else ';
17529  put 'if upcase(NAME) = "DEPT20" then do;';
17530  put 'ROLE = "REJECTED";';
17531  put 'end;';
17532  put 'else ';
17533  put 'if upcase(NAME) = "DEPT21" then do;';
17534  put 'ROLE = "REJECTED";';
17535  put 'end;';
17536  put 'else ';
17537  put 'if upcase(NAME) = "DEPT22" then do;';
17538  put 'ROLE = "REJECTED";';
17539  put 'end;';
17540  put 'else ';
17541  put 'if upcase(NAME) = "DEPT23" then do;';
17542  put 'ROLE = "REJECTED";';
17543  put 'end;';
17544  put 'else ';
17545  put 'if upcase(NAME) = "DEPT24" then do;';
17546  put 'ROLE = "REJECTED";';
17547  put 'end;';
17548  put 'else ';
17549  put 'if upcase(NAME) = "DEPT26" then do;';
17550  put 'ROLE = "REJECTED";';
17551  put 'end;';
17552  put 'else ';
17553  put 'if upcase(NAME) = "DEPT27" then do;';
17554  put 'ROLE = "REJECTED";';
17555  put 'end;';
17556  put 'else ';
17557  put 'if upcase(NAME) = "DOLINDEA" then do;';
17558  put 'ROLE = "REJECTED";';
17559  put 'end;';
17560  put 'else ';
17561  put 'if upcase(NAME) = "DOLINDET" then do;';
17562  put 'ROLE = "REJECTED";';
17563  put 'end;';
17564  put 'else ';
17565  put 'if upcase(NAME) = "DOLLARQ01" then do;';
17566  put 'ROLE = "REJECTED";';
17567  put 'end;';
17568  put 'else ';
17569  put 'if upcase(NAME) = "DOLLARQ02" then do;';
17570  put 'ROLE = "REJECTED";';
17571  put 'end;';
17572  put 'else ';
17573  put 'if upcase(NAME) = "DOLLARQ03" then do;';
17574  put 'ROLE = "REJECTED";';
17575  put 'end;';
17576  put 'else ';
17577  put 'if upcase(NAME) = "DOLLARQ04" then do;';
17578  put 'ROLE = "REJECTED";';
17579  put 'end;';
17580  put 'else ';
17581  put 'if upcase(NAME) = "DOLLARQ05" then do;';
17582  put 'ROLE = "REJECTED";';
17583  put 'end;';
17584  put 'else ';
17585  put 'if upcase(NAME) = "DOLLARQ06" then do;';
17586  put 'ROLE = "REJECTED";';
17587  put 'end;';
17588  put 'else ';
17589  put 'if upcase(NAME) = "DOLLARQ07" then do;';
17590  put 'ROLE = "REJECTED";';
17591  put 'end;';
17592  put 'else ';
17593  put 'if upcase(NAME) = "DOLLARQ08" then do;';
17594  put 'ROLE = "REJECTED";';
17595  put 'end;';
17596  put 'else ';
17597  put 'if upcase(NAME) = "DOLLARQ09" then do;';
17598  put 'ROLE = "REJECTED";';
17599  put 'end;';
17600  put 'else ';
17601  put 'if upcase(NAME) = "DOLLARQ10" then do;';
17602  put 'ROLE = "REJECTED";';
17603  put 'end;';
17604  put 'else ';
17605  put 'if upcase(NAME) = "DOLLARQ11" then do;';
17606  put 'ROLE = "REJECTED";';
17607  put 'end;';
17608  put 'else ';
17609  put 'if upcase(NAME) = "DOLLARQ12" then do;';
17610  put 'ROLE = "REJECTED";';
17611  put 'end;';
17612  put 'else ';
17613  put 'if upcase(NAME) = "DOLLARQ13" then do;';
17614  put 'ROLE = "REJECTED";';
17615  put 'end;';
17616  put 'else ';
17617  put 'if upcase(NAME) = "DOLLARQ14" then do;';
17618  put 'ROLE = "REJECTED";';
17619  put 'end;';
17620  put 'else ';
17621  put 'if upcase(NAME) = "DOLLARQ15" then do;';
17622  put 'ROLE = "REJECTED";';
17623  put 'end;';
17624  put 'else ';
17625  put 'if upcase(NAME) = "DOLLARQ16" then do;';
17626  put 'ROLE = "REJECTED";';
17627  put 'end;';
17628  put 'else ';
17629  put 'if upcase(NAME) = "DOLLARQ17" then do;';
17630  put 'ROLE = "REJECTED";';
17631  put 'end;';
17632  put 'else ';
17633  put 'if upcase(NAME) = "DOLLARQ18" then do;';
17634  put 'ROLE = "REJECTED";';
17635  put 'end;';
17636  put 'else ';
17637  put 'if upcase(NAME) = "DOLLARQ19" then do;';
17638  put 'ROLE = "REJECTED";';
17639  put 'end;';
17640  put 'else ';
17641  put 'if upcase(NAME) = "DOLLARQ20" then do;';
17642  put 'ROLE = "REJECTED";';
17643  put 'end;';
17644  put 'else ';
17645  put 'if upcase(NAME) = "DOLLARQ21" then do;';
17646  put 'ROLE = "REJECTED";';
17647  put 'end;';
17648  put 'else ';
17649  put 'if upcase(NAME) = "DOLLARQ22" then do;';
17650  put 'ROLE = "REJECTED";';
17651  put 'end;';
17652  put 'else ';
17653  put 'if upcase(NAME) = "DOLNETDA" then do;';
17654  put 'ROLE = "REJECTED";';
17655  put 'end;';
17656  put 'else ';
17657  put 'if upcase(NAME) = "DOLNETDT" then do;';
17658  put 'ROLE = "REJECTED";';
17659  put 'end;';
17660  put 'else ';
17661  put 'if upcase(NAME) = "METHPAYM" then do;';
17662  put 'ROLE = "REJECTED";';
17663  put 'end;';
17664  put 'else ';
17665  put 'if upcase(NAME) = "MONLAST" then do;';
17666  put 'ROLE = "REJECTED";';
17667  put 'end;';
17668  put 'else ';
17669  put 'if upcase(NAME) = "PCPAYM" then do;';
17670  put 'ROLE = "REJECTED";';
17671  put 'end;';
17672  put 'else ';
17673  put 'if upcase(NAME) = "Q_RESPOND0" then do;';
17674  put 'ROLE = "ASSESS";';
17675  put 'end;';
17676  put 'else ';
17677  put 'if upcase(NAME) = "Q_RESPOND1" then do;';
17678  put 'ROLE = "ASSESS";';
17679  put 'end;';
17680  put 'else ';
17681  put 'if upcase(NAME) = "TOTORDQ01" then do;';
17682  put 'ROLE = "REJECTED";';
17683  put 'end;';
17684  put 'else ';
17685  put 'if upcase(NAME) = "TOTORDQ02" then do;';
17686  put 'ROLE = "REJECTED";';
17687  put 'end;';
17688  put 'else ';
17689  put 'if upcase(NAME) = "TOTORDQ03" then do;';
17690  put 'ROLE = "REJECTED";';
17691  put 'end;';
17692  put 'else ';
17693  put 'if upcase(NAME) = "TOTORDQ04" then do;';
17694  put 'ROLE = "REJECTED";';
17695  put 'end;';
17696  put 'else ';
17697  put 'if upcase(NAME) = "TOTORDQ05" then do;';
17698  put 'ROLE = "REJECTED";';
17699  put 'end;';
17700  put 'else ';
17701  put 'if upcase(NAME) = "TOTORDQ06" then do;';
17702  put 'ROLE = "REJECTED";';
17703  put 'end;';
17704  put 'else ';
17705  put 'if upcase(NAME) = "TOTORDQ07" then do;';
17706  put 'ROLE = "REJECTED";';
17707  put 'end;';
17708  put 'else ';
17709  put 'if upcase(NAME) = "TOTORDQ08" then do;';
17710  put 'ROLE = "REJECTED";';
17711  put 'end;';
17712  put 'else ';
17713  put 'if upcase(NAME) = "TOTORDQ09" then do;';
17714  put 'ROLE = "REJECTED";';
17715  put 'end;';
17716  put 'else ';
17717  put 'if upcase(NAME) = "TOTORDQ10" then do;';
17718  put 'ROLE = "REJECTED";';
17719  put 'end;';
17720  put 'else ';
17721  put 'if upcase(NAME) = "TOTORDQ11" then do;';
17722  put 'ROLE = "REJECTED";';
17723  put 'end;';
17724  put 'else ';
17725  put 'if upcase(NAME) = "TOTORDQ12" then do;';
17726  put 'ROLE = "REJECTED";';
17727  put 'end;';
17728  put 'else ';
17729  put 'if upcase(NAME) = "TOTORDQ13" then do;';
17730  put 'ROLE = "REJECTED";';
17731  put 'end;';
17732  put 'else ';
17733  put 'if upcase(NAME) = "TOTORDQ14" then do;';
17734  put 'ROLE = "REJECTED";';
17735  put 'end;';
17736  put 'else ';
17737  put 'if upcase(NAME) = "TOTORDQ15" then do;';
17738  put 'ROLE = "REJECTED";';
17739  put 'end;';
17740  put 'else ';
17741  put 'if upcase(NAME) = "TOTORDQ16" then do;';
17742  put 'ROLE = "REJECTED";';
17743  put 'end;';
17744  put 'else ';
17745  put 'if upcase(NAME) = "TOTORDQ17" then do;';
17746  put 'ROLE = "REJECTED";';
17747  put 'end;';
17748  put 'else ';
17749  put 'if upcase(NAME) = "TOTORDQ18" then do;';
17750  put 'ROLE = "REJECTED";';
17751  put 'end;';
17752  put 'else ';
17753  put 'if upcase(NAME) = "TOTORDQ19" then do;';
17754  put 'ROLE = "REJECTED";';
17755  put 'end;';
17756  put 'else ';
17757  put 'if upcase(NAME) = "TOTORDQ20" then do;';
17758  put 'ROLE = "REJECTED";';
17759  put 'end;';
17760  put 'else ';
17761  put 'if upcase(NAME) = "TOTORDQ21" then do;';
17762  put 'ROLE = "REJECTED";';
17763  put 'end;';
17764  put 'else ';
17765  put 'if upcase(NAME) = "TOTORDQ22" then do;';
17766  put 'ROLE = "REJECTED";';
17767  put 'end;';
17768  put 'else ';
17769  put 'if upcase(NAME) = "UNITSIDD" then do;';
17770  put 'ROLE = "REJECTED";';
17771  put 'end;';
17772  put 'else ';
17773  put 'if upcase(NAME) = "UNITSLAP" then do;';
17774  put 'ROLE = "REJECTED";';
17775  put 'end;';
17776  put 'else ';
17777  put 'if upcase(NAME) = "UNTLANPO" then do;';
17778  put 'ROLE = "REJECTED";';
17779  put 'end;';
17780  put 'else ';
17781  put 'if upcase(NAME) = "_NODE_" then do;';
17782  put 'ROLE = "SEGMENT";';
17783  put 'LEVEL = "NOMINAL";';
17784  put 'end;';
17785  run;
 
NOTE: The file X is:
      Filename=\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=24Apr2020:19:40:54,
      Create Time=24Apr2020:19:39:42
 
NOTE: 348 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17786  filename x;
NOTE: Fileref X has been deassigned.
 
17787  filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas";
17788  *------------------------------------------------------------*;
17789  * Tree2: Scoring DATA data;
17790  *------------------------------------------------------------*;
17791  data EMWS3.Tree2_TRAIN
17792  / view=EMWS3.Tree2_TRAIN
17793  ;
17794  set EMWS3.Part_TRAIN
17795  ;
17796  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas.
17797 +****************************************************************;
17798 +******             DECISION TREE SCORING CODE             ******;
17799 +****************************************************************;
17800 +
17801 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17802 +LENGTH F_RESPOND  $   12;
17803 +LENGTH I_RESPOND  $   12;
17804 +LENGTH _WARN_  $    4;
17805 +
17806 +******              LABELS FOR NEW VARIABLES              ******;
17807 +label _NODE_ = 'Node' ;
17808 +label _LEAF_ = 'Leaf' ;
17809 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17810 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17811 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17812 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17813 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17814 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17815 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17816 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17817 +label F_RESPOND = 'From: RESPOND' ;
17818 +label I_RESPOND = 'Into: RESPOND' ;
17819 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17820 +label _WARN_ = 'Warnings' ;
17821 +
17822 +
17823 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17824 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17825 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17826 +
17827 +
17828 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17829 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17830 +
17831 +******             ASSIGN OBSERVATION TO NODE             ******;
17832 +IF  NOT MISSING(DOLL24 ) AND
17833 +                 121.2 <= DOLL24  THEN DO;
17834 +  IF  NOT MISSING(DEPT25 ) AND
17835 +                    32.5 <= DEPT25  THEN DO;
17836 +    _NODE_  =                    7;
17837 +    _LEAF_  =                    8;
17838 +    P_RESPOND1  =      0.4390243902439;
17839 +    P_RESPOND0  =     0.56097560975609;
17840 +    Q_RESPOND1  =      0.4390243902439;
17841 +    Q_RESPOND0  =     0.56097560975609;
17842 +    V_RESPOND1  =      0.3076923076923;
17843 +    V_RESPOND0  =     0.69230769230769;
17844 +    I_RESPOND  = '0' ;
17845 +    U_RESPOND  =                    0;
17846 +    END;
17847 +  ELSE DO;
17848 +    IF  NOT MISSING(FREQPRCH ) AND
17849 +                       8.5 <= FREQPRCH  THEN DO;
17850 +      _NODE_  =                   13;
17851 +      _LEAF_  =                    7;
17852 +      P_RESPOND1  =     0.17607413647851;
17853 +      P_RESPOND0  =     0.82392586352148;
17854 +      Q_RESPOND1  =     0.17607413647851;
17855 +      Q_RESPOND0  =     0.82392586352148;
17856 +      V_RESPOND1  =     0.17874396135265;
17857 +      V_RESPOND0  =     0.82125603864734;
17858 +      I_RESPOND  = '0' ;
17859 +      U_RESPOND  =                    0;
17860 +      END;
17861 +    ELSE DO;
17862 +      _NODE_  =                   12;
17863 +      _LEAF_  =                    6;
17864 +      P_RESPOND1  =     0.10013175230566;
17865 +      P_RESPOND0  =     0.89986824769433;
17866 +      Q_RESPOND1  =     0.10013175230566;
17867 +      Q_RESPOND0  =     0.89986824769433;
17868 +      V_RESPOND1  =       0.089590443686;
17869 +      V_RESPOND0  =     0.91040955631399;
17870 +      I_RESPOND  = '0' ;
17871 +      U_RESPOND  =                    0;
17872 +      END;
17873 +    END;
17874 +  END;
17875 +ELSE DO;
17876 +  IF  NOT MISSING(TENURE ) AND
17877 +    TENURE  <                  1.5 THEN DO;
17878 +    IF  NOT MISSING(DAYLAST ) AND
17879 +                      46.5 <= DAYLAST  THEN DO;
17880 +      _NODE_  =                    9;
17881 +      _LEAF_  =                    2;
17882 +      P_RESPOND1  =     0.11111111111111;
17883 +      P_RESPOND0  =     0.88888888888888;
17884 +      Q_RESPOND1  =     0.11111111111111;
17885 +      Q_RESPOND0  =     0.88888888888888;
17886 +      V_RESPOND1  =                    0;
17887 +      V_RESPOND0  =                    1;
17888 +      I_RESPOND  = '0' ;
17889 +      U_RESPOND  =                    0;
17890 +      END;
17891 +    ELSE DO;
17892 +      _NODE_  =                    8;
17893 +      _LEAF_  =                    1;
17894 +      P_RESPOND1  =     0.95454545454545;
17895 +      P_RESPOND0  =     0.04545454545454;
17896 +      Q_RESPOND1  =     0.95454545454545;
17897 +      Q_RESPOND0  =     0.04545454545454;
17898 +      V_RESPOND1  =                    1;
17899 +      V_RESPOND0  =                    0;
17900 +      I_RESPOND  = '1' ;
17901 +      U_RESPOND  =                    1;
17902 +      END;
17903 +    END;
17904 +  ELSE DO;
17905 +    IF  NOT MISSING(DOLL24 ) AND
17906 +                    23.975 <= DOLL24  THEN DO;
17907 +      IF  NOT MISSING(ACTBUY ) AND
17908 +                         1.5 <= ACTBUY  THEN DO;
17909 +        _NODE_  =                   19;
17910 +        _LEAF_  =                    5;
17911 +        P_RESPOND1  =     0.10306612486147;
17912 +        P_RESPOND0  =     0.89693387513852;
17913 +        Q_RESPOND1  =     0.10306612486147;
17914 +        Q_RESPOND0  =     0.89693387513852;
17915 +        V_RESPOND1  =     0.09674922600619;
17916 +        V_RESPOND0  =      0.9032507739938;
17917 +        I_RESPOND  = '0' ;
17918 +        U_RESPOND  =                    0;
17919 +        END;
17920 +      ELSE DO;
17921 +        _NODE_  =                   18;
17922 +        _LEAF_  =                    4;
17923 +        P_RESPOND1  =     0.05328917657684;
17924 +        P_RESPOND0  =     0.94671082342315;
17925 +        Q_RESPOND1  =     0.05328917657684;
17926 +        Q_RESPOND0  =     0.94671082342315;
17927 +        V_RESPOND1  =     0.05952028427598;
17928 +        V_RESPOND0  =     0.94047971572401;
17929 +        I_RESPOND  = '0' ;
17930 +        U_RESPOND  =                    0;
17931 +        END;
17932 +      END;
17933 +    ELSE DO;
17934 +      _NODE_  =                   10;
17935 +      _LEAF_  =                    3;
17936 +      P_RESPOND1  =     0.03609902631033;
17937 +      P_RESPOND0  =     0.96390097368966;
17938 +      Q_RESPOND1  =     0.03609902631033;
17939 +      Q_RESPOND0  =     0.96390097368966;
17940 +      V_RESPOND1  =     0.03674786591713;
17941 +      V_RESPOND0  =     0.96325213408286;
17942 +      I_RESPOND  = '0' ;
17943 +      U_RESPOND  =                    0;
17944 +      END;
17945 +    END;
17946 +  END;
17947 +
17948 +*****  RESIDUALS R_ *************;
17949 +IF  F_RESPOND  NE '1'
17950 +AND F_RESPOND  NE '0'  THEN DO;
17951 +        R_RESPOND1  = .;
17952 +        R_RESPOND0  = .;
17953 + END;
17954 + ELSE DO;
17955 +       R_RESPOND1  =  -P_RESPOND1 ;
17956 +       R_RESPOND0  =  -P_RESPOND0 ;
17957 +       SELECT( F_RESPOND  );
17958 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17959 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17960 +       END;
17961 + END;
17962 +
17963 +****************************************************************;
17964 +******          END OF DECISION TREE SCORING CODE         ******;
17965 +****************************************************************;
17966 +
17967 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17968  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
17969  quit;
17970  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17971  filename emflow "\\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas";
17972  *------------------------------------------------------------*;
17973  * Tree2: Scoring VALIDATE data;
17974  *------------------------------------------------------------*;
17975  data EMWS3.Tree2_VALIDATE
17976  / view=EMWS3.Tree2_VALIDATE
17977  ;
17978  set EMWS3.Part_VALIDATE
17979  ;
17980  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\apporto.com\dfs\UNCC\Users\skokse_uncc\Desktop\BIA-PROJECT\Predictive Analysis\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas.
17981 +****************************************************************;
17982 +******             DECISION TREE SCORING CODE             ******;
17983 +****************************************************************;
17984 +
17985 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17986 +LENGTH F_RESPOND  $   12;
17987 +LENGTH I_RESPOND  $   12;
17988 +LENGTH _WARN_  $    4;
17989 +
17990 +******              LABELS FOR NEW VARIABLES              ******;
17991 +label _NODE_ = 'Node' ;
17992 +label _LEAF_ = 'Leaf' ;
17993 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17994 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17995 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17996 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17997 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17998 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17999 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
18000 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
18001 +label F_RESPOND = 'From: RESPOND' ;
18002 +label I_RESPOND = 'Into: RESPOND' ;
18003 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
18004 +label _WARN_ = 'Warnings' ;
18005 +
18006 +
18007 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18008 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
18009 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
18010 +
18011 +
18012 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
18013 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
18014 +
18015 +******             ASSIGN OBSERVATION TO NODE             ******;
18016 +IF  NOT MISSING(DOLL24 ) AND
18017 +                 121.2 <= DOLL24  THEN DO;
18018 +  IF  NOT MISSING(DEPT25 ) AND
18019 +                    32.5 <= DEPT25  THEN DO;
18020 +    _NODE_  =                    7;
18021 +    _LEAF_  =                    8;
18022 +    P_RESPOND1  =      0.4390243902439;
18023 +    P_RESPOND0  =     0.56097560975609;
18024 +    Q_RESPOND1  =      0.4390243902439;
18025 +    Q_RESPOND0  =     0.56097560975609;
18026 +    V_RESPOND1  =      0.3076923076923;
18027 +    V_RESPOND0  =     0.69230769230769;
18028 +    I_RESPOND  = '0' ;
18029 +    U_RESPOND  =                    0;
18030 +    END;
18031 +  ELSE DO;
18032 +    IF  NOT MISSING(FREQPRCH ) AND
18033 +                       8.5 <= FREQPRCH  THEN DO;
18034 +      _NODE_  =                   13;
18035 +      _LEAF_  =                    7;
18036 +      P_RESPOND1  =     0.17607413647851;
18037 +      P_RESPOND0  =     0.82392586352148;
18038 +      Q_RESPOND1  =     0.17607413647851;
18039 +      Q_RESPOND0  =     0.82392586352148;
18040 +      V_RESPOND1  =     0.17874396135265;
18041 +      V_RESPOND0  =     0.82125603864734;
18042 +      I_RESPOND  = '0' ;
18043 +      U_RESPOND  =                    0;
18044 +      END;
18045 +    ELSE DO;
18046 +      _NODE_  =                   12;
18047 +      _LEAF_  =                    6;
18048 +      P_RESPOND1  =     0.10013175230566;
18049 +      P_RESPOND0  =     0.89986824769433;
18050 +      Q_RESPOND1  =     0.10013175230566;
18051 +      Q_RESPOND0  =     0.89986824769433;
18052 +      V_RESPOND1  =       0.089590443686;
18053 +      V_RESPOND0  =     0.91040955631399;
18054 +      I_RESPOND  = '0' ;
18055 +      U_RESPOND  =                    0;
18056 +      END;
18057 +    END;
18058 +  END;
18059 +ELSE DO;
18060 +  IF  NOT MISSING(TENURE ) AND
18061 +    TENURE  <                  1.5 THEN DO;
18062 +    IF  NOT MISSING(DAYLAST ) AND
18063 +                      46.5 <= DAYLAST  THEN DO;
18064 +      _NODE_  =                    9;
18065 +      _LEAF_  =                    2;
18066 +      P_RESPOND1  =     0.11111111111111;
18067 +      P_RESPOND0  =     0.88888888888888;
18068 +      Q_RESPOND1  =     0.11111111111111;
18069 +      Q_RESPOND0  =     0.88888888888888;
18070 +      V_RESPOND1  =                    0;
18071 +      V_RESPOND0  =                    1;
18072 +      I_RESPOND  = '0' ;
18073 +      U_RESPOND  =                    0;
18074 +      END;
18075 +    ELSE DO;
18076 +      _NODE_  =                    8;
18077 +      _LEAF_  =                    1;
18078 +      P_RESPOND1  =     0.95454545454545;
18079 +      P_RESPOND0  =     0.04545454545454;
18080 +      Q_RESPOND1  =     0.95454545454545;
18081 +      Q_RESPOND0  =     0.04545454545454;
18082 +      V_RESPOND1  =                    1;
18083 +      V_RESPOND0  =                    0;
18084 +      I_RESPOND  = '1' ;
18085 +      U_RESPOND  =                    1;
18086 +      END;
18087 +    END;
18088 +  ELSE DO;
18089 +    IF  NOT MISSING(DOLL24 ) AND
18090 +                    23.975 <= DOLL24  THEN DO;
18091 +      IF  NOT MISSING(ACTBUY ) AND
18092 +                         1.5 <= ACTBUY  THEN DO;
18093 +        _NODE_  =                   19;
18094 +        _LEAF_  =                    5;
18095 +        P_RESPOND1  =     0.10306612486147;
18096 +        P_RESPOND0  =     0.89693387513852;
18097 +        Q_RESPOND1  =     0.10306612486147;
18098 +        Q_RESPOND0  =     0.89693387513852;
18099 +        V_RESPOND1  =     0.09674922600619;
18100 +        V_RESPOND0  =      0.9032507739938;
18101 +        I_RESPOND  = '0' ;
18102 +        U_RESPOND  =                    0;
18103 +        END;
18104 +      ELSE DO;
18105 +        _NODE_  =                   18;
18106 +        _LEAF_  =                    4;
18107 +        P_RESPOND1  =     0.05328917657684;
18108 +        P_RESPOND0  =     0.94671082342315;
18109 +        Q_RESPOND1  =     0.05328917657684;
18110 +        Q_RESPOND0  =     0.94671082342315;
18111 +        V_RESPOND1  =     0.05952028427598;
18112 +        V_RESPOND0  =     0.94047971572401;
18113 +        I_RESPOND  = '0' ;
18114 +        U_RESPOND  =                    0;
18115 +        END;
18116 +      END;
18117 +    ELSE DO;
18118 +      _NODE_  =                   10;
18119 +      _LEAF_  =                    3;
18120 +      P_RESPOND1  =     0.03609902631033;
18121 +      P_RESPOND0  =     0.96390097368966;
18122 +      Q_RESPOND1  =     0.03609902631033;
18123 +      Q_RESPOND0  =     0.96390097368966;
18124 +      V_RESPOND1  =     0.03674786591713;
18125 +      V_RESPOND0  =     0.96325213408286;
18126 +      I_RESPOND  = '0' ;
18127 +      U_RESPOND  =                    0;
18128 +      END;
18129 +    END;
18130 +  END;
18131 +
18132 +*****  RESIDUALS R_ *************;
18133 +IF  F_RESPOND  NE '1'
18134 +AND F_RESPOND  NE '0'  THEN DO;
18135 +        R_RESPOND1  = .;
18136 +        R_RESPOND0  = .;
18137 + END;
18138 + ELSE DO;
18139 +       R_RESPOND1  =  -P_RESPOND1 ;
18140 +       R_RESPOND0  =  -P_RESPOND0 ;
18141 +       SELECT( F_RESPOND  );
18142 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
18143 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
18144 +       END;
18145 + END;
18146 +
18147 +****************************************************************;
18148 +******          END OF DECISION TREE SCORING CODE         ******;
18149 +****************************************************************;
18150 +
18151 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18152  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.00 seconds
 
 
18153  quit;
18154  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
18156  proc sort data=WORK.EM_USER_REPORT;
18157  by ID VIEW;
18158  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18159  *------------------------------------------------------------*;
18160  * Tree2: Computing metadata for TRAIN data;
18161  *------------------------------------------------------------*;
 
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
18854  data EMWS3.Tree2_EMINFO;
18855  length TARGET KEY $32 DATA $43;
18856  input TARGET KEY DATA $;
18857  cards;
 
NOTE: The data set EMWS3.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
 
 
18861  run;
18862  proc sort data = EMWS3.Tree2_EMINFO NOTHREADS;
18863  by TARGET KEY;
18864  run;
 
NOTE: There were 3 observations read from the data set EMWS3.TREE2_EMINFO.
NOTE: The data set EMWS3.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
18865  proc sort data = EMWS3.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18866  by TARGET KEY;
18867  run;
 
NOTE: There were 4 observations read from the data set EMWS3.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18868  proc sort data = EMWS3.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18869  by TARGET KEY;
18870  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS3.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18871  data EMWS3.Tree2_EMINFO;
18872  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18873  by TARGET KEY;
18874  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TREE2_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
 
 
18875  proc datasets lib=work nolist;
18876  delete TEMP_INFO SORTEDEMINFO;
18877  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18878  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS3.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                April 24, 2020
Time:                19:40:56
*------------------------------------------------------------*
18902  data EMWS3.Tree2_EMOUTFIT;
18903  set EMWS3.Tree2_EMOUTFIT;
18904  length TargetLabel $200;
18905  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18906  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18907  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_EMOUTFIT.
NOTE: The data set EMWS3.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
 
 
18908  proc sort data=EMWS3.Tree2_EMREPORTFIT nothreads;
18909  by TARGET;
18910  run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE2_EMREPORTFIT.
NOTE: The data set EMWS3.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.17 seconds
      cpu time            0.01 seconds
 
 
18911  %let _EMwarndup = 0;
18912  %let _EMtargetdup =;
18913  %let _EMASEtargetdup =;
18914  data _null_;
18915  set EMWS3.Tree2_EMOUTFIT;
18916  if .<_ASE_<0.000001 then do;
18917  call symput('_EMwarndup', '1');
18918  call symput('_EMtargetdup', target);
18919  call symput('_EMASEtargetdup', put(_ASE_, best.));
18920  end;
18921  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18922  %let EMEXCEPTIONSTRING=;
18923  *------------------------------------------------------------*;
18924  * REPORT: Tree2;
18925  *------------------------------------------------------------*;
18926  %let EM_ACTION = REPORT;
18927  %let syscc = 0;
18928  %macro main;
18929
18930    %if %upcase(&EM_ACTION) = CREATE %then %do;
18931      filename temp catalog 'sashelp.emmodl.tree_create.source';
18932      %include temp;
18933      filename temp;
18934
18935      %em_tree_create;
18936    %end;
18937
18938     %else
18939     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18940
18941         filename temp catalog 'sashelp.emmodl.tree_train.source';
18942         %include temp;
18943         filename temp;
18944         %em_tree_train;
18945     %end;
18946
18947    %else
18948    %if %upcase(&EM_ACTION) = SCORE %then %do;
18949      filename temp catalog 'sashelp.emmodl.tree_score.source';
18950      %include temp;
18951      filename temp;
18952
18953      %em_tree_score;
18954
18955    %end;
18956
18957    %else
18958    %if %upcase(&EM_ACTION) = REPORT %then %do;
18959
18960         filename temp catalog 'sashelp.emmodl.tree_report.source';
18961         %include temp;
18962         filename temp;
18963
18964         %em_tree_report;
18965     %end;
18966
18967    %else
18968    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18969
18970         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18971         %include temp;
18972         filename temp;
18973         %EM_TREE_OPENTREEVIEWER;
18974
18975     %end;
18976
18977    %else
18978    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18979
18980         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18981         %include temp;
18982         filename temp;
18983         %EM_TREE_CLOSETREEVIEWER;
18984
18985     %end;
18986
18987
18988     %doendm:
18989  %mend main;
18990
18991  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18993 +%macro em_tree_makePlotDs( multipleTar= );
18995 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18996 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18997 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18998 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19000 +  /* determine if validation statistics will be displayed */
19001 +  %let validflag=N;
19002 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19003 +    /* determine if validation data exists */
19004 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19005 +      %let validflag=Y;
19006 +    %end;
19007 +  %end;
19009 +   /* retrieve name of decmeta even in presence of multiple targets */
19010 +   %let decmeta = ;
19011 +   %if &EM_DEC_DECMETA eq %then %do;
19012 +     data _Target;
19013 +       set &em_data_variableset;
19014 +       where ROLE='TARGET' and USE in('D', 'Y');
19015 +       keep NAME;
19016 +     run;
19017 +     proc sort data=_Target;
19018 +       by NAME;
19019 +     run;
19020 +     proc sort data=EM_TARGETDECINFO;
19021 +       by TARGET;
19022 +     run;
19023 +     data _Target;
19024 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19025 +       by NAME;
19026 +       if _a then do;
19027 +         call symput('decmeta', trim(DECMETA));
19028 +       end;
19029 +     run;
19030 +     proc delete data=_Target;run;
19031 +   %end;
19032 +   %else %let decmeta = &EM_DEC_DECMETA;
19035 +  /* retrieve targetEvent from decmeta */
19036 +  %let targetEvent=;
19037 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19038 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19039 +      data _null_;
19040 +       set &DECMETA(where=(_TYPE_="TARGET"));
19041 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19042 +      run;
19043 +    %end;
19044 +  %end;
19046 +  /* retrieve predicted var for targetEvent from decmeta */
19047 +  %let predTarget=;
19048 +  %let predLvl=;
19049 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19050 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19051 +      data _null_;
19052 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19053 +       call symput('predTarget', strip(VARIABLE));
19054 +       call symput('predLvl', strip(LEVEL));
19055 +      run;
19056 +    %end;
19057 +  %end;
19058 +  %else %do;
19059 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19060 +      data _null_;
19061 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19062 +       call symput('predTarget', strip(VARIABLE));
19063 +      run;
19064 +    %end;
19065 +  %end;
19067 +  /* create BelowText value */
19068 +  data belowtext;
19069 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19070 +    keep node belowtext;
19071 +  run;
19073 +  /* replace belowtext with variable label if it exists */
19074 +  data belowtext2;
19075 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19076 +    keep node belowtextlbl;
19077 +  run;
19079 +  proc sort data=belowtext; by node; run;
19080 +  proc sort data=belowtext2; by node; run;
19082 +  data belowtext;
19083 +    merge belowtext belowtext2(in=_a);
19084 +    by node;
19085 +    if _a then belowtext=belowtextlbl;
19086 +    keep node belowtext;
19087 +  run;
19089 +  /* create AboveText value */
19090 +  data abovetext;
19091 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19092 +  run;
19093 +  proc sort data=abovetext; by node numeric_value; run;
19095 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19096 +  data abovetext;
19097 +    set abovetext(rename=(node=parent));
19098 +    by parent numeric_value;
19099 +    retain abovetext tempstring flag branch origval origchar ;
19100 +    length abovetext $256;
19101 +    length tempstring origchar $64;
19103 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19104 +      if first.parent then do;
19105 +        if missing(character_value) then do;
19106 +          numeric_value = round(numeric_value, &sp_precision);
19107 +          abovetext = "< "||strip(NUMERIC_VALUE);
19108 +          branch = 1;
19109 +          origval = numeric_value;
19110 +          output;
19111 +        end;
19112 +        else do;
19113 +          abovetext = "< "||strip(CHARACTER_VALUE);
19114 +          branch = 1;
19115 +          origchar = character_value;
19116 +          output;
19117 +        end;
19119 +        if first.parent AND last.parent then do;
19120 +          if missing(character_value) then do;
19121 +            numeric_value = round(numeric_value, &sp_precision);
19122 +            branch = branch + 1;
19123 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19124 +            output;
19125 +          end;
19126 +          else do;
19127 +            branch = branch + 1;
19128 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19129 +            output;
19130 +          end;
19131 +        end;
19132 +      end;
19133 +      else if last.parent then do;
19134 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19135 +          if missing(character_value) then do;
19136 +            numeric_value = round(numeric_value, &sp_precision);
19137 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19138 +          end;
19139 +          else do;
19140 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19141 +          end;
19142 +          branch = branch + 1;
19143 +          output;
19145 +          if missing(character_value) then do;
19146 +            numeric_value = round(numeric_value, &sp_precision);
19147 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19148 +          end;
19149 +          else do;
19150 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19151 +          end;
19152 +          branch = branch + 1;
19153 +          output;
19154 +        end;
19155 +        else do;
19156 +          if missing(character_value) then do;
19157 +            numeric_value = round(numeric_value, &sp_precision);
19158 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19159 +          end;
19160 +          else do;
19161 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19162 +          end;
19163 +          branch = branch + 1;
19164 +          output;
19165 +        end;
19166 +      end;
19167 +      else do;
19168 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19169 +          if missing(character_value) then do;
19170 +            numeric_value = round(numeric_value,&sp_precision);
19171 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19172 +            origval = numeric_value;
19173 +          end;
19174 +          else do;
19175 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19176 +            origchar = character_value;
19177 +          end;
19178 +          branch = branch + 1;
19179 +          output;
19181 +        end;
19182 +        else do;
19183 +          if missing(character_value) then do;
19184 +            numeric_value = round(numeric_value, &sp_precision);
19185 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19186 +            origval = numeric_value;
19187 +          end;
19188 +          else do;
19189 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19190 +            origval = character_value;
19191 +          end;
19192 +          branch = branch + 1;
19193 +          output;
19194 +        end;
19195 +      end;
19196 +    end;
19197 +    else do;
19198 +       if first.numeric_value then do;
19199 +         flag = 0;
19200 +         abovetext = strip(CHARACTER_VALUE);
19201 +         branch = numeric_value;
19202 +         if first.numeric_value AND last.numeric_value then do;
19203 +           output;
19204 +         end;
19205 +       end;
19206 +       else if last.numeric_value then do;
19207 +         if flag=0 then do;
19208 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19209 +           length = length(strip(tempstring));
19210 +           if length < 32 then do;
19211 +             abovetext = strip(tempstring);
19212 +           end;
19213 +           else do;
19214 +             abovetext = strip(abovetext)||", ...";
19215 +             flag = 1;
19216 +           end;
19217 +         end;
19218 +         branch = numeric_value;
19219 +         output;
19220 +       end;
19221 +       else do;
19222 +         if flag=0 then do;
19223 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19224 +           length = length(strip(tempstring));
19225 +           if length < 32 then do;
19226 +             abovetext = strip(tempstring);
19227 +           end;
19228 +           else do;
19229 +             abovetext = strip(abovetext)||", ...";
19230 +             flag=1;
19231 +           end;
19232 +         end;
19233 +         branch = numeric_value;
19234 +       end;
19235 +    end;
19236 +    keep parent branch abovetext;
19237 +  run;
19239 +  /* Missing value to abovetext */
19240 +  data tempmissing;
19241 +    set &EM_USER_OUTRULES;
19242 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19243 +    rename node=parent numeric_value=branch character_value=misschar;
19244 +  run;
19247 +  proc sort data=abovetext; by parent branch; run;
19248 +  proc sort data=tempmissing; by parent branch; run;
19249 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19251 +  data tempoutnodes;
19252 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19253 +    by parent branch;
19254 +    length traintotal validtotal 8;
19255 +    retain traintotal validtotal;
19257 +    if _a then do;
19258 +      if ^MISSING(abovetext) then do;
19259 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19260 +      end;
19261 +      else do;
19262 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19263 +      end;
19264 +    end;
19265 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19267 +    if node=1 then do;
19268 +      traintotal = N;
19269 +      validtotal=VN;
19270 +    end;
19272 +    drop role rank stat misschar belowtext;
19273 +  run;
19274 +  proc sort data=tempoutnodes; by node; run;
19275 +  proc sort data=belowtext; by node; run;
19277 +  data tempoutnodes;
19278 +    merge tempoutnodes belowtext;
19279 +    by node;
19281 +  run;
19283 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19284 +  %let adjusted = N;
19285 +  %let npriors = 0;
19286 +  data _null_ ;
19287 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19288 +    if eof then do ;
19289 +      call symput("npriors" , strip(put(_N_,best.))) ;
19290 +    end;
19291 +  run;
19292 +  %if &npriors gt 0 %then %let adjusted=Y;
19295 +  /* create a table with targetUsed and targetLevel columns for each node */
19296 +  data temptarmeta;
19297 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19298 +    %if &multipleTar eq N %then %do;
19299 +      AND USE in ('D', 'Y')
19300 +    %end;
19301 +    ));
19302 +    length TARGET $32;
19303 +    Target=name;
19304 +    keep target level;
19305 +  run;
19307 +  %if &multipleTar eq Y %then %do;
19308 +    data temptargetused;
19309 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19310 +      keep node target;
19311 +    run;
19312 +    proc sort data=temptargetused; by target; run;
19313 +    proc sort data=temptarmeta; by target; run;
19314 +    data temptargetused;
19315 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19316 +      by target;
19317 +      if _a and _b;
19318 +    run;
19319 +  %end;
19320 +  %else %do;
19321 +    data temptargetused;
19322 +      set &EM_USER_OUTSTATS;
19323 +      length target $32 tarlevel $10;
19324 +      target="%EM_TARGET";
19325 +      tarlevel="%EM_TARGET_LEVEL";
19326 +      keep node target tarlevel;
19327 +    run;
19328 +    proc sort data=temptargetused nodupkey; by node; run;
19329 +  %end;
19331 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19332 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19333 +  proc sort data=temptargetused; by node; run;
19336 +  /* create tables for all interval targets as well as all class targets */
19337 +  data tempinterval tempclass;
19338 +    merge tempoutstats temptargetused( rename=(target=targetused));
19339 +    by node;
19340 +    %if "&multipleTar" eq "Y" %then %do;
19341 +      if ((missing(Target)) OR (target=targetused ));
19342 +    %end;
19344 +    if tarlevel="INTERVAL" then output tempinterval;
19345 +    else output tempclass;
19346 +  run;
19348 +  /* initialize intTarget and classTarget flags */
19349 +  %let em_intNobs =0;
19350 +  %let em_classNobs = 0;
19351 +  %let em_intTarget= N;
19352 +  %let em_classTarget= N;
19354 +  proc sql;
19355 +    reset noprint;
19356 +    select count(*) into :em_intNobs from tempinterval;
19357 +  quit;
19358 +  proc sql;
19359 +    reset noprint;
19360 +    select count(*) into :em_classNobs from tempclass;
19361 +  quit;
19363 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19364 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19366 +  /* retrieve all information for interval targets */
19367 +  %if &em_intTarget eq Y %then %do;
19369 +    /* determine if leaf variable exists */
19370 +    %let dsid=%sysfunc(open(tempinterval,i));
19371 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19372 +    %let rc=%sysfunc(close(&dsid));
19374 +    proc transpose data=tempinterval
19375 +      %if &leafexists %then %do;
19376 +        (drop=leaf)
19377 +      %end;
19378 +      %if &validexist %then %do;
19379 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19380 +      %end;
19381 +      %else %do;
19382 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19383 +      %end;
19384 +      by node;
19385 +      id statname;
19386 +    run;
19387 +    data tempinterval;
19388 +      set tempinterval;
19389 +      if missing(N) then delete;
19390 +    run;
19391 +  %end;
19393 +  /* retrieve all information for class targets */
19394 +  %if &em_classTarget eq Y %then %do;
19395 +    proc sort data=tempclass; by node category; run;
19396 +    %if &validflag eq N %then %do;
19397 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19398 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19399 +    %end;
19400 +    %else %do;
19401 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19402 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19403 +    %end;
19404 +      set tempclass;
19406 +      %if &validflag eq N %then %do;
19407 +        %if "&adjusted" eq "N" %then %do;
19408 +          if statname="N" then output tempn;
19409 +        %end;
19410 +        %else %do;
19411 +          if statname="NPRIORS" then output tempn;
19412 +        %end;
19413 +        else if statname="PREDICTION" then output temppredict;
19414 +        else if statname="PROBABILITY" then output tempprob;
19415 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19416 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19417 +      %end;
19418 +      %else %do;
19419 +        %if "&adjusted" eq "N" %then %do;
19420 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19421 +        %end;
19422 +        %else %do;
19423 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19424 +        %end;
19425 +        else if statname="PREDICTION" then output temppredict;
19426 +        else if statname="PROBABILITY" then output tempprob;
19427 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19428 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19429 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19430 +      %end;
19431 +    run;
19434 +    /* determine if profit/loss exists in tempprofit */
19435 +    %let em_profitflag=0;
19436 +    %let em_lossflag=0;
19437 +    proc sql;
19438 +      reset noprint;
19439 +      select count(*) into :em_profitflag from tempprofit;
19440 +    quit;
19441 +    proc sql;
19442 +      reset noprint;
19443 +      select count(*) into :em_lossflag from temploss;
19444 +    quit;
19446 +    %if &validFlag eq Y %then %do;
19447 +      proc transpose data=tempn
19448 +        %if "&adjusted" eq "N" %then %do;
19449 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19450 +        %end;
19451 +        %else %do;
19452 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19453 +        %end;
19454 +        by node;
19455 +        id statname;
19456 +      run;
19457 +      %if &em_profitflag ne 0 %then %do;
19458 +        proc transpose data=tempprofit out=tempprofit;
19459 +          by node category;
19460 +          id statname ;
19461 +        run;
19462 +      %end;
19463 +      %if &em_lossflag ne 0 %then %do;
19464 +        proc transpose data=temploss out=temploss;
19465 +          by node category;
19466 +          id statname ;
19467 +        run;
19468 +      %end;
19469 +      data tempprob;
19470 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19471 +        by node
19472 +        %if &multipleTar eq Y %then %do;
19473 +          target
19474 +        %end;
19475 +        category;
19476 +      run;
19477 +    %end;
19479 +    /* store percentcorrect value */
19480 +    data temppredict;
19481 +      merge tempprob temppredict(in=_a);
19482 +      by node category;
19483 +      if _a then do;
19484 +        percentCorrect = statvalue;
19485 +        %if &validFlag eq Y %then %do;
19486 +          vpercentCorrect= vstatvalue;
19487 +        %end;
19488 +      end;
19489 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19490 +      %if &validFlag eq Y %then %do;
19491 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19492 +      %end;
19493 +      ;
19494 +      if missing(percentCorrect) then delete;
19495 +      drop target;
19496 +    run;
19498 +    /* build profittext */
19499 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19500 +      data tempprofittext(keep= node profittext profitloss);
19501 +        length profittext $800 profitloss 8.;
19502 +        retain profittext profitloss;
19504 +        merge tempprob
19505 +        %if &em_profitflag ne 0 %then %do;
19506 +          tempprofit
19507 +        %end;
19508 +        %else %if &em_lossflag ne 0 %then %do;
19509 +          temploss
19510 +        %end;
19511 +        ;
19512 +        by node category;
19514 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19515 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19516 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19517 +          %let profittype = ALL;
19518 +        %end;
19520 +        /* create the profitloss variable for nodecolor if selected */
19521 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19523 +        %if "&profittype" eq "ALL" %then %do;
19524 +          if strip(CATEGORY)="&targetEvent" then do;
19525 +            profitloss=statvalue;
19526 +          end;
19527 +          if first.node then do;
19528 +            %if &validFlag eq N %then %do;
19529 +             %if &em_profitflag ne 0 %then %do;
19530 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19531 +             %end;
19532 +             %if &em_lossflag ne 0 %then %do;
19533 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19534 +             %end;
19535 +            %end;
19536 +            %else %do;
19537 +             %if &em_profitflag ne 0 %then %do;
19538 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19538!+;
19539 +             %end;
19540 +             %if &em_lossflag ne 0 %then %do;
19541 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19542 +             %end;
19543 +            %end;
19544 +          end;
19545 +          else if last.node then do;
19546 +            %if &validFlag eq N %then %do;
19547 +             %if &em_profitflag ne 0 %then %do;
19548 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19549 +             %end;
19550 +             %if &em_lossflag ne 0 %then %do;
19551 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19552 +             %end;
19553 +             /*if CATEGORY="&targetEvent" then do;
19554 +               profitloss=statvalue;
19555 +             end;*/
19556 +            %end;
19557 +            %else %do;
19558 +             %if &em_profitflag ne 0 %then %do;
19559 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19559!+14.&EM_PROPERTY_SPLITPRECISION);
19560 +                if CATEGORY="&targetEvent" then do;
19561 +                 profitloss=ALTERNATIVE_PROFIT;
19562 +                end;
19563 +             %end;
19564 +             %if &em_lossflag ne 0 %then %do;
19565 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19565!+14.&EM_PROPERTY_SPLITPRECISION);
19566 +                if CATEGORY="&targetEvent" then do;
19567 +                  profitloss=ALTERNATIVE_LOSS;
19568 +                end;
19569 +             %end;
19570 +            %end;
19571 +            output;
19572 +          end;
19573 +          else do;
19574 +            %if &validFlag eq N %then %do;
19575 +             %if &em_profitflag ne 0 %then %do;
19576 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19577 +             %end;
19578 +             %if &em_lossflag ne 0 %then %do;
19579 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19580 +             %end;
19581 +            %end;
19582 +            %else %do;
19583 +             %if &em_profitflag ne 0 %then %do;
19584 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19584!+14.&EM_PROPERTY_SPLITPRECISION);
19585 +             %end;
19586 +             %if &em_lossflag ne 0 %then %do;
19587 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19587!+14.&EM_PROPERTY_SPLITPRECISION);
19588 +             %end;
19589 +            %end;
19590 +          end;
19591 +        %end;
19592 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19593 +          if strip(CATEGORY) = "&targetevent" then do;
19594 +            %if &validFlag eq N %then %do;
19595 +             %if &em_profitflag ne 0 %then %do;
19596 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19597 +             %end;
19598 +             %if &em_lossflag ne 0 %then %do;
19599 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19600 +             %end;
19601 +             profitloss=statvalue;
19602 +            %end;
19603 +            %else %do;
19604 +             %if &em_profitflag ne 0 %then %do;
19605 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19605!+;
19606 +                profitloss=ALTERNATIVE_PROFIT;
19607 +             %end;
19608 +             %if &em_lossflag ne 0 %then %do;
19609 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19610 +                profitloss=ALTERNATIVE_LOSS;
19611 +             %end;
19612 +            %end;
19613 +            output;
19614 +          end;
19615 +        %end;
19616 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19617 +          if strip(CATEGORY) = "&targetevent" then do;
19618 +            %if &validFlag eq N %then %do;
19619 +             profitloss=statvalue;
19620 +            %end;
19621 +            %else %do;
19622 +             %if &em_profitflag ne 0 %then %do;
19623 +                profitloss=ALTERNATIVE_PROFIT;
19624 +             %end;
19625 +             %if &em_lossflag ne 0 %then %do;
19626 +                profitloss=ALTERNATIVE_LOSS;
19627 +             %end;
19628 +            %end;
19629 +            output;
19630 +          end;
19631 +        %end;
19632 +      run;
19633 +    %end;
19635 +    data tempprob(keep= node probtext);
19636 +      length probtext $800;
19637 +      retain probtext;
19638 +      set tempprob ;
19639 +      by node;
19641 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19642 +      %let probtype = &EM_PROPERTY_TARGET;
19643 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19644 +        %let probtype = ALL;
19645 +      %end;
19647 +      %if "&probtype" eq "ALL" %then %do;
19648 +        if first.node then do;
19649 +          %if &validFlag eq N %then %do;
19650 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19651 +          %end;
19652 +          %else %do;
19653 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19654 +          %end;
19655 +        end;
19656 +        else if last.node then do;
19657 +          %if &validFlag eq N %then %do;
19658 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19659 +          %end;
19660 +          %else %do;
19661 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19662 +          %end;
19663 +          output;
19664 +        end;
19665 +        else do;
19666 +          %if &validFlag eq N %then %do;
19667 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19668 +          %end;
19669 +          %else %do;
19670 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19671 +          %end;
19672 +        end;
19673 +      %end;
19674 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19675 +        if strip(CATEGORY) = "&targetevent" then do;
19676 +          %if &validFlag eq N %then %do;
19677 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19678 +          %end;
19679 +          %else %do;
19680 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19681 +          %end;
19682 +          output;
19683 +        end;
19684 +      %end;
19685 +      %else %if "&probtype" eq "NONE" %then %do;
19686 +        if last.node then do;
19687 +          output;
19688 +        end;
19689 +      %end;
19690 +    run;
19691 +  %end;
19693 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19695 +  %let oldexists=0;
19696 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19697 +     data old_tree_plot;
19698 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19699 +        rename nodecolor=oldnodecolor;
19700 +     run;
19702 +     proc sort data=old_tree_plot;
19703 +        by node;
19704 +     run;
19706 +     %let oldexists=1;
19707 +  %end;
19709 +  data &EM_USER_TREE_PLOT;
19710 +    length textall $800;
19711 +    merge tempoutnodes temptargetused
19713 +    %if &em_intTarget eq Y %then %do;
19714 +      tempinterval
19715 +    %end;
19717 +    %if &em_classTarget eq Y %then %do;
19719 +      %if &validFlag eq N %then %do;
19720 +        tempn(rename=(statvalue=N))
19721 +      %end;
19722 +      %else %do;
19723 +        tempn
19724 +      %end;
19726 +      temppredict tempprob
19728 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19729 +        tempprofittext
19730 +      %end;
19731 +    %end;
19732 +    ;
19733 +    by node;
19735 +    /* build nodetext based on user selection */
19736 +    textall="";
19738 +    %if &em_intTarget eq Y %then %do;
19739 +    if tarlevel="INTERVAL" then do;
19740 +      /* Nodeid */
19741 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19742 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19743 +      %end;
19745 +      /* Target identifier if multiple targets are used */
19746 +      %if "&multipleTar" eq "Y" %then %do;
19747 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19748 +      %end;
19750 +      %if &validFlag eq Y %then %do;
19751 +         /* Column labels displayed in validflag eq Y only */
19752 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19753 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19753!+noquote ))";
19754 +         %end;
19756 +         /* Average values */
19757 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19758 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19759 +         %end;
19761 +         /* RASE */
19762 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19763 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19764 +         %end;
19766 +         /* Count */
19767 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19768 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19769 +         %end;
19770 +      %end;
19771 +      %else %do;
19772 +         /* Average values */
19773 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19774 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19775 +         %end;
19777 +         /* RASE */
19778 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19779 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19780 +         %end;
19782 +         /* Count */
19783 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19784 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19785 +         %end;
19786 +      %end;
19788 +      /* nodecolor */
19789 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19790 +        nodecolor=PREDICTION;
19791 +      %end;
19792 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19793 +        nodecolor=RASE;
19794 +      %end;
19795 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19796 +        nodecolor=1;
19797 +      %end;
19799 +    end;
19800 +    %end;
19801 +    %if &em_classTarget eq Y %then %do;
19802 +    if tarlevel^="INTERVAL" then  do;
19804 +      /* Nodeid */
19805 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19806 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19807 +      %end;
19808 +      /* Target identifier if multiple targets are used */
19809 +      %if "&multipleTar" eq "Y" %then %do;
19810 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19811 +      %end;
19813 +      /* Predicted values */
19814 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19815 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19816 +      %end;
19818 +      /* Column labels displayed in validflag eq Y only */
19819 +      %if "&ValidFlag" eq "Y" %then %do;
19820 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19821 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19821!+noquote ))";
19822 +        %end;
19823 +      %end;
19825 +      /* Target Values */
19826 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19827 +        textall=strip(textall)||"0A"x||strip(probtext);
19828 +      %end;
19830 +      /* include profit or loss for all target levels */
19831 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19832 +        textall=strip(textall)||"0A"x||strip(profittext);
19833 +      %end;
19835 +      %if &validFlag eq N %then %do;
19836 +        /* Percent Correct */
19837 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19838 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19839 +        %end;
19841 +         /* Count */
19842 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19843 +          %if "&adjusted" eq "N" %then %do;
19844 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19845 +          %end;
19846 +          %else %do;
19847 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19848 +          %end;
19849 +         %end;
19850 +      %end;
19851 +      %else %do;
19852 +        /* Percent Correct */
19853 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19854 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19855 +        %end;
19857 +         /* Count */
19858 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19859 +          %if "&adjusted" eq "N" %then %do;
19860 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19861 +          %end;
19862 +          %else %do;
19863 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19864 +          %end;
19865 +         %end;
19866 +      %end;
19868 +      /* nodecolor */
19869 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19870 +       %if &multipleTar ne Y %then %do;
19871 +        nodecolor=&predTarget;
19872 +       %end;
19873 +       %else %do;
19874 +         nodecolor=percentcorrect;
19875 +       %end;
19876 +      %end;
19877 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19878 +        nodecolor=percentcorrect;
19879 +      %end;
19880 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19881 +        nodecolor=1;
19882 +      %end;
19883 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19884 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19885 +          nodecolor=percentcorrect;
19886 +        %end;
19887 +        %else %do;
19888 +          nodecolor=profitloss;
19889 +        %end;
19890 +      %end;
19892 +    end;
19893 +    %end;
19894 +    %if &em_intTarget eq Y %then %do;
19895 +     drop  PREDICTION  TARGET TARLEVEL
19896 +     %if &ValidFlag eq Y %then %do;
19897 +         VPREDICTION
19898 +     %end;
19899 +     ;
19900 +    %end;
19901 +    %if &em_classTarget eq Y %then %do;
19902 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19903 +     %if &ValidFlag eq Y %then %do;
19904 +         VSTATVALUE
19905 +     %end;
19906 +     ;
19907 +    %end;
19909 +  run;
19911 +  /* add leaf index information to plotds - based on primary target only*/
19912 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19913 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19914 +      set &EM_USER_OUTSTATS;
19915 +      if ((statname="PROBABILITY"
19916 +      %if &validexist %then %do;
19917 +       or statname="VALID: PROBABILITY"
19918 +      %end;
19919 +      ) AND (CATEGORY="&TARGETEVENT")
19920 +      %if "&multipleTar" eq "Y" %then %do;
19921 +        AND (Target="%EM_TARGET")
19922 +      %end;
19923 +      );
19924 +    run;
19926 +    %if &validexist %then %do;
19927 +      proc sort data=tempprob; by node; run;
19928 +      %let vpredTarget = V%substr(&predTarget, 2);
19929 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19930 +         by node;
19931 +         id statname;
19932 +      run;
19933 +    %end;
19934 +  %end;
19935 +  %else %do;
19936 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19937 +      set &EM_USER_OUTSTATS;
19938 +      if ((statname="PREDICTION"
19939 +      %if &validexist %then %do;
19940 +       or statname="VALID: PREDICTION"
19941 +      %end;
19942 +      )
19943 +      %if "&multipleTar" eq "Y" %then %do;
19944 +        AND (Target="%EM_TARGET")
19945 +      %end;
19946 +      );
19947 +    run;
19948 +    %if &validexist %then %do;
19949 +      proc sort data=tempprob; by node; run;
19950 +      %let vpredTarget = V%substr(&predTarget, 2);
19951 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19952 +         by node;
19953 +         id statname;
19954 +      run;
19955 +    %end;
19956 +  %end;
19958 +  proc sort data=tempprob; by node; run;
19959 +  data tempoutnodes;
19960 +    merge tempoutnodes tempprob;
19961 +    by node;
19962 +  run;
19964 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19965 +  data tempnodes;
19966 +    retain traintotal validtotal;
19967 +    set tempnodes(where=(leaf ne . ));
19968 +    tprob=round(&predTarget, .01);
19969 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19970 +      percevent_train=round(tprob*100, .01);
19971 +    %end;
19972 +    %else %do;
19973 +      percevent_train=tprob;
19974 +    %end;
19976 +    perc_train=round((n/traintotal)*100, 0.01);
19977 +    /* leafwidth already has a *10 multiplier */
19978 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19980 +    %if &validexist %then %do;
19981 +      %let vpredTarget = V%substr(&predTarget,2);
19982 +      vprob=round(&vpredTarget, .01);
19983 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19984 +        percevent_valid=round(vprob*100, .01);
19985 +      %end;
19986 +      %else %do;
19987 +        percevent_valid=vprob;
19988 +      %end;
19989 +      perc_valid=round((vn/validtotal)*100, .01);
19990 +    %end;
19992 +    index=_N_;
19993 +    keep node index tprob perc_train percevent_train
19994 +    %if &validexist %then %do;
19995 +        vprob percevent_valid perc_valid
19996 +    %end;
19997 +    ;
19998 +  run;
19999 +  proc sort data=tempnodes; by node; run;
20000 +  data &EM_USER_TREE_PLOT;
20001 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20002 +    by node;
20003 +    if missing(node) then delete;
20004 +    %if &oldexists %then %do;
20005 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20006 +      drop oldnodecolor;
20007 +    %end;
20008 +    abovetext = compbl(abovetext);
20010 +    /* add variable labels */
20011 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20012 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20013 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20014 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20015 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20016 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20018 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20019 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20020 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20021 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20022 +          %end;
20023 +          %else %do;
20024 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20025 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20026 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20027 +          %end;
20028 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20030 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20031 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20032 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20033 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20034 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20035 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20036 +          %end;
20037 +          %else %do;
20038 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20039 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20040 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20041 +          %end;
20042 +    ;
20043 +  run;
20045 +  /* delete temporary tables */
20046 +  proc datasets lib=work nolist;
20047 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20048 +  run;
20050 +%mend em_tree_makePlotDs;
20054 +%macro em_tree_report;
20056 +   /* report properties */
20057 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20058 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20059 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20060 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20061 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20062 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20063 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20064 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20065 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20066 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20067 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20068 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20069 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20071 +   %let validexist=0;
20072 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20073 +     %let validexist=1;
20074 +   %end;
20076 +   /* determine if multiple targets will be processed */
20077 +   %let em_tree_multipleTargets=N;
20078 +   %let em_tree_numTarget=1;
20079 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20080 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20081 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20082 +         %let em_tree_multipleTargets=N;
20083 +      %end;
20084 +      %else %do;
20085 +        data _null_;
20086 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20087 +          if eof then
20088 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20089 +        run;
20091 +        %if &em_tree_numTarget gt 1 %then %do;
20092 +           %let em_tree_multipleTargets=Y;
20093 +        %end;
20094 +     %end;
20095 +   %end;
20097 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20099 +   /* variable importance */
20100 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20101 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20103 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20104 +     /* and the columns may not be generated                                                                                 */
20105 +     %let em_tree_cvexists=;
20106 +     %let em_tree_surrexists=.;
20107 +     data _null_;
20108 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20109 +       if eof then do ;
20110 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20111 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20112 +       end;
20113 +     run;
20115 +     data &EM_USER_OUTIMPORT;
20116 +         set &EM_USER_OUTIMPORT;
20117 +         /* format columns based on Precison value specified */
20118 +         format importance 15.&EM_PROPERTY_PRECISION
20119 +              %if &validexist %then %do;
20120 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20121 +              %end;
20122 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20123 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20124 +              %end;
20125 +         ;
20126 +     run;
20128 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20129 +     proc print data=&EM_USER_OUTIMPORT
20130 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20131 +          (where=((nrules>0) OR (nsurrogates>0)))
20132 +        %end;
20133 +        %else %do;
20134 +           (where=(nrules>0))
20135 +        %end;
20136 +        label noobs
20137 +        ;
20138 +     run;
20139 +     title10;
20141 +   %end;
20143 +   /* Sequence */
20144 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20145 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20146 +   data _null_ ;
20147 +      set &EM_USER_outseq (obs=2) end=eof ;
20148 +      if eof then do ;
20149 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20150 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20151 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20152 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20153 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20154 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20155 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20156 +      end;
20157 +    run;
20159 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20160 +      data &EM_USER_OUTSEQ;
20161 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20162 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20163 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20164 +           _XMISC_=_VMISC_
20165 +        %end;
20166 +        %if "&em_tree_aprof" ne "."  %then %do;
20167 +           _XAPROF_=_VAPROF_
20168 +           _XPROF_ = _VPROF_
20169 +        %end;
20170 +        %if "&em_tree_aloss" ne "."  %then %do;
20171 +           _XALOSS_=_VALOSS_
20172 +        %end;
20173 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20174 +           _XPASE_ = _VPASE_
20175 +           _XPMISC_ = _VPMISC_
20176 +        %end;
20178 +        ));
20179 +     %end;
20180 +     %else %do;
20181 +        set &EM_USER_OUTSEQ;
20182 +     %end;
20184 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20185 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20186 +            _MISC_   15.&EM_PROPERTY_PRECISION
20187 +         %end;
20188 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20189 +            _PASE_  15.&EM_PROPERTY_PRECISION
20190 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20191 +         %end;
20192 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20193 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20194 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20195 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20196 +            %end;
20197 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20198 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20199 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20200 +            %end;
20201 +         %end;
20202 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20203 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20204 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20205 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20206 +            %end;
20207 +         %end;
20208 +         %if "&em_tree_seq" ne "." %then %do;
20209 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20210 +         %end;
20211 +         %if "&em_tree_vseq" ne "." %then %do;
20212 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20213 +         %end;
20214 +         %if "&em_tree_aprof" ne "." %then %do;
20215 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20216 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20217 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20218 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20219 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20220 +           %end;
20221 +         %end;
20222 +         %else %if "&em_tree_aloss" ne "." %then %do;
20223 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20224 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20225 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20226 +           %end;
20227 +         %end;
20228 +      ;
20229 +    run;
20230 +   %end;
20232 +   /* Observation Based Importance */
20233 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20235 +      /* need to check for 0 obs */
20236 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20237 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20238 +      %let rc=%sysfunc(close(&dsid));
20240 +      %if &onobs %then %do;
20241 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20242 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20244 +         data &EM_USER_OUTOBSIMP;
20245 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20246 +           if _a;
20247 +           by _INPUT1_;
20248 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20249 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20250 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20251 +                   %end;
20252 +                   ;
20253 +         run;
20254 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20255 +      %end;
20256 +   %end;
20258 +  %end;
20260 +  /* create dataset to support tree diagram and icicle plot */
20261 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20262 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20264 +  /* display tree diagram */
20265 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20266 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20268 +  /* display icicle diagram */
20269 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20270 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20272 +  /* Leaf Statistics Plot */
20273 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20275 +  /* print leaf information to output window */
20276 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20278 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20279 +       by descending N;
20280 +     run;
20282 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20283 +     %local vn;
20284 +     data _null_;
20285 +       set t (obs=2) end=eof;
20286 +       if eof then do;
20287 +         call symput("vn", strip(put(vn, best.)));
20288 +       end;
20289 +     run;
20291 +     data t;
20292 +       set t;
20293 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20294 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20295 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20296 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20297 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20298 +       %end;
20299 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20300 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20301 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20302 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20303 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20304 +          %end;
20305 +       %end;
20306 +       ;
20307 +     run;
20309 +     /* determine if rase is found in t */
20310 +    %let dsid=%sysfunc(open(t,i));
20311 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20312 +    %let rc=%sysfunc(close(&dsid));
20314 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20315 +     proc print data=t noobs label;
20316 +       where tprob ne .;
20317 +       var node depth N tprob
20318 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20319 +         %if "&vn" ne "." %then %do;
20320 +           VN
20321 +         %end;
20322 +         vprob
20323 +       %end;
20324 +       %if &raseexists %then %do;
20325 +            RASE
20326 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20327 +              VRASE
20328 +            %end;
20329 +       %end;
20330 +       ;
20331 +     run;
20332 +     title10;
20333 +  %end;
20335 +  /* create plots that are done during training of node */
20336 +  /* display iterative plot, including reference line */
20337 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20338 +   /* %if &nleaves eq  %then %do; */
20339 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20340 +      data _null_;
20341 +        set &EM_USER_OUTTOPOLOGY end=eof;
20342 +        if eof then do;
20343 +          call symput('nleaves', LEAF);
20344 +        end;
20345 +      run;
20346 +   /* %end; */
20348 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20349 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20350 +  %end;
20352 +  /* display leaf statistics */
20353 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20355 +  /* stats by node if multiple targets = Y */
20356 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20357 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20358 +    data &EM_USER_OUTSTATS;
20359 +      set &EM_USER_OUTSTATS;
20361 +     * if STATNAME="TARGET" then delete;
20362 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20363 +      drop leaf;
20364 +    run;
20365 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20367 +  %end;
20368 +  %else %do;
20369 +    /* add outstats and outdescribe to spk but not results */
20370 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20371 +  %end;
20373 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS3.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set EMWS3.TREE2_OUTSEQ.
NOTE: The data set EMWS3.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 386 observations read from the data set EMWS3.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS3.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 90 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 30 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE2_TREE_PLOT has 15 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS3.TREE2_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE2_TREE_PLOT has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS3.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 15 observations read from the data set EMWS3.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20374
20375  *------------------------------------------------------------*;
20376  * End REPORT: Tree2;
20377  *------------------------------------------------------------*;
 
20378  /* Reset EM Options */
20379  options formchar="|----|+|---+=|-/\<>*";
20380  options nocenter ls=256 ps=10000;
20381  goptions reset=all device=GIF NODISPLAY;
 
20382  proc sort data=WORK.EM_USER_REPORT;
20383  by ID VIEW;
20384  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20385  proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20386  by NAME;
20387  run;
 
NOTE: There were 99 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20388  proc sort data=EMWS3.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20389  by NAME;
20390  run;
 
NOTE: There were 99 observations read from the data set EMWS3.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20391  data WORK.ASSESS_META;
20392  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20393  by NAME;
20394  run;
 
NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20395  data EM_temp_assessMeta;
20396  set EMWS3.Tree2_CMeta_TRAIN;
20397  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20398  run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20399  data EM_temp_assessdata;
20400  set EMWS3.Tree2_TRAIN(keep=
20401  F_RESPOND
20402  I_RESPOND
20403  P_RESPOND0
20404  P_RESPOND1
20405  Q_RESPOND0
20406  Q_RESPOND1
20407  R_RESPOND0
20408  R_RESPOND1
20409  U_RESPOND
20410  V_RESPOND0
20411  V_RESPOND1
20412  _WARN_
20413  RESPOND
20414  );
20415  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24697   data EM_temp_assessMeta;
24698   set EMWS3.Tree2_CMeta_TRAIN;
24699   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24700   run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24701   data EM_temp_assessdata;
24702   set EMWS3.Tree2_VALIDATE(keep=
24703   F_RESPOND
24704   I_RESPOND
24705   P_RESPOND0
24706   P_RESPOND1
24707   Q_RESPOND0
24708   Q_RESPOND1
24709   R_RESPOND0
24710   R_RESPOND1
24711   U_RESPOND
24712   V_RESPOND0
24713   V_RESPOND1
24714   _WARN_
24715   RESPOND
24716   );
24717   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 16121 observations read from the data set EMWS3.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS3.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
29008   %let _cn = %sysfunc(getoption(CENTER));
29009   options nocenter;
29010   proc print data=EMWS3.Tree2_EMREPORTFIT noobs label;
29011   var STAT LABEL TRAIN
29012   VALIDATE
29013   ;
29014   by TARGET TARGETLABEL;
29015   title9 ' ';
29016   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29017   run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29018   title10;
29019   options &_cn;
 
29020   proc sort data=EMWS3.Tree2_EMCLASSIFICATION nothreads;
29021   by DATAROLE TARGET TARGETLABEL;
29022   run;
 
NOTE: There were 7 observations read from the data set EMWS3.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE2_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
29023   %let _cn = %sysfunc(getoption(CENTER));
29024   options nocenter;
29025   proc print data=EMWS3.Tree2_EMCLASSIFICATION noobs label;
29026   var from into pct_row pct_col count percent
29027   ;
29028   by DATAROLE TARGET TARGETLABEL;
29029   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
29030   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
29031   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
29032   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
29033   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
29034   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
29035   where _TYPE_='PREDICTION';
29036   title9 ' ';
29037   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
29038   run;
 
NOTE: There were 7 observations read from the data set EMWS3.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
29039   title9;
29040   title10;
29041   options &_cn;
 
29042   %let _cn = %sysfunc(getoption(CENTER));
29043   options nocenter;
29044   data EMWS3.Tree2_EMEVENTREPORT;
29045   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
29046   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
29046 ! FALSEEVENT
29047   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
29048      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
29049   FALSEEVENT=0;
29050   FALSENEVENT=0;
29051   TRUEEVENT=0;
29052   TRUENEVENT=0;
29053   set EMWS3.Tree2_EMEVENTREPORT;
29054   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
29055   proc print data=EMWS3.Tree2_EMEVENTREPORT noobs label;
29056   title9 ' ';
29057   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
29058   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
29059   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
29060   title10;
29061   options &_cn;
 
29062   proc datasets library=EMWS3 nolist;
29063   modify Tree2_EMRANK;
29064   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29065   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29066   run;
 
NOTE: MODIFY was successful for EMWS3.TREE2_EMRANK.DATA.
29067   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
29068   %let _cn = %sysfunc(getoption(CENTER));
29069   options nocenter;
29070   proc print data=EMWS3.Tree2_EMRANK label noobs;
29071   var
29072   decile gain lift liftc resp respc N _meanP_;
29073   by
29074   notsorted DATAROLE
29075   notsorted TARGET
29076   notsorted TARGETLABEL
29077   ;
29078   title9 ' ';
29079   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29080   run;
 
NOTE: There were 40 observations read from the data set EMWS3.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
29081   title10;
29082   options &_cn;
 
29083   proc datasets library=EMWS3 nolist;
29084   modify Tree2_EMSCOREDIST;
29085   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29086   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29087   run;
 
NOTE: MODIFY was successful for EMWS3.TREE2_EMSCOREDIST.DATA.
29088   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
